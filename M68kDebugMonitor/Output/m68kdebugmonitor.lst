680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 01 Mar 2024      Time: 12:19:06          Source: C:\USERS\ADMIN\DESKTOP\ASSIGNMENT3\SPI_CONTROLLER\M68KDEBUGMONITOR\OUTPUT\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  30A2      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  23D6      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\USERS\ADMIN\DESKTOP\ASSIGNMENT3\SPI_CONTROLLER\M68KV6.0-800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3532      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~2_1.L
00000AB4  3E44      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~2_2.L
00000ADC  3E48      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~2_3.L
00000AFA  3E5E      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~2_4.L
00000B06  3E60      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3532      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  344E      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~2_5.L
00000CE0  3E62      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~2_6.L
00000CEA  3E9C      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~2_7.L
00000D0C  3EB4      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~2_8.L
00000D2E  3EBC      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~2_9.L
00000D44  3EC2      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~2_1.L
00000D9E  3E44      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3532      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~2_10.L
00000DCA  3EC6      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~2_6.L
00000DD4  3E9C      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~2_11.L
00000DE8  3EDA      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~2_12.L
00000DFC  3EF0      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~2_13.L
00000E1C  3F04      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3532      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~2_14.L
00000E64  3F34      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3516      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  3382      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  344E      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~2_15.L
00000F8C  3F64      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~2_16.L
00000F9A  3F8A      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3532      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~2_17.L
00000FD2  3FAC      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~2_18.L
00000FDC  3FC8      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~2_19.L
00000FE6  400E      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~2_20.L
00001008  4020      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  34B2      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~2_21.L
000010A6  4032      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** SPI Initiallization
                    1548   ; ********************************************************************/
                    1549   ; /*************************************************************
                    1550   ; ** SPI Controller registers
                    1551   ; **************************************************************/
                    1552   ; // SPI Registers
                    1553   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                    1554   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                    1555   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                    1556   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                    1557   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                    1558   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                    1559   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                    1560   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                    1561   ; // and write FF to disable it
                    1562   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                    1563   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                    1564   ; /******************************************************************************************
                    1565   ; ** The following code is for the SPI controller
                    1566   ; *******************************************************************************************/
                    1567   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1568   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1569   ; int TestForSPITransmitDataComplete(void){
                    1570   _TestForSPITransmitDataComplete:
                    1571   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1572   ; return (((SPI_Status & 0x80)>>7)%2);
000010C4  1039 0040 1573          move.b    4227106,D0
000010C8  8022      
000010CA  C07C 00FF 1574          and.w     #255,D0
000010CE  C07C 0080 1575          and.w     #128,D0
000010D2  EE40      1576          asr.w     #7,D0
000010D4  C0BC 0000 1577          and.l     #65535,D0
000010D8  FFFF      
000010DA  81FC 0002 1578          divs.w    #2,D0
000010DE  4840      1579          swap      D0
000010E0  48C0      1580          ext.l     D0
000010E2  4E75      1581          rts
                    1582   ; }
                    1583   ; /************************************************************************************
                    1584   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1585   ; ************************************************************************************/
                    1586   ; void SPI_Init(void)
                    1587   ; {
                    1588   _SPI_Init:
                    1589   ; //TODO
                    1590   ; //
                    1591   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1592   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1593   ; //
                    1594   ; // Here are some settings we want to create
                    1595   ; //
                    1596   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    1597   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1598   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    1599   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1600   ; SPI_Control = 0x53; //0101_0011
000010E4  13FC 0053 1601          move.b    #83,4227104
000010E8  0040 8020 
                    1602   ; SPI_Ext = 0x00;//0000_0000
000010EC  4239 0040 1603          clr.b     4227110
000010F0  8026      
                    1604   ; Disable_SPI_CS();
000010F2  13FC 00FF 1605          move.b    #255,4227112
000010F6  0040 8028 
                    1606   ; SPI_Status = 0xC0; //1100_0000 --> clear the write collision and interrupt
000010FA  13FC 00C0 1607          move.b    #192,4227106
000010FE  0040 8022 
00001102  4E75      1608          rts
                    1609   ; }
                    1610   ; /************************************************************************************
                    1611   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1612   ; ************************************************************************************/
                    1613   ; void WaitForSPITransmitComplete(void)
                    1614   ; {
                    1615   _WaitForSPITransmitComplete:
00001104  2F02      1616          move.l    D2,-(A7)
                    1617   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1618   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1619   ; // just in case they were set
                    1620   ; int test_complete = TestForSPITransmitDataComplete();
00001106  4EB8 10C4 1621          jsr       _TestForSPITransmitDataComplete
0000110A  2400      1622          move.l    D0,D2
                    1623   ; while(!test_complete){ // only on SPIF bit being set
                    1624   WaitForSPITransmitComplete_1:
0000110C  4A82      1625          tst.l     D2
0000110E  6608      1626          bne.s     WaitForSPITransmitComplete_3
                    1627   ; test_complete = TestForSPITransmitDataComplete();
00001110  4EB8 10C4 1628          jsr       _TestForSPITransmitDataComplete
00001114  2400      1629          move.l    D0,D2
00001116  60F4      1630          bra       WaitForSPITransmitComplete_1
                    1631   WaitForSPITransmitComplete_3:
                    1632   ; }
                    1633   ; SPI_Status = 0xC0; //1100_0000 --> clear the write collision and interrupt
00001118  13FC 00C0 1634          move.b    #192,4227106
0000111C  0040 8022 
00001120  241F      1635          move.l    (A7)+,D2
00001122  4E75      1636          rts
                    1637   ; }
                    1638   ; /************************************************************************************
                    1639   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1640   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1641   ; ************************************************************************************/
                    1642   ; int WriteSPIChar(int c)
                    1643   ; {
                    1644   _WriteSPIChar:
00001124  4E56 FFFC 1645          link      A6,#-4
                    1646   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1647   ; // wait for completion of transmission
                    1648   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1649   ; // by reading fom the SPI controller Data Register.
                    1650   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1651   ; //
                    1652   ; // modify '0' below to return back read byte from data register
                    1653   ; //
                    1654   ; int read_back;
                    1655   ; SPI_Data = c; // read lowermost byte
00001128  202E 0008 1656          move.l    8(A6),D0
0000112C  13C0 0040 1657          move.b    D0,4227108
00001130  8024      
                    1658   ; WaitForSPITransmitComplete();
00001132  4EB8 1104 1659          jsr       _WaitForSPITransmitComplete
                    1660   ; read_back = SPI_Data;
00001136  1039 0040 1661          move.b    4227108,D0
0000113A  8024      
0000113C  C0BC 0000 1662          and.l     #255,D0
00001140  00FF      
00001142  2D40 FFFC 1663          move.l    D0,-4(A6)
                    1664   ; return read_back; //return read data
00001146  202E FFFC 1665          move.l    -4(A6),D0
0000114A  4E5E      1666          unlk      A6
0000114C  4E75      1667          rts
                    1668   ; }
                    1669   ; // writing dummy data to read useful data as output from read FIFO
                    1670   ; int  ReadSPIChar(void){
                    1671   _ReadSPIChar:
0000114E  4E56 FFFC 1672          link      A6,#-4
                    1673   ; int read_data;
                    1674   ; read_data = WriteSPIChar(0xCA); //write dummy data
00001152  4878 00CA 1675          pea       202
00001156  4EB8 1124 1676          jsr       _WriteSPIChar
0000115A  584F      1677          addq.w    #4,A7
0000115C  2D40 FFFC 1678          move.l    D0,-4(A6)
                    1679   ; return read_data; // expect to read useful data from read FIFO
00001160  202E FFFC 1680          move.l    -4(A6),D0
00001164  4E5E      1681          unlk      A6
00001166  4E75      1682          rts
                    1683   ; }
                    1684   ; void SetSPIFlashWriteEnableLatch(void){
                    1685   _SetSPIFlashWriteEnableLatch:
00001168  4E56 FFFC 1686          link      A6,#-4
                    1687   ; int issue_write_enable;
                    1688   ; Enable_SPI_CS();
0000116C  13FC 00FE 1689          move.b    #254,4227112
00001170  0040 8028 
                    1690   ; issue_write_enable = WriteSPIChar(0x06);//write enable command
00001174  4878 0006 1691          pea       6
00001178  4EB8 1124 1692          jsr       _WriteSPIChar
0000117C  584F      1693          addq.w    #4,A7
0000117E  2D40 FFFC 1694          move.l    D0,-4(A6)
                    1695   ; Disable_SPI_CS();  // drive CS high
00001182  13FC 00FF 1696          move.b    #255,4227112
00001186  0040 8028 
0000118A  4E5E      1697          unlk      A6
0000118C  4E75      1698          rts
                    1699   ; }
                    1700   ; //
                    1701   ; void ClearSPIFlashWriteEnableLatch(void){
                    1702   _ClearSPIFlashWriteEnableLatch:
0000118E  4E56 FFFC 1703          link      A6,#-4
                    1704   ; int issue_write_disable;
                    1705   ; Enable_SPI_CS();
00001192  13FC 00FE 1706          move.b    #254,4227112
00001196  0040 8028 
                    1707   ; issue_write_disable = WriteSPIChar(0x04); // write disable command
0000119A  4878 0004 1708          pea       4
0000119E  4EB8 1124 1709          jsr       _WriteSPIChar
000011A2  584F      1710          addq.w    #4,A7
000011A4  2D40 FFFC 1711          move.l    D0,-4(A6)
                    1712   ; Disable_SPI_CS();
000011A8  13FC 00FF 1713          move.b    #255,4227112
000011AC  0040 8028 
000011B0  4E5E      1714          unlk      A6
000011B2  4E75      1715          rts
                    1716   ; }
                    1717   ; //
                    1718   ; int  ReadSPIFlashStatusReg(void){
                    1719   _ReadSPIFlashStatusReg:
000011B4  2F02      1720          move.l    D2,-(A7)
                    1721   ; int status_reg_1;
                    1722   ; Enable_SPI_CS();
000011B6  13FC 00FE 1723          move.b    #254,4227112
000011BA  0040 8028 
                    1724   ; status_reg_1 = WriteSPIChar(0x05);
000011BE  4878 0005 1725          pea       5
000011C2  4EB8 1124 1726          jsr       _WriteSPIChar
000011C6  584F      1727          addq.w    #4,A7
000011C8  2400      1728          move.l    D0,D2
                    1729   ; status_reg_1 = ReadSPIChar(); // read status register 1 value
000011CA  4EB8 114E 1730          jsr       _ReadSPIChar
000011CE  2400      1731          move.l    D0,D2
                    1732   ; Disable_SPI_CS();
000011D0  13FC 00FF 1733          move.b    #255,4227112
000011D4  0040 8028 
                    1734   ; return status_reg_1;
000011D8  2002      1735          move.l    D2,D0
000011DA  241F      1736          move.l    (A7)+,D2
000011DC  4E75      1737          rts
                    1738   ; }
                    1739   ; ////
                    1740   ; //void WaitForSPIFlashWriteCompletion(void){
                    1741   ; //    int SPIFlashStatusReg;
                    1742   ; //    SPIFlashStatusReg = ReadSPIFlashStatusReg() & 0x01; // get LSB --> Busy Bit
                    1743   ; //    while(SPIFlashStatusReg){
                    1744   ; //        SPIFlashStatusReg = ReadSPIFlashStatusReg() & 0x01; // keep checking until busy bit = 0
                    1745   ; //    }
                    1746   ; //}
                    1747   ; void WaitForSPIFlashWriteCompletion(void){
                    1748   _WaitForSPIFlashWriteCompletion:
000011DE  4E56 FFF8 1749          link      A6,#-8
000011E2  2F02      1750          move.l    D2,-(A7)
                    1751   ; int write_complete = 1;
000011E4  7401      1752          moveq     #1,D2
                    1753   ; int issue_read_status_reg_1;
                    1754   ; int stat_reg;
                    1755   ; Enable_SPI_CS();
000011E6  13FC 00FE 1756          move.b    #254,4227112
000011EA  0040 8028 
                    1757   ; issue_read_status_reg_1 = WriteSPIChar(0x05); // read status register-1 command
000011EE  4878 0005 1758          pea       5
000011F2  4EB8 1124 1759          jsr       _WriteSPIChar
000011F6  584F      1760          addq.w    #4,A7
000011F8  2D40 FFF8 1761          move.l    D0,-8(A6)
                    1762   ; while(write_complete){ // poll until flash write is completed
                    1763   WaitForSPIFlashWriteCompletion_1:
000011FC  4A82      1764          tst.l     D2
000011FE  6716      1765          beq.s     WaitForSPIFlashWriteCompletion_3
                    1766   ; stat_reg = ReadSPIChar();
00001200  4EB8 114E 1767          jsr       _ReadSPIChar
00001204  2D40 FFFC 1768          move.l    D0,-4(A6)
                    1769   ; write_complete = stat_reg & 0x01;
00001208  202E FFFC 1770          move.l    -4(A6),D0
0000120C  C0BC 0000 1771          and.l     #1,D0
00001210  0001      
00001212  2400      1772          move.l    D0,D2
00001214  60E6      1773          bra       WaitForSPIFlashWriteCompletion_1
                    1774   WaitForSPIFlashWriteCompletion_3:
                    1775   ; }
                    1776   ; Disable_SPI_CS();
00001216  13FC 00FF 1777          move.b    #255,4227112
0000121A  0040 8028 
0000121E  241F      1778          move.l    (A7)+,D2
00001220  4E5E      1779          unlk      A6
00001222  4E75      1780          rts
                    1781   ; }
                    1782   ; //
                    1783   ; int  ReadSPIFlashByte( int FlashAddress){
                    1784   _ReadSPIFlashByte:
00001224  4E56 0000 1785          link      A6,#0
00001228  48E7 3020 1786          movem.l   D2/D3/A2,-(A7)
0000122C  45F8 1124 1787          lea       _WriteSPIChar.L,A2
00001230  262E 0008 1788          move.l    8(A6),D3
                    1789   ; int read_data;
                    1790   ; Enable_SPI_CS();
00001234  13FC 00FE 1791          move.b    #254,4227112
00001238  0040 8028 
                    1792   ; read_data = WriteSPIChar(0x03);
0000123C  4878 0003 1793          pea       3
00001240  4E92      1794          jsr       (A2)
00001242  584F      1795          addq.w    #4,A7
00001244  2400      1796          move.l    D0,D2
                    1797   ; read_data = WriteSPIChar((FlashAddress >> 16) & 0xFF); // write upper 8 bits of address
00001246  2203      1798          move.l    D3,D1
00001248  E081      1799          asr.l     #8,D1
0000124A  E081      1800          asr.l     #8,D1
0000124C  C2BC 0000 1801          and.l     #255,D1
00001250  00FF      
00001252  2F01      1802          move.l    D1,-(A7)
00001254  4E92      1803          jsr       (A2)
00001256  584F      1804          addq.w    #4,A7
00001258  2400      1805          move.l    D0,D2
                    1806   ; read_data = WriteSPIChar((FlashAddress >> 8) & 0xFF); // write middle 8 bits of address
0000125A  2203      1807          move.l    D3,D1
0000125C  E081      1808          asr.l     #8,D1
0000125E  C2BC 0000 1809          and.l     #255,D1
00001262  00FF      
00001264  2F01      1810          move.l    D1,-(A7)
00001266  4E92      1811          jsr       (A2)
00001268  584F      1812          addq.w    #4,A7
0000126A  2400      1813          move.l    D0,D2
                    1814   ; read_data = WriteSPIChar(FlashAddress & 0xFF); // write lower 8 bits of address
0000126C  2203      1815          move.l    D3,D1
0000126E  C2BC 0000 1816          and.l     #255,D1
00001272  00FF      
00001274  2F01      1817          move.l    D1,-(A7)
00001276  4E92      1818          jsr       (A2)
00001278  584F      1819          addq.w    #4,A7
0000127A  2400      1820          move.l    D0,D2
                    1821   ; read_data = ReadSPIChar();
0000127C  4EB8 114E 1822          jsr       _ReadSPIChar
00001280  2400      1823          move.l    D0,D2
                    1824   ; Disable_SPI_CS();
00001282  13FC 00FF 1825          move.b    #255,4227112
00001286  0040 8028 
                    1826   ; return read_data;
0000128A  2002      1827          move.l    D2,D0
0000128C  4CDF 040C 1828          movem.l   (A7)+,D2/D3/A2
00001290  4E5E      1829          unlk      A6
00001292  4E75      1830          rts
                    1831   ; }
                    1832   ; //
                    1833   ; void ReadSPIFlashData( int FlashAddress, unsigned char *MemoryAddress, int size){
                    1834   _ReadSPIFlashData:
00001294  4E56 0000 1835          link      A6,#0
00001298  48E7 3820 1836          movem.l   D2/D3/D4/A2,-(A7)
0000129C  45F8 1124 1837          lea       _WriteSPIChar.L,A2
000012A0  282E 0008 1838          move.l    8(A6),D4
                    1839   ; int issue_read;
                    1840   ; int i;
                    1841   ; Enable_SPI_CS();
000012A4  13FC 00FE 1842          move.b    #254,4227112
000012A8  0040 8028 
                    1843   ; issue_read = WriteSPIChar(0x03);
000012AC  4878 0003 1844          pea       3
000012B0  4E92      1845          jsr       (A2)
000012B2  584F      1846          addq.w    #4,A7
000012B4  2600      1847          move.l    D0,D3
                    1848   ; issue_read = WriteSPIChar((FlashAddress >> 16) & 0xFF); // write upper 8 bits of address
000012B6  2204      1849          move.l    D4,D1
000012B8  E081      1850          asr.l     #8,D1
000012BA  E081      1851          asr.l     #8,D1
000012BC  C2BC 0000 1852          and.l     #255,D1
000012C0  00FF      
000012C2  2F01      1853          move.l    D1,-(A7)
000012C4  4E92      1854          jsr       (A2)
000012C6  584F      1855          addq.w    #4,A7
000012C8  2600      1856          move.l    D0,D3
                    1857   ; issue_read = WriteSPIChar((FlashAddress >> 8) & 0xFF); // write middle 8 bits of address
000012CA  2204      1858          move.l    D4,D1
000012CC  E081      1859          asr.l     #8,D1
000012CE  C2BC 0000 1860          and.l     #255,D1
000012D2  00FF      
000012D4  2F01      1861          move.l    D1,-(A7)
000012D6  4E92      1862          jsr       (A2)
000012D8  584F      1863          addq.w    #4,A7
000012DA  2600      1864          move.l    D0,D3
                    1865   ; issue_read = WriteSPIChar(FlashAddress & 0xFF);
000012DC  2204      1866          move.l    D4,D1
000012DE  C2BC 0000 1867          and.l     #255,D1
000012E2  00FF      
000012E4  2F01      1868          move.l    D1,-(A7)
000012E6  4E92      1869          jsr       (A2)
000012E8  584F      1870          addq.w    #4,A7
000012EA  2600      1871          move.l    D0,D3
                    1872   ; for(i = 0; i < size; i++){
000012EC  4282      1873          clr.l     D2
                    1874   ReadSPIFlashData_1:
000012EE  B4AE 0010 1875          cmp.l     16(A6),D2
000012F2  6C10      1876          bge.s     ReadSPIFlashData_3
                    1877   ; MemoryAddress[i] = ReadSPIChar();
000012F4  4EB8 114E 1878          jsr       _ReadSPIChar
000012F8  206E 000C 1879          move.l    12(A6),A0
000012FC  1180 2800 1880          move.b    D0,0(A0,D2.L)
00001300  5282      1881          addq.l    #1,D2
00001302  60EA      1882          bra       ReadSPIFlashData_1
                    1883   ReadSPIFlashData_3:
                    1884   ; }
                    1885   ; Disable_SPI_CS();
00001304  13FC 00FF 1886          move.b    #255,4227112
00001308  0040 8028 
0000130C  4CDF 041C 1887          movem.l   (A7)+,D2/D3/D4/A2
00001310  4E5E      1888          unlk      A6
00001312  4E75      1889          rts
                    1890   ; }
                    1891   ; //
                    1892   ; void EraseSPIFlashChip(void){
                    1893   _EraseSPIFlashChip:
00001314  4E56 FFFC 1894          link      A6,#-4
                    1895   ; int issue_erase;
                    1896   ; printf("\r\nErasing Flash chip....");
00001318  4879 0000 1897          pea       @m68kde~2_22.L
0000131C  4066      
0000131E  4EB9 0000 1898          jsr       _printf
00001322  3532      
00001324  584F      1899          addq.w    #4,A7
                    1900   ; SetSPIFlashWriteEnableLatch();
00001326  4EB8 1168 1901          jsr       _SetSPIFlashWriteEnableLatch
                    1902   ; Enable_SPI_CS();
0000132A  13FC 00FE 1903          move.b    #254,4227112
0000132E  0040 8028 
                    1904   ; issue_erase = WriteSPIChar(0xC7);
00001332  4878 00C7 1905          pea       199
00001336  4EB8 1124 1906          jsr       _WriteSPIChar
0000133A  584F      1907          addq.w    #4,A7
0000133C  2D40 FFFC 1908          move.l    D0,-4(A6)
                    1909   ; Disable_SPI_CS();
00001340  13FC 00FF 1910          move.b    #255,4227112
00001344  0040 8028 
                    1911   ; WaitForSPIFlashWriteCompletion();
00001348  4EB8 11DE 1912          jsr       _WaitForSPIFlashWriteCompletion
                    1913   ; ClearSPIFlashWriteEnableLatch();
0000134C  4EB8 118E 1914          jsr       _ClearSPIFlashWriteEnableLatch
                    1915   ; printf("\r\n********Finished erasing********");
00001350  4879 0000 1916          pea       @m68kde~2_23.L
00001354  4080      
00001356  4EB9 0000 1917          jsr       _printf
0000135A  3532      
0000135C  584F      1918          addq.w    #4,A7
0000135E  4E5E      1919          unlk      A6
00001360  4E75      1920          rts
                    1921   ; }
                    1922   ; //
                    1923   ; void WriteSPIFlashData(int FlashAddress, unsigned char *MemoryAddress, int size){
                    1924   _WriteSPIFlashData:
00001362  4E56 FFFC 1925          link      A6,#-4
00001366  48E7 3E20 1926          movem.l   D2/D3/D4/D5/D6/A2,-(A7)
0000136A  45F8 1124 1927          lea       _WriteSPIChar.L,A2
0000136E  2A2E 0008 1928          move.l    8(A6),D5
00001372  2C2E 0010 1929          move.l    16(A6),D6
                    1930   ; int issue_page_program;
                    1931   ; int num_bytes_to_write;
                    1932   ; int i;
                    1933   ; int mem_data;
                    1934   ; // TODO: add erase sector before doing any writes
                    1935   ; // TODO: consider how to handle FlashAddress not being integer multiple of 256
                    1936   ; // TODO: consider how to handle if we write an incomplete page (case where num_bytes < 256)
                    1937   ; printf("\r\nWriting Program to Flash chip....");
00001376  4879 0000 1938          pea       @m68kde~2_24.L
0000137A  40A4      
0000137C  4EB9 0000 1939          jsr       _printf
00001380  3532      
00001382  584F      1940          addq.w    #4,A7
                    1941   ; while(size > 0){
                    1942   WriteSPIFlashData_1:
00001384  0C86 0000 1943          cmp.l     #0,D6
00001388  0000      
0000138A  6F00 00A4 1944          ble       WriteSPIFlashData_3
                    1945   ; num_bytes_to_write = (size > 256) ? 256 : size; // max 256 bytes per page
0000138E  0C86 0000 1946          cmp.l     #256,D6
00001392  0100      
00001394  6F08      1947          ble.s     WriteSPIFlashData_4
00001396  303C 0100 1948          move.w    #256,D0
0000139A  48C0      1949          ext.l     D0
0000139C  6002      1950          bra.s     WriteSPIFlashData_5
                    1951   WriteSPIFlashData_4:
0000139E  2006      1952          move.l    D6,D0
                    1953   WriteSPIFlashData_5:
000013A0  2600      1954          move.l    D0,D3
                    1955   ; SetSPIFlashWriteEnableLatch();
000013A2  4EB8 1168 1956          jsr       _SetSPIFlashWriteEnableLatch
                    1957   ; Enable_SPI_CS();
000013A6  13FC 00FE 1958          move.b    #254,4227112
000013AA  0040 8028 
                    1959   ; issue_page_program = WriteSPIChar(0x02); // write the page program command
000013AE  4878 0002 1960          pea       2
000013B2  4E92      1961          jsr       (A2)
000013B4  584F      1962          addq.w    #4,A7
000013B6  2400      1963          move.l    D0,D2
                    1964   ; issue_page_program = WriteSPIChar((FlashAddress >> 16) & 0x000000FF); // write upper 8 bits of address
000013B8  2205      1965          move.l    D5,D1
000013BA  E081      1966          asr.l     #8,D1
000013BC  E081      1967          asr.l     #8,D1
000013BE  C2BC 0000 1968          and.l     #255,D1
000013C2  00FF      
000013C4  2F01      1969          move.l    D1,-(A7)
000013C6  4E92      1970          jsr       (A2)
000013C8  584F      1971          addq.w    #4,A7
000013CA  2400      1972          move.l    D0,D2
                    1973   ; issue_page_program = WriteSPIChar((FlashAddress >> 8) & 0x000000FF); // write middle 8 bits of address
000013CC  2205      1974          move.l    D5,D1
000013CE  E081      1975          asr.l     #8,D1
000013D0  C2BC 0000 1976          and.l     #255,D1
000013D4  00FF      
000013D6  2F01      1977          move.l    D1,-(A7)
000013D8  4E92      1978          jsr       (A2)
000013DA  584F      1979          addq.w    #4,A7
000013DC  2400      1980          move.l    D0,D2
                    1981   ; issue_page_program = WriteSPIChar(FlashAddress & 0x000000FF); // write lower 8 bits of address
000013DE  2205      1982          move.l    D5,D1
000013E0  C2BC 0000 1983          and.l     #255,D1
000013E4  00FF      
000013E6  2F01      1984          move.l    D1,-(A7)
000013E8  4E92      1985          jsr       (A2)
000013EA  584F      1986          addq.w    #4,A7
000013EC  2400      1987          move.l    D0,D2
                    1988   ; for (i = 0; i < num_bytes_to_write; i++){
000013EE  4284      1989          clr.l     D4
                    1990   WriteSPIFlashData_6:
000013F0  B883      1991          cmp.l     D3,D4
000013F2  6C20      1992          bge.s     WriteSPIFlashData_8
                    1993   ; mem_data = MemoryAddress[i];
000013F4  206E 000C 1994          move.l    12(A6),A0
000013F8  1030 4800 1995          move.b    0(A0,D4.L),D0
000013FC  C0BC 0000 1996          and.l     #255,D0
00001400  00FF      
00001402  2D40 FFFC 1997          move.l    D0,-4(A6)
                    1998   ; issue_page_program = WriteSPIChar(mem_data); // write data from memory buffer in one byte chunks
00001406  2F2E FFFC 1999          move.l    -4(A6),-(A7)
0000140A  4E92      2000          jsr       (A2)
0000140C  584F      2001          addq.w    #4,A7
0000140E  2400      2002          move.l    D0,D2
00001410  5284      2003          addq.l    #1,D4
00001412  60DC      2004          bra       WriteSPIFlashData_6
                    2005   WriteSPIFlashData_8:
                    2006   ; }
                    2007   ; Disable_SPI_CS();
00001414  13FC 00FF 2008          move.b    #255,4227112
00001418  0040 8028 
                    2009   ; WaitForSPIFlashWriteCompletion(); // wait until write is completed (polling for completion)
0000141C  4EB8 11DE 2010          jsr       _WaitForSPIFlashWriteCompletion
                    2011   ; FlashAddress += num_bytes_to_write;
00001420  DA83      2012          add.l     D3,D5
                    2013   ; MemoryAddress += num_bytes_to_write;
00001422  D7AE 000C 2014          add.l     D3,12(A6)
                    2015   ; size -= num_bytes_to_write;
00001426  9C83      2016          sub.l     D3,D6
                    2017   ; ClearSPIFlashWriteEnableLatch();
00001428  4EB8 118E 2018          jsr       _ClearSPIFlashWriteEnableLatch
0000142C  6000 FF56 2019          bra       WriteSPIFlashData_1
                    2020   WriteSPIFlashData_3:
                    2021   ; }
                    2022   ; printf("\r\n********Flash Chip Programmed********");
00001430  4879 0000 2023          pea       @m68kde~2_25.L
00001434  40C8      
00001436  4EB9 0000 2024          jsr       _printf
0000143A  3532      
0000143C  584F      2025          addq.w    #4,A7
0000143E  4CDF 047C 2026          movem.l   (A7)+,D2/D3/D4/D5/D6/A2
00001442  4E5E      2027          unlk      A6
00001444  4E75      2028          rts
                    2029   ; }
                    2030   ; /*******************************************************************
                    2031   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    2032   ; ********************************************************************/
                    2033   ; void ProgramFlashChip(void)
                    2034   ; {
                    2035   _ProgramFlashChip:
00001446  48E7 3F20 2036          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000144A  45F9 0000 2037          lea       _printf.L,A2
0000144E  3532      
                    2038   ; //
                    2039   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    2040   ; // TODO : then verify by reading it back and comparing to memory
                    2041   ; //
                    2042   ; int read_data;
                    2043   ; unsigned char* mem_pointer;
                    2044   ; int flash_address;
                    2045   ; int i;
                    2046   ; int size;
                    2047   ; int success;
                    2048   ; mem_pointer = 0x08000000; // source
00001450  263C 0800 2049          move.l    #134217728,D3
00001454  0000      
                    2050   ; flash_address = 0x00000000; // destination
00001456  4284      2051          clr.l     D4
                    2052   ; success = 1;
00001458  7E01      2053          moveq     #1,D7
                    2054   ; size = 262144; //256k
0000145A  2C3C 0004 2055          move.l    #262144,D6
0000145E  0000      
                    2056   ; EraseSPIFlashChip();
00001460  4EB8 1314 2057          jsr       _EraseSPIFlashChip
                    2058   ; // before writeSPIFlashData: flash_address (pass by value) = 0x00000000; custom (pass by reference), size
                    2059   ; WriteSPIFlashData(flash_address, mem_pointer, size);
00001464  2F06      2060          move.l    D6,-(A7)
00001466  2F03      2061          move.l    D3,-(A7)
00001468  2F04      2062          move.l    D4,-(A7)
0000146A  4EB8 1362 2063          jsr       _WriteSPIFlashData
0000146E  DEFC 000C 2064          add.w     #12,A7
                    2065   ; // after: flash_address unchanged, custom is changed by num_bytes_written, size unchanged since pass by value
                    2066   ; printf("\r\nVerifying the read....");
00001472  4879 0000 2067          pea       @m68kde~2_26.L
00001476  40F0      
00001478  4E92      2068          jsr       (A2)
0000147A  584F      2069          addq.w    #4,A7
                    2070   ; for(i = flash_address; i < flash_address + size; i++){
0000147C  2404      2071          move.l    D4,D2
                    2072   ProgramFlashChip_1:
0000147E  2004      2073          move.l    D4,D0
00001480  D086      2074          add.l     D6,D0
00001482  B480      2075          cmp.l     D0,D2
00001484  6C00 0040 2076          bge       ProgramFlashChip_3
                    2077   ; read_data = ReadSPIFlashByte(i);
00001488  2F02      2078          move.l    D2,-(A7)
0000148A  4EB8 1224 2079          jsr       _ReadSPIFlashByte
0000148E  584F      2080          addq.w    #4,A7
00001490  2A00      2081          move.l    D0,D5
                    2082   ; if(read_data != *(mem_pointer)){
00001492  2043      2083          move.l    D3,A0
00001494  1010      2084          move.b    (A0),D0
00001496  C0BC 0000 2085          and.l     #255,D0
0000149A  00FF      
0000149C  BA80      2086          cmp.l     D0,D5
0000149E  6720      2087          beq.s     ProgramFlashChip_4
                    2088   ; printf("\r\nError: Data mismatch at location %08x. Expected data = %02x; Actual Data %02x", i, *(mem_pointer), read_data);
000014A0  2F05      2089          move.l    D5,-(A7)
000014A2  2043      2090          move.l    D3,A0
000014A4  1210      2091          move.b    (A0),D1
000014A6  C2BC 0000 2092          and.l     #255,D1
000014AA  00FF      
000014AC  2F01      2093          move.l    D1,-(A7)
000014AE  2F02      2094          move.l    D2,-(A7)
000014B0  4879 0000 2095          pea       @m68kde~2_27.L
000014B4  410A      
000014B6  4E92      2096          jsr       (A2)
000014B8  DEFC 0010 2097          add.w     #16,A7
                    2098   ; success = 0;
000014BC  7E00      2099          moveq     #0,D7
                    2100   ; break;
000014BE  6006      2101          bra.s     ProgramFlashChip_3
                    2102   ProgramFlashChip_4:
                    2103   ; }
                    2104   ; mem_pointer += 1;
000014C0  5283      2105          addq.l    #1,D3
000014C2  5282      2106          addq.l    #1,D2
000014C4  60B8      2107          bra       ProgramFlashChip_1
                    2108   ProgramFlashChip_3:
                    2109   ; }
                    2110   ; if(success){
000014C6  4A87      2111          tst.l     D7
000014C8  670A      2112          beq.s     ProgramFlashChip_6
                    2113   ; printf("\r\n********Writing Completed********");
000014CA  4879 0000 2114          pea       @m68kde~2_28.L
000014CE  415A      
000014D0  4E92      2115          jsr       (A2)
000014D2  584F      2116          addq.w    #4,A7
                    2117   ProgramFlashChip_6:
000014D4  4CDF 04FC 2118          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
000014D8  4E75      2119          rts
                    2120   ; }
                    2121   ; }
                    2122   ; /*************************************************************************
                    2123   ; ** Load a program from SPI Flash Chip and copy to Dram
                    2124   ; **************************************************************************/
                    2125   ; void LoadFromFlashChip(void)
                    2126   ; {
                    2127   _LoadFromFlashChip:
000014DA  4E56 FFF0 2128          link      A6,#-16
                    2129   ; unsigned char* mem_pointer;
                    2130   ; int flash_address;
                    2131   ; int size;
                    2132   ; int i;
                    2133   ; mem_pointer = 0x08000000; // destination
000014DE  2D7C 0800 2134          move.l    #134217728,-16(A6)
000014E2  0000 FFF0 
                    2135   ; flash_address = 0x00000000; // source
000014E6  42AE FFF4 2136          clr.l     -12(A6)
                    2137   ; size = 262144;
000014EA  2D7C 0004 2138          move.l    #262144,-8(A6)
000014EE  0000 FFF8 
                    2139   ; //printf("\r\nEnter the size of data to write to RAM: ");
                    2140   ; //size = Get6HexDigits(0);
                    2141   ; printf("\r\nLoading Program From Flash....") ;
000014F2  4879 0000 2142          pea       @m68kde~2_29.L
000014F6  417E      
000014F8  4EB9 0000 2143          jsr       _printf
000014FC  3532      
000014FE  584F      2144          addq.w    #4,A7
                    2145   ; //
                    2146   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2147   ; //
                    2148   ; ReadSPIFlashData(flash_address, mem_pointer, size);
00001500  2F2E FFF8 2149          move.l    -8(A6),-(A7)
00001504  2F2E FFF0 2150          move.l    -16(A6),-(A7)
00001508  2F2E FFF4 2151          move.l    -12(A6),-(A7)
0000150C  4EB8 1294 2152          jsr       _ReadSPIFlashData
00001510  DEFC 000C 2153          add.w     #12,A7
                    2154   ; printf("\r\n********Program loaded to RAM********") ;
00001514  4879 0000 2155          pea       @m68kde~2_30.L
00001518  41A0      
0000151A  4EB9 0000 2156          jsr       _printf
0000151E  3532      
00001520  584F      2157          addq.w    #4,A7
00001522  4E5E      2158          unlk      A6
00001524  4E75      2159          rts
                    2160   ; }
                    2161   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2162   ; // IMPORTANT
                    2163   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2164   ; // has to be done with an interrupt (IRQ Level 6)
                    2165   ; //
                    2166   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2167   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2168   ; //
                    2169   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2170   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2171   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2172   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2173   ; // program area
                    2174   ; //
                    2175   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2176   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2177   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2178   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2179   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2180   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2181   ; void DumpRegisters()
                    2182   ; {
                    2183   _DumpRegisters:
00001526  48E7 3F3C 2184          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000152A  45F9 0000 2185          lea       _putch.L,A2
0000152E  344E      
00001530  47F9 0000 2186          lea       _printf.L,A3
00001534  3532      
00001536  49F9 0B00 2187          lea       _SR.L,A4
0000153A  012C      
0000153C  4BF9 0B00 2188          lea       _WatchPointString.L,A5
00001540  01C2      
                    2189   ; short i, x, j, k ;
                    2190   ; unsigned char c, *BytePointer;
                    2191   ; // buld up strings for displaying watchpoints
                    2192   ; for(x = 0; x < (short)(8); x++)
00001542  4242      2193          clr.w     D2
                    2194   DumpRegisters_1:
00001544  0C42 0008 2195          cmp.w     #8,D2
00001548  6C00 01C6 2196          bge       DumpRegisters_3
                    2197   ; {
                    2198   ; if(WatchPointSetOrCleared[x] == 1)
0000154C  48C2      2199          ext.l     D2
0000154E  2002      2200          move.l    D2,D0
00001550  E588      2201          lsl.l     #2,D0
00001552  41F9 0B00 2202          lea       _WatchPointSetOrCleared.L,A0
00001556  01A2      
00001558  2030 0800 2203          move.l    0(A0,D0.L),D0
0000155C  0C80 0000 2204          cmp.l     #1,D0
00001560  0001      
00001562  6600 0186 2205          bne       DumpRegisters_4
                    2206   ; {
                    2207   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001566  48C2      2208          ext.l     D2
00001568  2202      2209          move.l    D2,D1
0000156A  E589      2210          lsl.l     #2,D1
0000156C  41F9 0B00 2211          lea       _WatchPointAddress.L,A0
00001570  0182      
00001572  2F30 1800 2212          move.l    0(A0,D1.L),-(A7)
00001576  4879 0000 2213          pea       @m68kde~2_31.L
0000157A  41C8      
0000157C  220D      2214          move.l    A5,D1
0000157E  48C2      2215          ext.l     D2
00001580  2F00      2216          move.l    D0,-(A7)
00001582  2002      2217          move.l    D2,D0
00001584  C1FC 0064 2218          muls      #100,D0
00001588  D280      2219          add.l     D0,D1
0000158A  201F      2220          move.l    (A7)+,D0
0000158C  2F01      2221          move.l    D1,-(A7)
0000158E  4EB9 0000 2222          jsr       _sprintf
00001592  34CE      
00001594  DEFC 000C 2223          add.w     #12,A7
                    2224   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001598  48C2      2225          ext.l     D2
0000159A  2002      2226          move.l    D2,D0
0000159C  E588      2227          lsl.l     #2,D0
0000159E  41F9 0B00 2228          lea       _WatchPointAddress.L,A0
000015A2  0182      
000015A4  2A30 0800 2229          move.l    0(A0,D0.L),D5
                    2230   ; for(j = 0; j < (short)(16); j+=2)
000015A8  4243      2231          clr.w     D3
                    2232   DumpRegisters_6:
000015AA  0C43 0010 2233          cmp.w     #16,D3
000015AE  6C00 0082 2234          bge       DumpRegisters_8
                    2235   ; {
                    2236   ; for(k = 0; k < (short)(2); k++)
000015B2  4246      2237          clr.w     D6
                    2238   DumpRegisters_9:
000015B4  0C46 0002 2239          cmp.w     #2,D6
000015B8  6C00 0052 2240          bge       DumpRegisters_11
                    2241   ; {
                    2242   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000015BC  2045      2243          move.l    D5,A0
000015BE  48C3      2244          ext.l     D3
000015C0  2203      2245          move.l    D3,D1
000015C2  48C6      2246          ext.l     D6
000015C4  D286      2247          add.l     D6,D1
000015C6  1230 1800 2248          move.b    0(A0,D1.L),D1
000015CA  C2BC 0000 2249          and.l     #255,D1
000015CE  00FF      
000015D0  2F01      2250          move.l    D1,-(A7)
000015D2  4879 0000 2251          pea       @m68kde~2_8.L
000015D6  3EBC      
000015D8  4879 0B00 2252          pea       _TempString.L
000015DC  04E2      
000015DE  4EB9 0000 2253          jsr       _sprintf
000015E2  34CE      
000015E4  DEFC 000C 2254          add.w     #12,A7
                    2255   ; strcat(WatchPointString[x], TempString) ;
000015E8  4879 0B00 2256          pea       _TempString.L
000015EC  04E2      
000015EE  220D      2257          move.l    A5,D1
000015F0  48C2      2258          ext.l     D2
000015F2  2F00      2259          move.l    D0,-(A7)
000015F4  2002      2260          move.l    D2,D0
000015F6  C1FC 0064 2261          muls      #100,D0
000015FA  D280      2262          add.l     D0,D1
000015FC  201F      2263          move.l    (A7)+,D0
000015FE  2F01      2264          move.l    D1,-(A7)
00001600  4EB9 0000 2265          jsr       _strcat
00001604  3500      
00001606  504F      2266          addq.w    #8,A7
00001608  5246      2267          addq.w    #1,D6
0000160A  60A8      2268          bra       DumpRegisters_9
                    2269   DumpRegisters_11:
                    2270   ; }
                    2271   ; strcat(WatchPointString[x]," ") ;
0000160C  4879 0000 2272          pea       @m68kde~2_32.L
00001610  41D0      
00001612  220D      2273          move.l    A5,D1
00001614  48C2      2274          ext.l     D2
00001616  2F00      2275          move.l    D0,-(A7)
00001618  2002      2276          move.l    D2,D0
0000161A  C1FC 0064 2277          muls      #100,D0
0000161E  D280      2278          add.l     D0,D1
00001620  201F      2279          move.l    (A7)+,D0
00001622  2F01      2280          move.l    D1,-(A7)
00001624  4EB9 0000 2281          jsr       _strcat
00001628  3500      
0000162A  504F      2282          addq.w    #8,A7
0000162C  5443      2283          addq.w    #2,D3
0000162E  6000 FF7A 2284          bra       DumpRegisters_6
                    2285   DumpRegisters_8:
                    2286   ; }
                    2287   ; strcat(WatchPointString[x], "  ") ;
00001632  4879 0000 2288          pea       @m68kde~2_9.L
00001636  3EC2      
00001638  220D      2289          move.l    A5,D1
0000163A  48C2      2290          ext.l     D2
0000163C  2F00      2291          move.l    D0,-(A7)
0000163E  2002      2292          move.l    D2,D0
00001640  C1FC 0064 2293          muls      #100,D0
00001644  D280      2294          add.l     D0,D1
00001646  201F      2295          move.l    (A7)+,D0
00001648  2F01      2296          move.l    D1,-(A7)
0000164A  4EB9 0000 2297          jsr       _strcat
0000164E  3500      
00001650  504F      2298          addq.w    #8,A7
                    2299   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001652  48C2      2300          ext.l     D2
00001654  2002      2301          move.l    D2,D0
00001656  E588      2302          lsl.l     #2,D0
00001658  41F9 0B00 2303          lea       _WatchPointAddress.L,A0
0000165C  0182      
0000165E  2A30 0800 2304          move.l    0(A0,D0.L),D5
                    2305   ; for(j = 0; j < (short)(16); j++)
00001662  4243      2306          clr.w     D3
                    2307   DumpRegisters_12:
00001664  0C43 0010 2308          cmp.w     #16,D3
00001668  6C00 007E 2309          bge       DumpRegisters_14
                    2310   ; {
                    2311   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000166C  2045      2312          move.l    D5,A0
0000166E  48C3      2313          ext.l     D3
00001670  1030 3800 2314          move.b    0(A0,D3.L),D0
00001674  C03C 007F 2315          and.b     #127,D0
00001678  1E00      2316          move.b    D0,D7
                    2317   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000167A  0C07 007F 2318          cmp.b     #127,D7
0000167E  6206      2319          bhi.s     DumpRegisters_17
00001680  0C07 0020 2320          cmp.b     #32,D7
00001684  6416      2321          bhs.s     DumpRegisters_15
                    2322   DumpRegisters_17:
                    2323   ; sprintf(TempString, ".") ;
00001686  4879 0000 2324          pea       @m68kde~2_33.L
0000168A  41D2      
0000168C  4879 0B00 2325          pea       _TempString.L
00001690  04E2      
00001692  4EB9 0000 2326          jsr       _sprintf
00001696  34CE      
00001698  504F      2327          addq.w    #8,A7
0000169A  6026      2328          bra.s     DumpRegisters_16
                    2329   DumpRegisters_15:
                    2330   ; else
                    2331   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000169C  2045      2332          move.l    D5,A0
0000169E  48C3      2333          ext.l     D3
000016A0  1230 3800 2334          move.b    0(A0,D3.L),D1
000016A4  C2BC 0000 2335          and.l     #255,D1
000016A8  00FF      
000016AA  2F01      2336          move.l    D1,-(A7)
000016AC  4879 0000 2337          pea       @m68kde~2_34.L
000016B0  41D4      
000016B2  4879 0B00 2338          pea       _TempString.L
000016B6  04E2      
000016B8  4EB9 0000 2339          jsr       _sprintf
000016BC  34CE      
000016BE  DEFC 000C 2340          add.w     #12,A7
                    2341   DumpRegisters_16:
                    2342   ; strcat(WatchPointString[x], TempString) ;
000016C2  4879 0B00 2343          pea       _TempString.L
000016C6  04E2      
000016C8  220D      2344          move.l    A5,D1
000016CA  48C2      2345          ext.l     D2
000016CC  2F00      2346          move.l    D0,-(A7)
000016CE  2002      2347          move.l    D2,D0
000016D0  C1FC 0064 2348          muls      #100,D0
000016D4  D280      2349          add.l     D0,D1
000016D6  201F      2350          move.l    (A7)+,D0
000016D8  2F01      2351          move.l    D1,-(A7)
000016DA  4EB9 0000 2352          jsr       _strcat
000016DE  3500      
000016E0  504F      2353          addq.w    #8,A7
000016E2  5243      2354          addq.w    #1,D3
000016E4  6000 FF7E 2355          bra       DumpRegisters_12
                    2356   DumpRegisters_14:
000016E8  6020      2357          bra.s     DumpRegisters_5
                    2358   DumpRegisters_4:
                    2359   ; }
                    2360   ; }
                    2361   ; else
                    2362   ; strcpy(WatchPointString[x], "") ;
000016EA  4879 0000 2363          pea       @m68kde~2_35.L
000016EE  41D8      
000016F0  220D      2364          move.l    A5,D1
000016F2  48C2      2365          ext.l     D2
000016F4  2F00      2366          move.l    D0,-(A7)
000016F6  2002      2367          move.l    D2,D0
000016F8  C1FC 0064 2368          muls      #100,D0
000016FC  D280      2369          add.l     D0,D1
000016FE  201F      2370          move.l    (A7)+,D0
00001700  2F01      2371          move.l    D1,-(A7)
00001702  4EB9 0000 2372          jsr       _strcpy
00001706  3360      
00001708  504F      2373          addq.w    #8,A7
                    2374   DumpRegisters_5:
0000170A  5242      2375          addq.w    #1,D2
0000170C  6000 FE36 2376          bra       DumpRegisters_1
                    2377   DumpRegisters_3:
                    2378   ; }
                    2379   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001710  2F39 0B00 2380          move.l    _a0.L,-(A7)
00001714  0104      
00001716  2F39 0B00 2381          move.l    _d0.L,-(A7)
0000171A  00E4      
0000171C  4879 0000 2382          pea       @m68kde~2_36.L
00001720  41DA      
00001722  4E93      2383          jsr       (A3)
00001724  DEFC 000C 2384          add.w     #12,A7
                    2385   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001728  2F39 0B00 2386          move.l    _a1.L,-(A7)
0000172C  0108      
0000172E  2F39 0B00 2387          move.l    _d1.L,-(A7)
00001732  00E8      
00001734  4879 0000 2388          pea       @m68kde~2_37.L
00001738  41F6      
0000173A  4E93      2389          jsr       (A3)
0000173C  DEFC 000C 2390          add.w     #12,A7
                    2391   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001740  2F39 0B00 2392          move.l    _a2.L,-(A7)
00001744  010C      
00001746  2F39 0B00 2393          move.l    _d2.L,-(A7)
0000174A  00EC      
0000174C  4879 0000 2394          pea       @m68kde~2_38.L
00001750  4210      
00001752  4E93      2395          jsr       (A3)
00001754  DEFC 000C 2396          add.w     #12,A7
                    2397   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001758  2F39 0B00 2398          move.l    _a3.L,-(A7)
0000175C  0110      
0000175E  2F39 0B00 2399          move.l    _d3.L,-(A7)
00001762  00F0      
00001764  4879 0000 2400          pea       @m68kde~2_39.L
00001768  422A      
0000176A  4E93      2401          jsr       (A3)
0000176C  DEFC 000C 2402          add.w     #12,A7
                    2403   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001770  2F39 0B00 2404          move.l    _a4.L,-(A7)
00001774  0114      
00001776  2F39 0B00 2405          move.l    _d4.L,-(A7)
0000177A  00F4      
0000177C  4879 0000 2406          pea       @m68kde~2_40.L
00001780  4244      
00001782  4E93      2407          jsr       (A3)
00001784  DEFC 000C 2408          add.w     #12,A7
                    2409   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001788  2F39 0B00 2410          move.l    _a5.L,-(A7)
0000178C  0118      
0000178E  2F39 0B00 2411          move.l    _d5.L,-(A7)
00001792  00F8      
00001794  4879 0000 2412          pea       @m68kde~2_41.L
00001798  425E      
0000179A  4E93      2413          jsr       (A3)
0000179C  DEFC 000C 2414          add.w     #12,A7
                    2415   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000017A0  2F39 0B00 2416          move.l    _a6.L,-(A7)
000017A4  011C      
000017A6  2F39 0B00 2417          move.l    _d6.L,-(A7)
000017AA  00FC      
000017AC  4879 0000 2418          pea       @m68kde~2_42.L
000017B0  4278      
000017B2  4E93      2419          jsr       (A3)
000017B4  DEFC 000C 2420          add.w     #12,A7
                    2421   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000017B8  3214      2422          move.w    (A4),D1
000017BA  C27C 2000 2423          and.w     #8192,D1
000017BE  0C41 2000 2424          cmp.w     #8192,D1
000017C2  6608      2425          bne.s     DumpRegisters_18
000017C4  2239 0B00 2426          move.l    _SSP.L,D1
000017C8  0124      
000017CA  6006      2427          bra.s     DumpRegisters_19
                    2428   DumpRegisters_18:
000017CC  2239 0B00 2429          move.l    _USP.L,D1
000017D0  0128      
                    2430   DumpRegisters_19:
000017D2  2F01      2431          move.l    D1,-(A7)
000017D4  2F39 0B00 2432          move.l    _d7.L,-(A7)
000017D8  0100      
000017DA  4879 0000 2433          pea       @m68kde~2_43.L
000017DE  4292      
000017E0  4E93      2434          jsr       (A3)
000017E2  DEFC 000C 2435          add.w     #12,A7
                    2436   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000017E6  2F39 0B00 2437          move.l    _USP.L,-(A7)
000017EA  0128      
000017EC  4879 0000 2438          pea       @m68kde~2_44.L
000017F0  42AC      
000017F2  4E93      2439          jsr       (A3)
000017F4  504F      2440          addq.w    #8,A7
                    2441   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000017F6  2F39 0B00 2442          move.l    _SSP.L,-(A7)
000017FA  0124      
000017FC  4879 0000 2443          pea       @m68kde~2_45.L
00001800  42CA      
00001802  4E93      2444          jsr       (A3)
00001804  504F      2445          addq.w    #8,A7
                    2446   ; printf("\r\n SR = $%04X   ",SR) ;
00001806  3214      2447          move.w    (A4),D1
00001808  C2BC 0000 2448          and.l     #65535,D1
0000180C  FFFF      
0000180E  2F01      2449          move.l    D1,-(A7)
00001810  4879 0000 2450          pea       @m68kde~2_46.L
00001814  42EC      
00001816  4E93      2451          jsr       (A3)
00001818  504F      2452          addq.w    #8,A7
                    2453   ; // display the status word in characters etc.
                    2454   ; printf("   [") ;
0000181A  4879 0000 2455          pea       @m68kde~2_47.L
0000181E  42FE      
00001820  4E93      2456          jsr       (A3)
00001822  584F      2457          addq.w    #4,A7
                    2458   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001824  3014      2459          move.w    (A4),D0
00001826  C07C 8000 2460          and.w     #32768,D0
0000182A  0C40 8000 2461          cmp.w     #32768,D0
0000182E  660A      2462          bne.s     DumpRegisters_20
00001830  4878 0054 2463          pea       84
00001834  4E92      2464          jsr       (A2)
00001836  584F      2465          addq.w    #4,A7
00001838  6008      2466          bra.s     DumpRegisters_21
                    2467   DumpRegisters_20:
0000183A  4878 002D 2468          pea       45
0000183E  4E92      2469          jsr       (A2)
00001840  584F      2470          addq.w    #4,A7
                    2471   DumpRegisters_21:
                    2472   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001842  3014      2473          move.w    (A4),D0
00001844  C07C 2000 2474          and.w     #8192,D0
00001848  0C40 2000 2475          cmp.w     #8192,D0
0000184C  660A      2476          bne.s     DumpRegisters_22
0000184E  4878 0053 2477          pea       83
00001852  4E92      2478          jsr       (A2)
00001854  584F      2479          addq.w    #4,A7
00001856  6008      2480          bra.s     DumpRegisters_23
                    2481   DumpRegisters_22:
00001858  4878 0055 2482          pea       85
0000185C  4E92      2483          jsr       (A2)
0000185E  584F      2484          addq.w    #4,A7
                    2485   DumpRegisters_23:
                    2486   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001860  3014      2487          move.w    (A4),D0
00001862  C07C 0400 2488          and.w     #1024,D0
00001866  0C40 0400 2489          cmp.w     #1024,D0
0000186A  660A      2490          bne.s     DumpRegisters_24
0000186C  4878 0031 2491          pea       49
00001870  4E92      2492          jsr       (A2)
00001872  584F      2493          addq.w    #4,A7
00001874  6008      2494          bra.s     DumpRegisters_25
                    2495   DumpRegisters_24:
00001876  4878 0030 2496          pea       48
0000187A  4E92      2497          jsr       (A2)
0000187C  584F      2498          addq.w    #4,A7
                    2499   DumpRegisters_25:
                    2500   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000187E  3014      2501          move.w    (A4),D0
00001880  C07C 0200 2502          and.w     #512,D0
00001884  0C40 0200 2503          cmp.w     #512,D0
00001888  660A      2504          bne.s     DumpRegisters_26
0000188A  4878 0031 2505          pea       49
0000188E  4E92      2506          jsr       (A2)
00001890  584F      2507          addq.w    #4,A7
00001892  6008      2508          bra.s     DumpRegisters_27
                    2509   DumpRegisters_26:
00001894  4878 0030 2510          pea       48
00001898  4E92      2511          jsr       (A2)
0000189A  584F      2512          addq.w    #4,A7
                    2513   DumpRegisters_27:
                    2514   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000189C  3014      2515          move.w    (A4),D0
0000189E  C07C 0100 2516          and.w     #256,D0
000018A2  0C40 0100 2517          cmp.w     #256,D0
000018A6  660A      2518          bne.s     DumpRegisters_28
000018A8  4878 0031 2519          pea       49
000018AC  4E92      2520          jsr       (A2)
000018AE  584F      2521          addq.w    #4,A7
000018B0  6008      2522          bra.s     DumpRegisters_29
                    2523   DumpRegisters_28:
000018B2  4878 0030 2524          pea       48
000018B6  4E92      2525          jsr       (A2)
000018B8  584F      2526          addq.w    #4,A7
                    2527   DumpRegisters_29:
                    2528   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000018BA  3014      2529          move.w    (A4),D0
000018BC  C07C 0010 2530          and.w     #16,D0
000018C0  0C40 0010 2531          cmp.w     #16,D0
000018C4  660A      2532          bne.s     DumpRegisters_30
000018C6  4878 0058 2533          pea       88
000018CA  4E92      2534          jsr       (A2)
000018CC  584F      2535          addq.w    #4,A7
000018CE  6008      2536          bra.s     DumpRegisters_31
                    2537   DumpRegisters_30:
000018D0  4878 002D 2538          pea       45
000018D4  4E92      2539          jsr       (A2)
000018D6  584F      2540          addq.w    #4,A7
                    2541   DumpRegisters_31:
                    2542   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000018D8  3014      2543          move.w    (A4),D0
000018DA  C07C 0008 2544          and.w     #8,D0
000018DE  0C40 0008 2545          cmp.w     #8,D0
000018E2  660A      2546          bne.s     DumpRegisters_32
000018E4  4878 004E 2547          pea       78
000018E8  4E92      2548          jsr       (A2)
000018EA  584F      2549          addq.w    #4,A7
000018EC  6008      2550          bra.s     DumpRegisters_33
                    2551   DumpRegisters_32:
000018EE  4878 002D 2552          pea       45
000018F2  4E92      2553          jsr       (A2)
000018F4  584F      2554          addq.w    #4,A7
                    2555   DumpRegisters_33:
                    2556   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000018F6  3014      2557          move.w    (A4),D0
000018F8  C07C 0004 2558          and.w     #4,D0
000018FC  0C40 0004 2559          cmp.w     #4,D0
00001900  660A      2560          bne.s     DumpRegisters_34
00001902  4878 005A 2561          pea       90
00001906  4E92      2562          jsr       (A2)
00001908  584F      2563          addq.w    #4,A7
0000190A  6008      2564          bra.s     DumpRegisters_35
                    2565   DumpRegisters_34:
0000190C  4878 002D 2566          pea       45
00001910  4E92      2567          jsr       (A2)
00001912  584F      2568          addq.w    #4,A7
                    2569   DumpRegisters_35:
                    2570   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001914  3014      2571          move.w    (A4),D0
00001916  C07C 0002 2572          and.w     #2,D0
0000191A  0C40 0002 2573          cmp.w     #2,D0
0000191E  660A      2574          bne.s     DumpRegisters_36
00001920  4878 0056 2575          pea       86
00001924  4E92      2576          jsr       (A2)
00001926  584F      2577          addq.w    #4,A7
00001928  6008      2578          bra.s     DumpRegisters_37
                    2579   DumpRegisters_36:
0000192A  4878 002D 2580          pea       45
0000192E  4E92      2581          jsr       (A2)
00001930  584F      2582          addq.w    #4,A7
                    2583   DumpRegisters_37:
                    2584   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001932  3014      2585          move.w    (A4),D0
00001934  C07C 0001 2586          and.w     #1,D0
00001938  0C40 0001 2587          cmp.w     #1,D0
0000193C  660A      2588          bne.s     DumpRegisters_38
0000193E  4878 0043 2589          pea       67
00001942  4E92      2590          jsr       (A2)
00001944  584F      2591          addq.w    #4,A7
00001946  6008      2592          bra.s     DumpRegisters_39
                    2593   DumpRegisters_38:
00001948  4878 002D 2594          pea       45
0000194C  4E92      2595          jsr       (A2)
0000194E  584F      2596          addq.w    #4,A7
                    2597   DumpRegisters_39:
                    2598   ; putchar(']') ;
00001950  4878 005D 2599          pea       93
00001954  4E92      2600          jsr       (A2)
00001956  584F      2601          addq.w    #4,A7
                    2602   ; printf("\r\n PC = $%08X  ", PC) ;
00001958  2F39 0B00 2603          move.l    _PC.L,-(A7)
0000195C  0120      
0000195E  4879 0000 2604          pea       @m68kde~2_48.L
00001962  4304      
00001964  4E93      2605          jsr       (A3)
00001966  504F      2606          addq.w    #8,A7
                    2607   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001968  2039 0B00 2608          move.l    _PC.L,D0
0000196C  0120      
0000196E  2040      2609          move.l    D0,A0
00001970  3010      2610          move.w    (A0),D0
00001972  0C40 4E4E 2611          cmp.w     #20046,D0
00001976  660A      2612          bne.s     DumpRegisters_40
                    2613   ; printf("[@ BREAKPOINT]") ;
00001978  4879 0000 2614          pea       @m68kde~2_49.L
0000197C  4314      
0000197E  4E93      2615          jsr       (A3)
00001980  584F      2616          addq.w    #4,A7
                    2617   DumpRegisters_40:
                    2618   ; printf("\r\n") ;
00001982  4879 0000 2619          pea       @m68kde~2_1.L
00001986  3E44      
00001988  4E93      2620          jsr       (A3)
0000198A  584F      2621          addq.w    #4,A7
                    2622   ; for(i=0; i < 8; i++)    {
0000198C  4244      2623          clr.w     D4
                    2624   DumpRegisters_42:
0000198E  0C44 0008 2625          cmp.w     #8,D4
00001992  6C00 0040 2626          bge       DumpRegisters_44
                    2627   ; if(WatchPointSetOrCleared[i] == 1)
00001996  48C4      2628          ext.l     D4
00001998  2004      2629          move.l    D4,D0
0000199A  E588      2630          lsl.l     #2,D0
0000199C  41F9 0B00 2631          lea       _WatchPointSetOrCleared.L,A0
000019A0  01A2      
000019A2  2030 0800 2632          move.l    0(A0,D0.L),D0
000019A6  0C80 0000 2633          cmp.l     #1,D0
000019AA  0001      
000019AC  6622      2634          bne.s     DumpRegisters_45
                    2635   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
000019AE  220D      2636          move.l    A5,D1
000019B0  48C4      2637          ext.l     D4
000019B2  2F00      2638          move.l    D0,-(A7)
000019B4  2004      2639          move.l    D4,D0
000019B6  C1FC 0064 2640          muls      #100,D0
000019BA  D280      2641          add.l     D0,D1
000019BC  201F      2642          move.l    (A7)+,D0
000019BE  2F01      2643          move.l    D1,-(A7)
000019C0  48C4      2644          ext.l     D4
000019C2  2F04      2645          move.l    D4,-(A7)
000019C4  4879 0000 2646          pea       @m68kde~2_50.L
000019C8  4324      
000019CA  4E93      2647          jsr       (A3)
000019CC  DEFC 000C 2648          add.w     #12,A7
                    2649   DumpRegisters_45:
000019D0  5244      2650          addq.w    #1,D4
000019D2  60BA      2651          bra       DumpRegisters_42
                    2652   DumpRegisters_44:
000019D4  4CDF 3CFC 2653          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000019D8  4E75      2654          rts
                    2655   ; }
                    2656   ; }
                    2657   ; // Trace Exception Handler
                    2658   ; void DumpRegistersandPause(void)
                    2659   ; {
                    2660   _DumpRegistersandPause:
000019DA  2F0A      2661          move.l    A2,-(A7)
000019DC  45F9 0000 2662          lea       _printf.L,A2
000019E0  3532      
                    2663   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000019E2  4879 0000 2664          pea       @m68kde~2_51.L
000019E6  4330      
000019E8  4E92      2665          jsr       (A2)
000019EA  584F      2666          addq.w    #4,A7
                    2667   ; printf("\r\nBreak Points :[Disabled]") ;
000019EC  4879 0000 2668          pea       @m68kde~2_52.L
000019F0  4350      
000019F2  4E92      2669          jsr       (A2)
000019F4  584F      2670          addq.w    #4,A7
                    2671   ; DumpRegisters() ;
000019F6  4EB8 1526 2672          jsr       _DumpRegisters
                    2673   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000019FA  4879 0000 2674          pea       @m68kde~2_53.L
000019FE  436C      
00001A00  4E92      2675          jsr       (A2)
00001A02  584F      2676          addq.w    #4,A7
                    2677   ; printf("\r\nPress <ESC> to Resume Program") ;
00001A04  4879 0000 2678          pea       @m68kde~2_54.L
00001A08  4398      
00001A0A  4E92      2679          jsr       (A2)
00001A0C  584F      2680          addq.w    #4,A7
                    2681   ; menu() ;
00001A0E  4EB9 0000 2682          jsr       _menu
00001A12  25BE      
00001A14  245F      2683          move.l    (A7)+,A2
00001A16  4E75      2684          rts
                    2685   ; }
                    2686   ; void ChangeRegisters(void)
                    2687   ; {
                    2688   _ChangeRegisters:
00001A18  4E56 FFFC 2689          link      A6,#-4
00001A1C  48E7 303C 2690          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001A20  45F9 0000 2691          lea       _printf.L,A2
00001A24  3532      
00001A26  47EE FFFC 2692          lea       -4(A6),A3
00001A2A  49F8 0CA4 2693          lea       _Get8HexDigits.L,A4
00001A2E  4BF8 0B68 2694          lea       __getch.L,A5
                    2695   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2696   ; int reg_val ;
                    2697   ; char c, reg[3] ;
                    2698   ; reg[0] = tolower(_getch()) ;
00001A32  2F00      2699          move.l    D0,-(A7)
00001A34  4E95      2700          jsr       (A5)
00001A36  2200      2701          move.l    D0,D1
00001A38  201F      2702          move.l    (A7)+,D0
00001A3A  2F01      2703          move.l    D1,-(A7)
00001A3C  4EB9 0000 2704          jsr       _tolower
00001A40  34B2      
00001A42  584F      2705          addq.w    #4,A7
00001A44  1680      2706          move.b    D0,(A3)
                    2707   ; reg[1] = c = tolower(_getch()) ;
00001A46  2F00      2708          move.l    D0,-(A7)
00001A48  4E95      2709          jsr       (A5)
00001A4A  2200      2710          move.l    D0,D1
00001A4C  201F      2711          move.l    (A7)+,D0
00001A4E  2F01      2712          move.l    D1,-(A7)
00001A50  4EB9 0000 2713          jsr       _tolower
00001A54  34B2      
00001A56  584F      2714          addq.w    #4,A7
00001A58  1400      2715          move.b    D0,D2
00001A5A  1740 0001 2716          move.b    D0,1(A3)
                    2717   ; if(reg[0] == (char)('d'))  {    // change data register
00001A5E  1013      2718          move.b    (A3),D0
00001A60  0C00 0064 2719          cmp.b     #100,D0
00001A64  6600 00AE 2720          bne       ChangeRegisters_1
                    2721   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001A68  102B 0001 2722          move.b    1(A3),D0
00001A6C  0C00 0037 2723          cmp.b     #55,D0
00001A70  6E0A      2724          bgt.s     ChangeRegisters_5
00001A72  102B 0001 2725          move.b    1(A3),D0
00001A76  0C00 0030 2726          cmp.b     #48,D0
00001A7A  6C0E      2727          bge.s     ChangeRegisters_3
                    2728   ChangeRegisters_5:
                    2729   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001A7C  4879 0000 2730          pea       @m68kde~2_55.L
00001A80  43B8      
00001A82  4E92      2731          jsr       (A2)
00001A84  584F      2732          addq.w    #4,A7
                    2733   ; return ;
00001A86  6000 0244 2734          bra       ChangeRegisters_6
                    2735   ChangeRegisters_3:
                    2736   ; }
                    2737   ; else {
                    2738   ; printf("\r\nD%c = ", c) ;
00001A8A  4882      2739          ext.w     D2
00001A8C  48C2      2740          ext.l     D2
00001A8E  2F02      2741          move.l    D2,-(A7)
00001A90  4879 0000 2742          pea       @m68kde~2_56.L
00001A94  43E4      
00001A96  4E92      2743          jsr       (A2)
00001A98  504F      2744          addq.w    #8,A7
                    2745   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A9A  42A7      2746          clr.l     -(A7)
00001A9C  4E94      2747          jsr       (A4)
00001A9E  584F      2748          addq.w    #4,A7
00001AA0  2600      2749          move.l    D0,D3
                    2750   ; }
                    2751   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2752   ; if(c == (char)('0'))
00001AA2  0C02 0030 2753          cmp.b     #48,D2
00001AA6  660A      2754          bne.s     ChangeRegisters_7
                    2755   ; d0 = reg_val ;
00001AA8  23C3 0B00 2756          move.l    D3,_d0.L
00001AAC  00E4      
00001AAE  6000 0060 2757          bra       ChangeRegisters_20
                    2758   ChangeRegisters_7:
                    2759   ; else if(c == (char)('1'))
00001AB2  0C02 0031 2760          cmp.b     #49,D2
00001AB6  660A      2761          bne.s     ChangeRegisters_9
                    2762   ; d1 = reg_val ;
00001AB8  23C3 0B00 2763          move.l    D3,_d1.L
00001ABC  00E8      
00001ABE  6000 0050 2764          bra       ChangeRegisters_20
                    2765   ChangeRegisters_9:
                    2766   ; else if(c == (char)('2'))
00001AC2  0C02 0032 2767          cmp.b     #50,D2
00001AC6  660A      2768          bne.s     ChangeRegisters_11
                    2769   ; d2 = reg_val ;
00001AC8  23C3 0B00 2770          move.l    D3,_d2.L
00001ACC  00EC      
00001ACE  6000 0040 2771          bra       ChangeRegisters_20
                    2772   ChangeRegisters_11:
                    2773   ; else if(c == (char)('3'))
00001AD2  0C02 0033 2774          cmp.b     #51,D2
00001AD6  6608      2775          bne.s     ChangeRegisters_13
                    2776   ; d3 = reg_val ;
00001AD8  23C3 0B00 2777          move.l    D3,_d3.L
00001ADC  00F0      
00001ADE  6030      2778          bra.s     ChangeRegisters_20
                    2779   ChangeRegisters_13:
                    2780   ; else if(c == (char)('4'))
00001AE0  0C02 0034 2781          cmp.b     #52,D2
00001AE4  6608      2782          bne.s     ChangeRegisters_15
                    2783   ; d4 = reg_val ;
00001AE6  23C3 0B00 2784          move.l    D3,_d4.L
00001AEA  00F4      
00001AEC  6022      2785          bra.s     ChangeRegisters_20
                    2786   ChangeRegisters_15:
                    2787   ; else if(c == (char)('5'))
00001AEE  0C02 0035 2788          cmp.b     #53,D2
00001AF2  6608      2789          bne.s     ChangeRegisters_17
                    2790   ; d5 = reg_val ;
00001AF4  23C3 0B00 2791          move.l    D3,_d5.L
00001AF8  00F8      
00001AFA  6014      2792          bra.s     ChangeRegisters_20
                    2793   ChangeRegisters_17:
                    2794   ; else if(c == (char)('6'))
00001AFC  0C02 0036 2795          cmp.b     #54,D2
00001B00  6608      2796          bne.s     ChangeRegisters_19
                    2797   ; d6 = reg_val ;
00001B02  23C3 0B00 2798          move.l    D3,_d6.L
00001B06  00FC      
00001B08  6006      2799          bra.s     ChangeRegisters_20
                    2800   ChangeRegisters_19:
                    2801   ; else
                    2802   ; d7 = reg_val ;
00001B0A  23C3 0B00 2803          move.l    D3,_d7.L
00001B0E  0100      
                    2804   ChangeRegisters_20:
00001B10  6000 01B6 2805          bra       ChangeRegisters_51
                    2806   ChangeRegisters_1:
                    2807   ; }
                    2808   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001B14  1013      2809          move.b    (A3),D0
00001B16  0C00 0061 2810          cmp.b     #97,D0
00001B1A  6600 00A6 2811          bne       ChangeRegisters_21
                    2812   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001B1E  0C02 0037 2813          cmp.b     #55,D2
00001B22  6E06      2814          bgt.s     ChangeRegisters_25
00001B24  0C02 0030 2815          cmp.b     #48,D2
00001B28  6C0E      2816          bge.s     ChangeRegisters_23
                    2817   ChangeRegisters_25:
                    2818   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001B2A  4879 0000 2819          pea       @m68kde~2_57.L
00001B2E  43EE      
00001B30  4E92      2820          jsr       (A2)
00001B32  584F      2821          addq.w    #4,A7
                    2822   ; return ;
00001B34  6000 0196 2823          bra       ChangeRegisters_6
                    2824   ChangeRegisters_23:
                    2825   ; }
                    2826   ; else {
                    2827   ; printf("\r\nA%c = ", c) ;
00001B38  4882      2828          ext.w     D2
00001B3A  48C2      2829          ext.l     D2
00001B3C  2F02      2830          move.l    D2,-(A7)
00001B3E  4879 0000 2831          pea       @m68kde~2_58.L
00001B42  441C      
00001B44  4E92      2832          jsr       (A2)
00001B46  504F      2833          addq.w    #8,A7
                    2834   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B48  42A7      2835          clr.l     -(A7)
00001B4A  4E94      2836          jsr       (A4)
00001B4C  584F      2837          addq.w    #4,A7
00001B4E  2600      2838          move.l    D0,D3
                    2839   ; }
                    2840   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2841   ; if(c == (char)('0'))
00001B50  0C02 0030 2842          cmp.b     #48,D2
00001B54  660A      2843          bne.s     ChangeRegisters_26
                    2844   ; a0 = reg_val ;
00001B56  23C3 0B00 2845          move.l    D3,_a0.L
00001B5A  0104      
00001B5C  6000 0060 2846          bra       ChangeRegisters_39
                    2847   ChangeRegisters_26:
                    2848   ; else if(c == (char)('1'))
00001B60  0C02 0031 2849          cmp.b     #49,D2
00001B64  660A      2850          bne.s     ChangeRegisters_28
                    2851   ; a1 = reg_val ;
00001B66  23C3 0B00 2852          move.l    D3,_a1.L
00001B6A  0108      
00001B6C  6000 0050 2853          bra       ChangeRegisters_39
                    2854   ChangeRegisters_28:
                    2855   ; else if(c == (char)('2'))
00001B70  0C02 0032 2856          cmp.b     #50,D2
00001B74  660A      2857          bne.s     ChangeRegisters_30
                    2858   ; a2 = reg_val ;
00001B76  23C3 0B00 2859          move.l    D3,_a2.L
00001B7A  010C      
00001B7C  6000 0040 2860          bra       ChangeRegisters_39
                    2861   ChangeRegisters_30:
                    2862   ; else if(c == (char)('3'))
00001B80  0C02 0033 2863          cmp.b     #51,D2
00001B84  6608      2864          bne.s     ChangeRegisters_32
                    2865   ; a3 = reg_val ;
00001B86  23C3 0B00 2866          move.l    D3,_a3.L
00001B8A  0110      
00001B8C  6030      2867          bra.s     ChangeRegisters_39
                    2868   ChangeRegisters_32:
                    2869   ; else if(c == (char)('4'))
00001B8E  0C02 0034 2870          cmp.b     #52,D2
00001B92  6608      2871          bne.s     ChangeRegisters_34
                    2872   ; a4 = reg_val ;
00001B94  23C3 0B00 2873          move.l    D3,_a4.L
00001B98  0114      
00001B9A  6022      2874          bra.s     ChangeRegisters_39
                    2875   ChangeRegisters_34:
                    2876   ; else if(c == (char)('5'))
00001B9C  0C02 0035 2877          cmp.b     #53,D2
00001BA0  6608      2878          bne.s     ChangeRegisters_36
                    2879   ; a5 = reg_val ;
00001BA2  23C3 0B00 2880          move.l    D3,_a5.L
00001BA6  0118      
00001BA8  6014      2881          bra.s     ChangeRegisters_39
                    2882   ChangeRegisters_36:
                    2883   ; else if(c == (char)('6'))
00001BAA  0C02 0036 2884          cmp.b     #54,D2
00001BAE  6608      2885          bne.s     ChangeRegisters_38
                    2886   ; a6 = reg_val ;
00001BB0  23C3 0B00 2887          move.l    D3,_a6.L
00001BB4  011C      
00001BB6  6006      2888          bra.s     ChangeRegisters_39
                    2889   ChangeRegisters_38:
                    2890   ; else
                    2891   ; USP = reg_val ;
00001BB8  23C3 0B00 2892          move.l    D3,_USP.L
00001BBC  0128      
                    2893   ChangeRegisters_39:
00001BBE  6000 0108 2894          bra       ChangeRegisters_51
                    2895   ChangeRegisters_21:
                    2896   ; }
                    2897   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001BC2  1013      2898          move.b    (A3),D0
00001BC4  0C00 0075 2899          cmp.b     #117,D0
00001BC8  6600 004E 2900          bne       ChangeRegisters_40
00001BCC  0C02 0073 2901          cmp.b     #115,D2
00001BD0  6600 0046 2902          bne       ChangeRegisters_40
                    2903   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001BD4  2F00      2904          move.l    D0,-(A7)
00001BD6  4E95      2905          jsr       (A5)
00001BD8  2200      2906          move.l    D0,D1
00001BDA  201F      2907          move.l    (A7)+,D0
00001BDC  2F01      2908          move.l    D1,-(A7)
00001BDE  4EB9 0000 2909          jsr       _tolower
00001BE2  34B2      
00001BE4  584F      2910          addq.w    #4,A7
00001BE6  0C80 0000 2911          cmp.l     #112,D0
00001BEA  0070      
00001BEC  6618      2912          bne.s     ChangeRegisters_42
                    2913   ; printf("\r\nUser SP = ") ;
00001BEE  4879 0000 2914          pea       @m68kde~2_59.L
00001BF2  4426      
00001BF4  4E92      2915          jsr       (A2)
00001BF6  584F      2916          addq.w    #4,A7
                    2917   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BF8  42A7      2918          clr.l     -(A7)
00001BFA  4E94      2919          jsr       (A4)
00001BFC  584F      2920          addq.w    #4,A7
00001BFE  23C0 0B00 2921          move.l    D0,_USP.L
00001C02  0128      
00001C04  600E      2922          bra.s     ChangeRegisters_43
                    2923   ChangeRegisters_42:
                    2924   ; }
                    2925   ; else {
                    2926   ; printf("\r\nIllegal Register....") ;
00001C06  4879 0000 2927          pea       @m68kde~2_60.L
00001C0A  4434      
00001C0C  4E92      2928          jsr       (A2)
00001C0E  584F      2929          addq.w    #4,A7
                    2930   ; return ;
00001C10  6000 00BA 2931          bra       ChangeRegisters_6
                    2932   ChangeRegisters_43:
00001C14  6000 00B2 2933          bra       ChangeRegisters_51
                    2934   ChangeRegisters_40:
                    2935   ; }
                    2936   ; }
                    2937   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001C18  1013      2938          move.b    (A3),D0
00001C1A  0C00 0073 2939          cmp.b     #115,D0
00001C1E  6600 004E 2940          bne       ChangeRegisters_44
00001C22  0C02 0073 2941          cmp.b     #115,D2
00001C26  6600 0046 2942          bne       ChangeRegisters_44
                    2943   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001C2A  2F00      2944          move.l    D0,-(A7)
00001C2C  4E95      2945          jsr       (A5)
00001C2E  2200      2946          move.l    D0,D1
00001C30  201F      2947          move.l    (A7)+,D0
00001C32  2F01      2948          move.l    D1,-(A7)
00001C34  4EB9 0000 2949          jsr       _tolower
00001C38  34B2      
00001C3A  584F      2950          addq.w    #4,A7
00001C3C  0C80 0000 2951          cmp.l     #112,D0
00001C40  0070      
00001C42  6618      2952          bne.s     ChangeRegisters_46
                    2953   ; printf("\r\nSystem SP = ") ;
00001C44  4879 0000 2954          pea       @m68kde~2_61.L
00001C48  444C      
00001C4A  4E92      2955          jsr       (A2)
00001C4C  584F      2956          addq.w    #4,A7
                    2957   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C4E  42A7      2958          clr.l     -(A7)
00001C50  4E94      2959          jsr       (A4)
00001C52  584F      2960          addq.w    #4,A7
00001C54  23C0 0B00 2961          move.l    D0,_SSP.L
00001C58  0124      
00001C5A  600E      2962          bra.s     ChangeRegisters_47
                    2963   ChangeRegisters_46:
                    2964   ; }
                    2965   ; else {
                    2966   ; printf("\r\nIllegal Register....") ;
00001C5C  4879 0000 2967          pea       @m68kde~2_60.L
00001C60  4434      
00001C62  4E92      2968          jsr       (A2)
00001C64  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001C66  6000 0064 2971          bra       ChangeRegisters_6
                    2972   ChangeRegisters_47:
00001C6A  6000 005C 2973          bra       ChangeRegisters_51
                    2974   ChangeRegisters_44:
                    2975   ; }
                    2976   ; }
                    2977   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001C6E  1013      2978          move.b    (A3),D0
00001C70  0C00 0070 2979          cmp.b     #112,D0
00001C74  6620      2980          bne.s     ChangeRegisters_48
00001C76  0C02 0063 2981          cmp.b     #99,D2
00001C7A  661A      2982          bne.s     ChangeRegisters_48
                    2983   ; printf("\r\nPC = ") ;
00001C7C  4879 0000 2984          pea       @m68kde~2_62.L
00001C80  445C      
00001C82  4E92      2985          jsr       (A2)
00001C84  584F      2986          addq.w    #4,A7
                    2987   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C86  42A7      2988          clr.l     -(A7)
00001C88  4E94      2989          jsr       (A4)
00001C8A  584F      2990          addq.w    #4,A7
00001C8C  23C0 0B00 2991          move.l    D0,_PC.L
00001C90  0120      
00001C92  6000 0034 2992          bra       ChangeRegisters_51
                    2993   ChangeRegisters_48:
                    2994   ; }
                    2995   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001C96  1013      2996          move.b    (A3),D0
00001C98  0C00 0073 2997          cmp.b     #115,D0
00001C9C  6620      2998          bne.s     ChangeRegisters_50
00001C9E  0C02 0072 2999          cmp.b     #114,D2
00001CA2  661A      3000          bne.s     ChangeRegisters_50
                    3001   ; printf("\r\nSR = ") ;
00001CA4  4879 0000 3002          pea       @m68kde~2_63.L
00001CA8  4464      
00001CAA  4E92      3003          jsr       (A2)
00001CAC  584F      3004          addq.w    #4,A7
                    3005   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001CAE  42A7      3006          clr.l     -(A7)
00001CB0  4EB8 0C58 3007          jsr       _Get4HexDigits
00001CB4  584F      3008          addq.w    #4,A7
00001CB6  33C0 0B00 3009          move.w    D0,_SR.L
00001CBA  012C      
00001CBC  600A      3010          bra.s     ChangeRegisters_51
                    3011   ChangeRegisters_50:
                    3012   ; }
                    3013   ; else
                    3014   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001CBE  4879 0000 3015          pea       @m68kde~2_64.L
00001CC2  446C      
00001CC4  4E92      3016          jsr       (A2)
00001CC6  584F      3017          addq.w    #4,A7
                    3018   ChangeRegisters_51:
                    3019   ; DumpRegisters() ;
00001CC8  4EB8 1526 3020          jsr       _DumpRegisters
                    3021   ChangeRegisters_6:
00001CCC  4CDF 3C0C 3022          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001CD0  4E5E      3023          unlk      A6
00001CD2  4E75      3024          rts
                    3025   ; }
                    3026   ; void BreakPointDisplay(void)
                    3027   ; {
                    3028   _BreakPointDisplay:
00001CD4  48E7 3030 3029          movem.l   D2/D3/A2/A3,-(A7)
00001CD8  45F9 0000 3030          lea       _printf.L,A2
00001CDC  3532      
00001CDE  47F9 0B00 3031          lea       _BreakPointAddress.L,A3
00001CE2  012E      
                    3032   ; int i, BreakPointsSet = 0 ;
00001CE4  4283      3033          clr.l     D3
                    3034   ; // any break points  set
                    3035   ; for(i = 0; i < 8; i++)  {
00001CE6  4282      3036          clr.l     D2
                    3037   BreakPointDisplay_1:
00001CE8  0C82 0000 3038          cmp.l     #8,D2
00001CEC  0008      
00001CEE  6C1C      3039          bge.s     BreakPointDisplay_3
                    3040   ; if(BreakPointSetOrCleared[i] == 1)
00001CF0  2002      3041          move.l    D2,D0
00001CF2  E588      3042          lsl.l     #2,D0
00001CF4  41F9 0B00 3043          lea       _BreakPointSetOrCleared.L,A0
00001CF8  015E      
00001CFA  2030 0800 3044          move.l    0(A0,D0.L),D0
00001CFE  0C80 0000 3045          cmp.l     #1,D0
00001D02  0001      
00001D04  6602      3046          bne.s     BreakPointDisplay_4
                    3047   ; BreakPointsSet = 1;
00001D06  7601      3048          moveq     #1,D3
                    3049   BreakPointDisplay_4:
00001D08  5282      3050          addq.l    #1,D2
00001D0A  60DC      3051          bra       BreakPointDisplay_1
                    3052   BreakPointDisplay_3:
                    3053   ; }
                    3054   ; if(BreakPointsSet == 1) {
00001D0C  0C83 0000 3055          cmp.l     #1,D3
00001D10  0001      
00001D12  6616      3056          bne.s     BreakPointDisplay_6
                    3057   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001D14  4879 0000 3058          pea       @m68kde~2_65.L
00001D18  44A8      
00001D1A  4E92      3059          jsr       (A2)
00001D1C  584F      3060          addq.w    #4,A7
                    3061   ; printf("\r\n---     ---------    -----------") ;
00001D1E  4879 0000 3062          pea       @m68kde~2_66.L
00001D22  44CE      
00001D24  4E92      3063          jsr       (A2)
00001D26  584F      3064          addq.w    #4,A7
00001D28  600A      3065          bra.s     BreakPointDisplay_7
                    3066   BreakPointDisplay_6:
                    3067   ; }
                    3068   ; else
                    3069   ; printf("\r\nNo BreakPoints Set") ;
00001D2A  4879 0000 3070          pea       @m68kde~2_67.L
00001D2E  44F2      
00001D30  4E92      3071          jsr       (A2)
00001D32  584F      3072          addq.w    #4,A7
                    3073   BreakPointDisplay_7:
                    3074   ; for(i = 0; i < 8; i++)  {
00001D34  4282      3075          clr.l     D2
                    3076   BreakPointDisplay_8:
00001D36  0C82 0000 3077          cmp.l     #8,D2
00001D3A  0008      
00001D3C  6C00 005A 3078          bge       BreakPointDisplay_10
                    3079   ; // put opcode back, then put break point back
                    3080   ; if(BreakPointSetOrCleared[i] == 1)  {
00001D40  2002      3081          move.l    D2,D0
00001D42  E588      3082          lsl.l     #2,D0
00001D44  41F9 0B00 3083          lea       _BreakPointSetOrCleared.L,A0
00001D48  015E      
00001D4A  2030 0800 3084          move.l    0(A0,D0.L),D0
00001D4E  0C80 0000 3085          cmp.l     #1,D0
00001D52  0001      
00001D54  6600 003E 3086          bne       BreakPointDisplay_11
                    3087   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001D58  2002      3088          move.l    D2,D0
00001D5A  E388      3089          lsl.l     #1,D0
00001D5C  41F9 0B00 3090          lea       _BreakPointInstruction.L,A0
00001D60  014E      
00001D62  2202      3091          move.l    D2,D1
00001D64  E589      3092          lsl.l     #2,D1
00001D66  2233 1800 3093          move.l    0(A3,D1.L),D1
00001D6A  2241      3094          move.l    D1,A1
00001D6C  32B0 0800 3095          move.w    0(A0,D0.L),(A1)
                    3096   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001D70  2002      3097          move.l    D2,D0
00001D72  E588      3098          lsl.l     #2,D0
00001D74  2033 0800 3099          move.l    0(A3,D0.L),D0
00001D78  2040      3100          move.l    D0,A0
00001D7A  30BC 4E4E 3101          move.w    #20046,(A0)
                    3102   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001D7E  2202      3103          move.l    D2,D1
00001D80  E589      3104          lsl.l     #2,D1
00001D82  2F33 1800 3105          move.l    0(A3,D1.L),-(A7)
00001D86  2F02      3106          move.l    D2,-(A7)
00001D88  4879 0000 3107          pea       @m68kde~2_68.L
00001D8C  4508      
00001D8E  4E92      3108          jsr       (A2)
00001D90  DEFC 000C 3109          add.w     #12,A7
                    3110   BreakPointDisplay_11:
00001D94  5282      3111          addq.l    #1,D2
00001D96  609E      3112          bra       BreakPointDisplay_8
                    3113   BreakPointDisplay_10:
                    3114   ; }
                    3115   ; }
                    3116   ; printf("\r\n") ;
00001D98  4879 0000 3117          pea       @m68kde~2_1.L
00001D9C  3E44      
00001D9E  4E92      3118          jsr       (A2)
00001DA0  584F      3119          addq.w    #4,A7
00001DA2  4CDF 0C0C 3120          movem.l   (A7)+,D2/D3/A2/A3
00001DA6  4E75      3121          rts
                    3122   ; }
                    3123   ; void WatchPointDisplay(void)
                    3124   ; {
                    3125   _WatchPointDisplay:
00001DA8  48E7 3020 3126          movem.l   D2/D3/A2,-(A7)
00001DAC  45F9 0000 3127          lea       _printf.L,A2
00001DB0  3532      
                    3128   ; int i ;
                    3129   ; int WatchPointsSet = 0 ;
00001DB2  4283      3130          clr.l     D3
                    3131   ; // any watchpoints set
                    3132   ; for(i = 0; i < 8; i++)  {
00001DB4  4282      3133          clr.l     D2
                    3134   WatchPointDisplay_1:
00001DB6  0C82 0000 3135          cmp.l     #8,D2
00001DBA  0008      
00001DBC  6C1C      3136          bge.s     WatchPointDisplay_3
                    3137   ; if(WatchPointSetOrCleared[i] == 1)
00001DBE  2002      3138          move.l    D2,D0
00001DC0  E588      3139          lsl.l     #2,D0
00001DC2  41F9 0B00 3140          lea       _WatchPointSetOrCleared.L,A0
00001DC6  01A2      
00001DC8  2030 0800 3141          move.l    0(A0,D0.L),D0
00001DCC  0C80 0000 3142          cmp.l     #1,D0
00001DD0  0001      
00001DD2  6602      3143          bne.s     WatchPointDisplay_4
                    3144   ; WatchPointsSet = 1;
00001DD4  7601      3145          moveq     #1,D3
                    3146   WatchPointDisplay_4:
00001DD6  5282      3147          addq.l    #1,D2
00001DD8  60DC      3148          bra       WatchPointDisplay_1
                    3149   WatchPointDisplay_3:
                    3150   ; }
                    3151   ; if(WatchPointsSet == 1) {
00001DDA  0C83 0000 3152          cmp.l     #1,D3
00001DDE  0001      
00001DE0  6616      3153          bne.s     WatchPointDisplay_6
                    3154   ; printf("\r\nNum     Address") ;
00001DE2  4879 0000 3155          pea       @m68kde~2_69.L
00001DE6  4518      
00001DE8  4E92      3156          jsr       (A2)
00001DEA  584F      3157          addq.w    #4,A7
                    3158   ; printf("\r\n---     ---------") ;
00001DEC  4879 0000 3159          pea       @m68kde~2_70.L
00001DF0  452A      
00001DF2  4E92      3160          jsr       (A2)
00001DF4  584F      3161          addq.w    #4,A7
00001DF6  600A      3162          bra.s     WatchPointDisplay_7
                    3163   WatchPointDisplay_6:
                    3164   ; }
                    3165   ; else
                    3166   ; printf("\r\nNo WatchPoints Set") ;
00001DF8  4879 0000 3167          pea       @m68kde~2_71.L
00001DFC  453E      
00001DFE  4E92      3168          jsr       (A2)
00001E00  584F      3169          addq.w    #4,A7
                    3170   WatchPointDisplay_7:
                    3171   ; for(i = 0; i < 8; i++)  {
00001E02  4282      3172          clr.l     D2
                    3173   WatchPointDisplay_8:
00001E04  0C82 0000 3174          cmp.l     #8,D2
00001E08  0008      
00001E0A  6C00 0038 3175          bge       WatchPointDisplay_10
                    3176   ; if(WatchPointSetOrCleared[i] == 1)
00001E0E  2002      3177          move.l    D2,D0
00001E10  E588      3178          lsl.l     #2,D0
00001E12  41F9 0B00 3179          lea       _WatchPointSetOrCleared.L,A0
00001E16  01A2      
00001E18  2030 0800 3180          move.l    0(A0,D0.L),D0
00001E1C  0C80 0000 3181          cmp.l     #1,D0
00001E20  0001      
00001E22  661C      3182          bne.s     WatchPointDisplay_11
                    3183   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001E24  2202      3184          move.l    D2,D1
00001E26  E589      3185          lsl.l     #2,D1
00001E28  41F9 0B00 3186          lea       _WatchPointAddress.L,A0
00001E2C  0182      
00001E2E  2F30 1800 3187          move.l    0(A0,D1.L),-(A7)
00001E32  2F02      3188          move.l    D2,-(A7)
00001E34  4879 0000 3189          pea       @m68kde~2_68.L
00001E38  4508      
00001E3A  4E92      3190          jsr       (A2)
00001E3C  DEFC 000C 3191          add.w     #12,A7
                    3192   WatchPointDisplay_11:
00001E40  5282      3193          addq.l    #1,D2
00001E42  60C0      3194          bra       WatchPointDisplay_8
                    3195   WatchPointDisplay_10:
                    3196   ; }
                    3197   ; printf("\r\n") ;
00001E44  4879 0000 3198          pea       @m68kde~2_1.L
00001E48  3E44      
00001E4A  4E92      3199          jsr       (A2)
00001E4C  584F      3200          addq.w    #4,A7
00001E4E  4CDF 040C 3201          movem.l   (A7)+,D2/D3/A2
00001E52  4E75      3202          rts
                    3203   ; }
                    3204   ; void BreakPointClear(void)
                    3205   ; {
                    3206   _BreakPointClear:
00001E54  4E56 FFFC 3207          link      A6,#-4
00001E58  48E7 2020 3208          movem.l   D2/A2,-(A7)
00001E5C  45F9 0000 3209          lea       _printf.L,A2
00001E60  3532      
                    3210   ; unsigned int i ;
                    3211   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3212   ; BreakPointDisplay() ;
00001E62  4EB8 1CD4 3213          jsr       _BreakPointDisplay
                    3214   ; printf("\r\nEnter Break Point Number: ") ;
00001E66  4879 0000 3215          pea       @m68kde~2_72.L
00001E6A  4554      
00001E6C  4E92      3216          jsr       (A2)
00001E6E  584F      3217          addq.w    #4,A7
                    3218   ; i = xtod(_getch()) ;           // get break pointer number
00001E70  2F00      3219          move.l    D0,-(A7)
00001E72  4EB8 0B68 3220          jsr       __getch
00001E76  2200      3221          move.l    D0,D1
00001E78  201F      3222          move.l    (A7)+,D0
00001E7A  2F01      3223          move.l    D1,-(A7)
00001E7C  4EB8 0BD2 3224          jsr       _xtod
00001E80  584F      3225          addq.w    #4,A7
00001E82  C0BC 0000 3226          and.l     #255,D0
00001E86  00FF      
00001E88  2400      3227          move.l    D0,D2
                    3228   ; if((i < 0) || (i > 7))   {
00001E8A  0C82 0000 3229          cmp.l     #0,D2
00001E8E  0000      
00001E90  6508      3230          blo.s     BreakPointClear_3
00001E92  0C82 0000 3231          cmp.l     #7,D2
00001E96  0007      
00001E98  630E      3232          bls.s     BreakPointClear_1
                    3233   BreakPointClear_3:
                    3234   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E9A  4879 0000 3235          pea       @m68kde~2_73.L
00001E9E  4572      
00001EA0  4E92      3236          jsr       (A2)
00001EA2  584F      3237          addq.w    #4,A7
                    3238   ; return ;
00001EA4  6000 0080 3239          bra       BreakPointClear_4
                    3240   BreakPointClear_1:
                    3241   ; }
                    3242   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001EA8  2002      3243          move.l    D2,D0
00001EAA  E588      3244          lsl.l     #2,D0
00001EAC  41F9 0B00 3245          lea       _BreakPointSetOrCleared.L,A0
00001EB0  015E      
00001EB2  2030 0800 3246          move.l    0(A0,D0.L),D0
00001EB6  0C80 0000 3247          cmp.l     #1,D0
00001EBA  0001      
00001EBC  6600 005A 3248          bne       BreakPointClear_5
                    3249   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001EC0  2002      3250          move.l    D2,D0
00001EC2  E588      3251          lsl.l     #2,D0
00001EC4  41F9 0B00 3252          lea       _BreakPointAddress.L,A0
00001EC8  012E      
00001ECA  2D70 0800 3253          move.l    0(A0,D0.L),-4(A6)
00001ECE  FFFC      
                    3254   ; BreakPointAddress[i] = 0 ;
00001ED0  2002      3255          move.l    D2,D0
00001ED2  E588      3256          lsl.l     #2,D0
00001ED4  41F9 0B00 3257          lea       _BreakPointAddress.L,A0
00001ED8  012E      
00001EDA  42B0 0800 3258          clr.l     0(A0,D0.L)
                    3259   ; BreakPointSetOrCleared[i] = 0 ;
00001EDE  2002      3260          move.l    D2,D0
00001EE0  E588      3261          lsl.l     #2,D0
00001EE2  41F9 0B00 3262          lea       _BreakPointSetOrCleared.L,A0
00001EE6  015E      
00001EE8  42B0 0800 3263          clr.l     0(A0,D0.L)
                    3264   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001EEC  2002      3265          move.l    D2,D0
00001EEE  E388      3266          lsl.l     #1,D0
00001EF0  41F9 0B00 3267          lea       _BreakPointInstruction.L,A0
00001EF4  014E      
00001EF6  226E FFFC 3268          move.l    -4(A6),A1
00001EFA  32B0 0800 3269          move.w    0(A0,D0.L),(A1)
                    3270   ; BreakPointInstruction[i] = 0 ;
00001EFE  2002      3271          move.l    D2,D0
00001F00  E388      3272          lsl.l     #1,D0
00001F02  41F9 0B00 3273          lea       _BreakPointInstruction.L,A0
00001F06  014E      
00001F08  4270 0800 3274          clr.w     0(A0,D0.L)
                    3275   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001F0C  4879 0000 3276          pea       @m68kde~2_74.L
00001F10  458E      
00001F12  4E92      3277          jsr       (A2)
00001F14  584F      3278          addq.w    #4,A7
00001F16  600A      3279          bra.s     BreakPointClear_6
                    3280   BreakPointClear_5:
                    3281   ; }
                    3282   ; else
                    3283   ; printf("\r\nBreak Point wasn't Set.....") ;
00001F18  4879 0000 3284          pea       @m68kde~2_75.L
00001F1C  45AC      
00001F1E  4E92      3285          jsr       (A2)
00001F20  584F      3286          addq.w    #4,A7
                    3287   BreakPointClear_6:
                    3288   ; BreakPointDisplay() ;
00001F22  4EB8 1CD4 3289          jsr       _BreakPointDisplay
                    3290   ; return ;
                    3291   BreakPointClear_4:
00001F26  4CDF 0404 3292          movem.l   (A7)+,D2/A2
00001F2A  4E5E      3293          unlk      A6
00001F2C  4E75      3294          rts
                    3295   ; }
                    3296   ; void WatchPointClear(void)
                    3297   ; {
                    3298   _WatchPointClear:
00001F2E  48E7 2020 3299          movem.l   D2/A2,-(A7)
00001F32  45F9 0000 3300          lea       _printf.L,A2
00001F36  3532      
                    3301   ; unsigned int i ;
                    3302   ; WatchPointDisplay() ;
00001F38  4EB8 1DA8 3303          jsr       _WatchPointDisplay
                    3304   ; printf("\r\nEnter Watch Point Number: ") ;
00001F3C  4879 0000 3305          pea       @m68kde~2_76.L
00001F40  45CA      
00001F42  4E92      3306          jsr       (A2)
00001F44  584F      3307          addq.w    #4,A7
                    3308   ; i = xtod(_getch()) ;           // get watch pointer number
00001F46  2F00      3309          move.l    D0,-(A7)
00001F48  4EB8 0B68 3310          jsr       __getch
00001F4C  2200      3311          move.l    D0,D1
00001F4E  201F      3312          move.l    (A7)+,D0
00001F50  2F01      3313          move.l    D1,-(A7)
00001F52  4EB8 0BD2 3314          jsr       _xtod
00001F56  584F      3315          addq.w    #4,A7
00001F58  C0BC 0000 3316          and.l     #255,D0
00001F5C  00FF      
00001F5E  2400      3317          move.l    D0,D2
                    3318   ; if((i < 0) || (i > 7))   {
00001F60  0C82 0000 3319          cmp.l     #0,D2
00001F64  0000      
00001F66  6508      3320          blo.s     WatchPointClear_3
00001F68  0C82 0000 3321          cmp.l     #7,D2
00001F6C  0007      
00001F6E  630E      3322          bls.s     WatchPointClear_1
                    3323   WatchPointClear_3:
                    3324   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F70  4879 0000 3325          pea       @m68kde~2_73.L
00001F74  4572      
00001F76  4E92      3326          jsr       (A2)
00001F78  584F      3327          addq.w    #4,A7
                    3328   ; return ;
00001F7A  6000 004E 3329          bra       WatchPointClear_4
                    3330   WatchPointClear_1:
                    3331   ; }
                    3332   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001F7E  2002      3333          move.l    D2,D0
00001F80  E588      3334          lsl.l     #2,D0
00001F82  41F9 0B00 3335          lea       _WatchPointSetOrCleared.L,A0
00001F86  01A2      
00001F88  2030 0800 3336          move.l    0(A0,D0.L),D0
00001F8C  0C80 0000 3337          cmp.l     #1,D0
00001F90  0001      
00001F92  6628      3338          bne.s     WatchPointClear_5
                    3339   ; WatchPointAddress[i] = 0 ;
00001F94  2002      3340          move.l    D2,D0
00001F96  E588      3341          lsl.l     #2,D0
00001F98  41F9 0B00 3342          lea       _WatchPointAddress.L,A0
00001F9C  0182      
00001F9E  42B0 0800 3343          clr.l     0(A0,D0.L)
                    3344   ; WatchPointSetOrCleared[i] = 0 ;
00001FA2  2002      3345          move.l    D2,D0
00001FA4  E588      3346          lsl.l     #2,D0
00001FA6  41F9 0B00 3347          lea       _WatchPointSetOrCleared.L,A0
00001FAA  01A2      
00001FAC  42B0 0800 3348          clr.l     0(A0,D0.L)
                    3349   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001FB0  4879 0000 3350          pea       @m68kde~2_77.L
00001FB4  45E8      
00001FB6  4E92      3351          jsr       (A2)
00001FB8  584F      3352          addq.w    #4,A7
00001FBA  600A      3353          bra.s     WatchPointClear_6
                    3354   WatchPointClear_5:
                    3355   ; }
                    3356   ; else
                    3357   ; printf("\r\nWatch Point Was not Set.....") ;
00001FBC  4879 0000 3358          pea       @m68kde~2_78.L
00001FC0  4606      
00001FC2  4E92      3359          jsr       (A2)
00001FC4  584F      3360          addq.w    #4,A7
                    3361   WatchPointClear_6:
                    3362   ; WatchPointDisplay() ;
00001FC6  4EB8 1DA8 3363          jsr       _WatchPointDisplay
                    3364   ; return ;
                    3365   WatchPointClear_4:
00001FCA  4CDF 0404 3366          movem.l   (A7)+,D2/A2
00001FCE  4E75      3367          rts
                    3368   ; }
                    3369   ; void DisableBreakPoints(void)
                    3370   ; {
                    3371   _DisableBreakPoints:
00001FD0  4E56 FFFC 3372          link      A6,#-4
00001FD4  2F02      3373          move.l    D2,-(A7)
                    3374   ; int i ;
                    3375   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3376   ; for(i = 0; i < 8; i++)  {
00001FD6  4282      3377          clr.l     D2
                    3378   DisableBreakPoints_1:
00001FD8  0C82 0000 3379          cmp.l     #8,D2
00001FDC  0008      
00001FDE  6C00 003E 3380          bge       DisableBreakPoints_3
                    3381   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001FE2  2002      3382          move.l    D2,D0
00001FE4  E588      3383          lsl.l     #2,D0
00001FE6  41F9 0B00 3384          lea       _BreakPointSetOrCleared.L,A0
00001FEA  015E      
00001FEC  2030 0800 3385          move.l    0(A0,D0.L),D0
00001FF0  0C80 0000 3386          cmp.l     #1,D0
00001FF4  0001      
00001FF6  6622      3387          bne.s     DisableBreakPoints_4
                    3388   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FF8  2002      3389          move.l    D2,D0
00001FFA  E588      3390          lsl.l     #2,D0
00001FFC  41F9 0B00 3391          lea       _BreakPointAddress.L,A0
00002000  012E      
00002002  2D70 0800 3392          move.l    0(A0,D0.L),-4(A6)
00002006  FFFC      
                    3393   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00002008  2002      3394          move.l    D2,D0
0000200A  E388      3395          lsl.l     #1,D0
0000200C  41F9 0B00 3396          lea       _BreakPointInstruction.L,A0
00002010  014E      
00002012  226E FFFC 3397          move.l    -4(A6),A1
00002016  32B0 0800 3398          move.w    0(A0,D0.L),(A1)
                    3399   DisableBreakPoints_4:
0000201A  5282      3400          addq.l    #1,D2
0000201C  60BA      3401          bra       DisableBreakPoints_1
                    3402   DisableBreakPoints_3:
0000201E  241F      3403          move.l    (A7)+,D2
00002020  4E5E      3404          unlk      A6
00002022  4E75      3405          rts
                    3406   ; }
                    3407   ; }
                    3408   ; }
                    3409   ; void EnableBreakPoints(void)
                    3410   ; {
                    3411   _EnableBreakPoints:
00002024  4E56 FFFC 3412          link      A6,#-4
00002028  2F02      3413          move.l    D2,-(A7)
                    3414   ; int i ;
                    3415   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3416   ; for(i = 0; i < 8; i++)  {
0000202A  4282      3417          clr.l     D2
                    3418   EnableBreakPoints_1:
0000202C  0C82 0000 3419          cmp.l     #8,D2
00002030  0008      
00002032  6C32      3420          bge.s     EnableBreakPoints_3
                    3421   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00002034  2002      3422          move.l    D2,D0
00002036  E588      3423          lsl.l     #2,D0
00002038  41F9 0B00 3424          lea       _BreakPointSetOrCleared.L,A0
0000203C  015E      
0000203E  2030 0800 3425          move.l    0(A0,D0.L),D0
00002042  0C80 0000 3426          cmp.l     #1,D0
00002046  0001      
00002048  6618      3427          bne.s     EnableBreakPoints_4
                    3428   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
0000204A  2002      3429          move.l    D2,D0
0000204C  E588      3430          lsl.l     #2,D0
0000204E  41F9 0B00 3431          lea       _BreakPointAddress.L,A0
00002052  012E      
00002054  2D70 0800 3432          move.l    0(A0,D0.L),-4(A6)
00002058  FFFC      
                    3433   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
0000205A  206E FFFC 3434          move.l    -4(A6),A0
0000205E  30BC 4E4E 3435          move.w    #20046,(A0)
                    3436   EnableBreakPoints_4:
00002062  5282      3437          addq.l    #1,D2
00002064  60C6      3438          bra       EnableBreakPoints_1
                    3439   EnableBreakPoints_3:
00002066  241F      3440          move.l    (A7)+,D2
00002068  4E5E      3441          unlk      A6
0000206A  4E75      3442          rts
                    3443   ; }
                    3444   ; }
                    3445   ; }
                    3446   ; void KillAllBreakPoints(void)
                    3447   ; {
                    3448   _KillAllBreakPoints:
0000206C  4E56 FFFC 3449          link      A6,#-4
00002070  2F02      3450          move.l    D2,-(A7)
                    3451   ; int i ;
                    3452   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3453   ; for(i = 0; i < 8; i++)  {
00002072  4282      3454          clr.l     D2
                    3455   KillAllBreakPoints_1:
00002074  0C82 0000 3456          cmp.l     #8,D2
00002078  0008      
0000207A  6C00 0052 3457          bge       KillAllBreakPoints_3
                    3458   ; // clear BP
                    3459   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
0000207E  2002      3460          move.l    D2,D0
00002080  E588      3461          lsl.l     #2,D0
00002082  41F9 0B00 3462          lea       _BreakPointAddress.L,A0
00002086  012E      
00002088  2D70 0800 3463          move.l    0(A0,D0.L),-4(A6)
0000208C  FFFC      
                    3464   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
0000208E  2002      3465          move.l    D2,D0
00002090  E388      3466          lsl.l     #1,D0
00002092  41F9 0B00 3467          lea       _BreakPointInstruction.L,A0
00002096  014E      
00002098  226E FFFC 3468          move.l    -4(A6),A1
0000209C  32B0 0800 3469          move.w    0(A0,D0.L),(A1)
                    3470   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
000020A0  2002      3471          move.l    D2,D0
000020A2  E588      3472          lsl.l     #2,D0
000020A4  41F9 0B00 3473          lea       _BreakPointAddress.L,A0
000020A8  012E      
000020AA  42B0 0800 3474          clr.l     0(A0,D0.L)
                    3475   ; BreakPointInstruction[i] = 0 ;
000020AE  2002      3476          move.l    D2,D0
000020B0  E388      3477          lsl.l     #1,D0
000020B2  41F9 0B00 3478          lea       _BreakPointInstruction.L,A0
000020B6  014E      
000020B8  4270 0800 3479          clr.w     0(A0,D0.L)
                    3480   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000020BC  2002      3481          move.l    D2,D0
000020BE  E588      3482          lsl.l     #2,D0
000020C0  41F9 0B00 3483          lea       _BreakPointSetOrCleared.L,A0
000020C4  015E      
000020C6  42B0 0800 3484          clr.l     0(A0,D0.L)
000020CA  5282      3485          addq.l    #1,D2
000020CC  60A6      3486          bra       KillAllBreakPoints_1
                    3487   KillAllBreakPoints_3:
000020CE  241F      3488          move.l    (A7)+,D2
000020D0  4E5E      3489          unlk      A6
000020D2  4E75      3490          rts
                    3491   ; }
                    3492   ; //BreakPointDisplay() ;       // display the break points
                    3493   ; }
                    3494   ; void KillAllWatchPoints(void)
                    3495   ; {
                    3496   _KillAllWatchPoints:
000020D4  2F02      3497          move.l    D2,-(A7)
                    3498   ; int i ;
                    3499   ; for(i = 0; i < 8; i++)  {
000020D6  4282      3500          clr.l     D2
                    3501   KillAllWatchPoints_1:
000020D8  0C82 0000 3502          cmp.l     #8,D2
000020DC  0008      
000020DE  6C20      3503          bge.s     KillAllWatchPoints_3
                    3504   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
000020E0  2002      3505          move.l    D2,D0
000020E2  E588      3506          lsl.l     #2,D0
000020E4  41F9 0B00 3507          lea       _WatchPointAddress.L,A0
000020E8  0182      
000020EA  42B0 0800 3508          clr.l     0(A0,D0.L)
                    3509   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000020EE  2002      3510          move.l    D2,D0
000020F0  E588      3511          lsl.l     #2,D0
000020F2  41F9 0B00 3512          lea       _WatchPointSetOrCleared.L,A0
000020F6  01A2      
000020F8  42B0 0800 3513          clr.l     0(A0,D0.L)
000020FC  5282      3514          addq.l    #1,D2
000020FE  60D8      3515          bra       KillAllWatchPoints_1
                    3516   KillAllWatchPoints_3:
00002100  241F      3517          move.l    (A7)+,D2
00002102  4E75      3518          rts
                    3519   ; }
                    3520   ; //WatchPointDisplay() ;       // display the break points
                    3521   ; }
                    3522   ; void SetBreakPoint(void)
                    3523   ; {
                    3524   _SetBreakPoint:
00002104  4E56 FFFC 3525          link      A6,#-4
00002108  48E7 3830 3526          movem.l   D2/D3/D4/A2/A3,-(A7)
0000210C  45F9 0000 3527          lea       _printf.L,A2
00002110  3532      
00002112  47F9 0B00 3528          lea       _BreakPointSetOrCleared.L,A3
00002116  015E      
                    3529   ; int i ;
                    3530   ; int BPNumber;
                    3531   ; int BPAddress;
                    3532   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3533   ; // see if any free break points
                    3534   ; for(i = 0; i < 8; i ++) {
00002118  4282      3535          clr.l     D2
                    3536   SetBreakPoint_1:
0000211A  0C82 0000 3537          cmp.l     #8,D2
0000211E  0008      
00002120  6C10      3538          bge.s     SetBreakPoint_3
                    3539   ; if( BreakPointSetOrCleared[i] == 0)
00002122  2002      3540          move.l    D2,D0
00002124  E588      3541          lsl.l     #2,D0
00002126  2033 0800 3542          move.l    0(A3,D0.L),D0
0000212A  6602      3543          bne.s     SetBreakPoint_4
                    3544   ; break ;         // if spare BP found allow user to set it
0000212C  6004      3545          bra.s     SetBreakPoint_3
                    3546   SetBreakPoint_4:
0000212E  5282      3547          addq.l    #1,D2
00002130  60E8      3548          bra       SetBreakPoint_1
                    3549   SetBreakPoint_3:
                    3550   ; }
                    3551   ; if(i == 8) {
00002132  0C82 0000 3552          cmp.l     #8,D2
00002136  0008      
00002138  660E      3553          bne.s     SetBreakPoint_6
                    3554   ; printf("\r\nNo FREE Break Points.....") ;
0000213A  4879 0000 3555          pea       @m68kde~2_79.L
0000213E  4626      
00002140  4E92      3556          jsr       (A2)
00002142  584F      3557          addq.w    #4,A7
                    3558   ; return ;
00002144  6000 00D6 3559          bra       SetBreakPoint_15
                    3560   SetBreakPoint_6:
                    3561   ; }
                    3562   ; printf("\r\nBreak Point Address: ") ;
00002148  4879 0000 3563          pea       @m68kde~2_80.L
0000214C  4642      
0000214E  4E92      3564          jsr       (A2)
00002150  584F      3565          addq.w    #4,A7
                    3566   ; BPAddress = Get8HexDigits(0) ;
00002152  42A7      3567          clr.l     -(A7)
00002154  4EB8 0CA4 3568          jsr       _Get8HexDigits
00002158  584F      3569          addq.w    #4,A7
0000215A  2600      3570          move.l    D0,D3
                    3571   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
0000215C  2803      3572          move.l    D3,D4
                    3573   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
0000215E  2003      3574          move.l    D3,D0
00002160  C0BC 0000 3575          and.l     #1,D0
00002164  0001      
00002166  0C80 0000 3576          cmp.l     #1,D0
0000216A  0001      
0000216C  660E      3577          bne.s     SetBreakPoint_9
                    3578   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
0000216E  4879 0000 3579          pea       @m68kde~2_81.L
00002172  465A      
00002174  4E92      3580          jsr       (A2)
00002176  584F      3581          addq.w    #4,A7
                    3582   ; return ;
00002178  6000 00A2 3583          bra       SetBreakPoint_15
                    3584   SetBreakPoint_9:
                    3585   ; }
                    3586   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
0000217C  0C83 0000 3587          cmp.l     #32768,D3
00002180  8000      
00002182  640E      3588          bhs.s     SetBreakPoint_11
                    3589   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002184  4879 0000 3590          pea       @m68kde~2_82.L
00002188  4690      
0000218A  4E92      3591          jsr       (A2)
0000218C  584F      3592          addq.w    #4,A7
                    3593   ; return ;
0000218E  6000 008C 3594          bra       SetBreakPoint_15
                    3595   SetBreakPoint_11:
                    3596   ; }
                    3597   ; // search for first free bp or existing same BP
                    3598   ; for(i = 0; i < 8; i++)  {
00002192  4282      3599          clr.l     D2
                    3600   SetBreakPoint_13:
00002194  0C82 0000 3601          cmp.l     #8,D2
00002198  0008      
0000219A  6C00 0080 3602          bge       SetBreakPoint_15
                    3603   ; if(BreakPointAddress[i] == BPAddress)   {
0000219E  2002      3604          move.l    D2,D0
000021A0  E588      3605          lsl.l     #2,D0
000021A2  41F9 0B00 3606          lea       _BreakPointAddress.L,A0
000021A6  012E      
000021A8  B6B0 0800 3607          cmp.l     0(A0,D0.L),D3
000021AC  6610      3608          bne.s     SetBreakPoint_16
                    3609   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
000021AE  2F03      3610          move.l    D3,-(A7)
000021B0  4879 0000 3611          pea       @m68kde~2_83.L
000021B4  46D8      
000021B6  4E92      3612          jsr       (A2)
000021B8  504F      3613          addq.w    #8,A7
                    3614   ; return ;
000021BA  6000 0060 3615          bra       SetBreakPoint_15
                    3616   SetBreakPoint_16:
                    3617   ; }
                    3618   ; if(BreakPointSetOrCleared[i] == 0) {
000021BE  2002      3619          move.l    D2,D0
000021C0  E588      3620          lsl.l     #2,D0
000021C2  2033 0800 3621          move.l    0(A3,D0.L),D0
000021C6  6600 004E 3622          bne       SetBreakPoint_18
                    3623   ; // set BP here
                    3624   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
000021CA  2002      3625          move.l    D2,D0
000021CC  E588      3626          lsl.l     #2,D0
000021CE  27BC 0000 3627          move.l    #1,0(A3,D0.L)
000021D2  0001 0800 
                    3628   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
000021D6  2044      3629          move.l    D4,A0
000021D8  2002      3630          move.l    D2,D0
000021DA  E388      3631          lsl.l     #1,D0
000021DC  43F9 0B00 3632          lea       _BreakPointInstruction.L,A1
000021E0  014E      
000021E2  3390 0800 3633          move.w    (A0),0(A1,D0.L)
                    3634   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
000021E6  2F04      3635          move.l    D4,-(A7)
000021E8  4879 0000 3636          pea       @m68kde~2_84.L
000021EC  4710      
000021EE  4E92      3637          jsr       (A2)
000021F0  504F      3638          addq.w    #8,A7
                    3639   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000021F2  2044      3640          move.l    D4,A0
000021F4  30BC 4E4E 3641          move.w    #20046,(A0)
                    3642   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000021F8  2002      3643          move.l    D2,D0
000021FA  E588      3644          lsl.l     #2,D0
000021FC  41F9 0B00 3645          lea       _BreakPointAddress.L,A0
00002200  012E      
00002202  2183 0800 3646          move.l    D3,0(A0,D0.L)
                    3647   ; printf("\r\n") ;
00002206  4879 0000 3648          pea       @m68kde~2_1.L
0000220A  3E44      
0000220C  4E92      3649          jsr       (A2)
0000220E  584F      3650          addq.w    #4,A7
                    3651   ; BreakPointDisplay() ;       // display the break points
00002210  4EB8 1CD4 3652          jsr       _BreakPointDisplay
                    3653   ; return ;
00002214  6006      3654          bra.s     SetBreakPoint_15
                    3655   SetBreakPoint_18:
00002216  5282      3656          addq.l    #1,D2
00002218  6000 FF7A 3657          bra       SetBreakPoint_13
                    3658   SetBreakPoint_15:
0000221C  4CDF 0C1C 3659          movem.l   (A7)+,D2/D3/D4/A2/A3
00002220  4E5E      3660          unlk      A6
00002222  4E75      3661          rts
                    3662   ; }
                    3663   ; }
                    3664   ; }
                    3665   ; void SetWatchPoint(void)
                    3666   ; {
                    3667   _SetWatchPoint:
00002224  4E56 FFF8 3668          link      A6,#-8
00002228  48E7 3030 3669          movem.l   D2/D3/A2/A3,-(A7)
0000222C  45F9 0000 3670          lea       _printf.L,A2
00002230  3532      
00002232  47F9 0B00 3671          lea       _WatchPointSetOrCleared.L,A3
00002236  01A2      
                    3672   ; int i ;
                    3673   ; int WPNumber;
                    3674   ; int WPAddress;
                    3675   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3676   ; // see if any free break points
                    3677   ; for(i = 0; i < 8; i ++) {
00002238  4282      3678          clr.l     D2
                    3679   SetWatchPoint_1:
0000223A  0C82 0000 3680          cmp.l     #8,D2
0000223E  0008      
00002240  6C10      3681          bge.s     SetWatchPoint_3
                    3682   ; if( WatchPointSetOrCleared[i] == 0)
00002242  2002      3683          move.l    D2,D0
00002244  E588      3684          lsl.l     #2,D0
00002246  2033 0800 3685          move.l    0(A3,D0.L),D0
0000224A  6602      3686          bne.s     SetWatchPoint_4
                    3687   ; break ;         // if spare WP found allow user to set it
0000224C  6004      3688          bra.s     SetWatchPoint_3
                    3689   SetWatchPoint_4:
0000224E  5282      3690          addq.l    #1,D2
00002250  60E8      3691          bra       SetWatchPoint_1
                    3692   SetWatchPoint_3:
                    3693   ; }
                    3694   ; if(i == 8) {
00002252  0C82 0000 3695          cmp.l     #8,D2
00002256  0008      
00002258  660E      3696          bne.s     SetWatchPoint_6
                    3697   ; printf("\r\nNo FREE Watch Points.....") ;
0000225A  4879 0000 3698          pea       @m68kde~2_85.L
0000225E  4736      
00002260  4E92      3699          jsr       (A2)
00002262  584F      3700          addq.w    #4,A7
                    3701   ; return ;
00002264  6000 008C 3702          bra       SetWatchPoint_11
                    3703   SetWatchPoint_6:
                    3704   ; }
                    3705   ; printf("\r\nWatch Point Address: ") ;
00002268  4879 0000 3706          pea       @m68kde~2_86.L
0000226C  4752      
0000226E  4E92      3707          jsr       (A2)
00002270  584F      3708          addq.w    #4,A7
                    3709   ; WPAddress = Get8HexDigits(0) ;
00002272  42A7      3710          clr.l     -(A7)
00002274  4EB8 0CA4 3711          jsr       _Get8HexDigits
00002278  584F      3712          addq.w    #4,A7
0000227A  2600      3713          move.l    D0,D3
                    3714   ; // search for first free wp or existing same wp
                    3715   ; for(i = 0; i < 8; i++)  {
0000227C  4282      3716          clr.l     D2
                    3717   SetWatchPoint_9:
0000227E  0C82 0000 3718          cmp.l     #8,D2
00002282  0008      
00002284  6C00 006C 3719          bge       SetWatchPoint_11
                    3720   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002288  2002      3721          move.l    D2,D0
0000228A  E588      3722          lsl.l     #2,D0
0000228C  41F9 0B00 3723          lea       _WatchPointAddress.L,A0
00002290  0182      
00002292  B6B0 0800 3724          cmp.l     0(A0,D0.L),D3
00002296  6614      3725          bne.s     SetWatchPoint_12
00002298  4A83      3726          tst.l     D3
0000229A  6710      3727          beq.s     SetWatchPoint_12
                    3728   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
0000229C  2F03      3729          move.l    D3,-(A7)
0000229E  4879 0000 3730          pea       @m68kde~2_87.L
000022A2  476A      
000022A4  4E92      3731          jsr       (A2)
000022A6  504F      3732          addq.w    #8,A7
                    3733   ; return ;
000022A8  6000 0048 3734          bra       SetWatchPoint_11
                    3735   SetWatchPoint_12:
                    3736   ; }
                    3737   ; if(WatchPointSetOrCleared[i] == 0) {
000022AC  2002      3738          move.l    D2,D0
000022AE  E588      3739          lsl.l     #2,D0
000022B0  2033 0800 3740          move.l    0(A3,D0.L),D0
000022B4  6600 0038 3741          bne       SetWatchPoint_14
                    3742   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
000022B8  2002      3743          move.l    D2,D0
000022BA  E588      3744          lsl.l     #2,D0
000022BC  27BC 0000 3745          move.l    #1,0(A3,D0.L)
000022C0  0001 0800 
                    3746   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
000022C4  2F03      3747          move.l    D3,-(A7)
000022C6  4879 0000 3748          pea       @m68kde~2_88.L
000022CA  47A0      
000022CC  4E92      3749          jsr       (A2)
000022CE  504F      3750          addq.w    #8,A7
                    3751   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
000022D0  2002      3752          move.l    D2,D0
000022D2  E588      3753          lsl.l     #2,D0
000022D4  41F9 0B00 3754          lea       _WatchPointAddress.L,A0
000022D8  0182      
000022DA  2183 0800 3755          move.l    D3,0(A0,D0.L)
                    3756   ; printf("\r\n") ;
000022DE  4879 0000 3757          pea       @m68kde~2_1.L
000022E2  3E44      
000022E4  4E92      3758          jsr       (A2)
000022E6  584F      3759          addq.w    #4,A7
                    3760   ; WatchPointDisplay() ;       // display the break points
000022E8  4EB8 1DA8 3761          jsr       _WatchPointDisplay
                    3762   ; return ;
000022EC  6004      3763          bra.s     SetWatchPoint_11
                    3764   SetWatchPoint_14:
000022EE  5282      3765          addq.l    #1,D2
000022F0  608C      3766          bra       SetWatchPoint_9
                    3767   SetWatchPoint_11:
000022F2  4CDF 0C0C 3768          movem.l   (A7)+,D2/D3/A2/A3
000022F6  4E5E      3769          unlk      A6
000022F8  4E75      3770          rts
                    3771   ; }
                    3772   ; }
                    3773   ; }
                    3774   ; void HandleBreakPoint(void)
                    3775   ; {
                    3776   _HandleBreakPoint:
000022FA  4E56 FFFC 3777          link      A6,#-4
000022FE  48E7 0038 3778          movem.l   A2/A3/A4,-(A7)
00002302  45F9 0B00 3779          lea       _i.L,A2
00002306  00C4      
00002308  47F9 0000 3780          lea       _printf.L,A3
0000230C  3532      
0000230E  49F9 0B00 3781          lea       _PC.L,A4
00002312  0120      
                    3782   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3783   ; // now we have to put the break point back to run the instruction
                    3784   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3785   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002314  5594      3786          subq.l    #2,(A4)
                    3787   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002316  4879 0000 3788          pea       @m68kde~2_89.L
0000231A  47C6      
0000231C  4E93      3789          jsr       (A3)
0000231E  584F      3790          addq.w    #4,A7
                    3791   ; printf("\r\nSingle Step : [ON]") ;
00002320  4879 0000 3792          pea       @m68kde~2_90.L
00002324  47DA      
00002326  4E93      3793          jsr       (A3)
00002328  584F      3794          addq.w    #4,A7
                    3795   ; printf("\r\nBreakPoints : [Enabled]") ;
0000232A  4879 0000 3796          pea       @m68kde~2_91.L
0000232E  47F0      
00002330  4E93      3797          jsr       (A3)
00002332  584F      3798          addq.w    #4,A7
                    3799   ; // now clear the break point (put original instruction back)
                    3800   ; ProgramBreakPointAddress = PC ;
00002334  2D54 FFFC 3801          move.l    (A4),-4(A6)
                    3802   ; for(i = 0; i < 8; i ++) {
00002338  4292      3803          clr.l     (A2)
                    3804   HandleBreakPoint_1:
0000233A  2012      3805          move.l    (A2),D0
0000233C  0C80 0000 3806          cmp.l     #8,D0
00002340  0008      
00002342  6400 0056 3807          bhs       HandleBreakPoint_3
                    3808   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002346  2012      3809          move.l    (A2),D0
00002348  E588      3810          lsl.l     #2,D0
0000234A  41F9 0B00 3811          lea       _BreakPointAddress.L,A0
0000234E  012E      
00002350  2230 0800 3812          move.l    0(A0,D0.L),D1
00002354  B294      3813          cmp.l     (A4),D1
00002356  6600 003E 3814          bne       HandleBreakPoint_4
                    3815   ; BreakPointAddress[i] = 0 ;
0000235A  2012      3816          move.l    (A2),D0
0000235C  E588      3817          lsl.l     #2,D0
0000235E  41F9 0B00 3818          lea       _BreakPointAddress.L,A0
00002362  012E      
00002364  42B0 0800 3819          clr.l     0(A0,D0.L)
                    3820   ; BreakPointSetOrCleared[i] = 0 ;
00002368  2012      3821          move.l    (A2),D0
0000236A  E588      3822          lsl.l     #2,D0
0000236C  41F9 0B00 3823          lea       _BreakPointSetOrCleared.L,A0
00002370  015E      
00002372  42B0 0800 3824          clr.l     0(A0,D0.L)
                    3825   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002376  2012      3826          move.l    (A2),D0
00002378  E388      3827          lsl.l     #1,D0
0000237A  41F9 0B00 3828          lea       _BreakPointInstruction.L,A0
0000237E  014E      
00002380  226E FFFC 3829          move.l    -4(A6),A1
00002384  32B0 0800 3830          move.w    0(A0,D0.L),(A1)
                    3831   ; BreakPointInstruction[i] = 0 ;
00002388  2012      3832          move.l    (A2),D0
0000238A  E388      3833          lsl.l     #1,D0
0000238C  41F9 0B00 3834          lea       _BreakPointInstruction.L,A0
00002390  014E      
00002392  4270 0800 3835          clr.w     0(A0,D0.L)
                    3836   HandleBreakPoint_4:
00002396  5292      3837          addq.l    #1,(A2)
00002398  60A0      3838          bra       HandleBreakPoint_1
                    3839   HandleBreakPoint_3:
                    3840   ; }
                    3841   ; }
                    3842   ; DumpRegisters() ;
0000239A  4EB8 1526 3843          jsr       _DumpRegisters
                    3844   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000239E  4879 0000 3845          pea       @m68kde~2_53.L
000023A2  436C      
000023A4  4E93      3846          jsr       (A3)
000023A6  584F      3847          addq.w    #4,A7
                    3848   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
000023A8  4879 0000 3849          pea       @m68kde~2_92.L
000023AC  480A      
000023AE  4E93      3850          jsr       (A3)
000023B0  584F      3851          addq.w    #4,A7
                    3852   ; menu() ;
000023B2  4EB9 0000 3853          jsr       _menu
000023B6  25BE      
000023B8  4CDF 1C00 3854          movem.l   (A7)+,A2/A3/A4
000023BC  4E5E      3855          unlk      A6
000023BE  4E75      3856          rts
                    3857   ; }
                    3858   ; void UnknownCommand()
                    3859   ; {
                    3860   _UnknownCommand:
                    3861   ; printf("\r\nUnknown Command.....\r\n") ;
000023C0  4879 0000 3862          pea       @m68kde~2_93.L
000023C4  4832      
000023C6  4EB9 0000 3863          jsr       _printf
000023CA  3532      
000023CC  584F      3864          addq.w    #4,A7
                    3865   ; Help() ;
000023CE  4EB9 0000 3866          jsr       _Help
000023D2  24E4      
000023D4  4E75      3867          rts
                    3868   ; }
                    3869   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3870   ; void CallDebugMonitor(void)
                    3871   ; {
                    3872   _CallDebugMonitor:
                    3873   ; printf("\r\nProgram Ended (TRAP #15)....") ;
000023D6  4879 0000 3874          pea       @m68kde~2_94.L
000023DA  484C      
000023DC  4EB9 0000 3875          jsr       _printf
000023E0  3532      
000023E2  584F      3876          addq.w    #4,A7
                    3877   ; menu();
000023E4  4EB9 0000 3878          jsr       _menu
000023E8  25BE      
000023EA  4E75      3879          rts
                    3880   ; }
                    3881   ; void Breakpoint(void)
                    3882   ; {
                    3883   _Breakpoint:
000023EC  2F02      3884          move.l    D2,-(A7)
                    3885   ; char c;
                    3886   ; c = toupper(_getch());
000023EE  2F00      3887          move.l    D0,-(A7)
000023F0  4EB8 0B68 3888          jsr       __getch
000023F4  2200      3889          move.l    D0,D1
000023F6  201F      3890          move.l    (A7)+,D0
000023F8  2F01      3891          move.l    D1,-(A7)
000023FA  4EB9 0000 3892          jsr       _toupper
000023FE  3516      
00002400  584F      3893          addq.w    #4,A7
00002402  1400      3894          move.b    D0,D2
                    3895   ; if( c == (char)('D'))                                      // BreakPoint Display
00002404  0C02 0044 3896          cmp.b     #68,D2
00002408  6608      3897          bne.s     Breakpoint_1
                    3898   ; BreakPointDisplay() ;
0000240A  4EB8 1CD4 3899          jsr       _BreakPointDisplay
0000240E  6000 0054 3900          bra       Breakpoint_10
                    3901   Breakpoint_1:
                    3902   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00002412  0C02 004B 3903          cmp.b     #75,D2
00002416  6630      3904          bne.s     Breakpoint_3
                    3905   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002418  4879 0000 3906          pea       @m68kde~2_95.L
0000241C  486C      
0000241E  4EB9 0000 3907          jsr       _printf
00002422  3532      
00002424  584F      3908          addq.w    #4,A7
                    3909   ; c = toupper(_getch());
00002426  2F00      3910          move.l    D0,-(A7)
00002428  4EB8 0B68 3911          jsr       __getch
0000242C  2200      3912          move.l    D0,D1
0000242E  201F      3913          move.l    (A7)+,D0
00002430  2F01      3914          move.l    D1,-(A7)
00002432  4EB9 0000 3915          jsr       _toupper
00002436  3516      
00002438  584F      3916          addq.w    #4,A7
0000243A  1400      3917          move.b    D0,D2
                    3918   ; if(c == (char)('Y'))
0000243C  0C02 0059 3919          cmp.b     #89,D2
00002440  6604      3920          bne.s     Breakpoint_5
                    3921   ; KillAllBreakPoints() ;
00002442  4EB8 206C 3922          jsr       _KillAllBreakPoints
                    3923   Breakpoint_5:
00002446  601C      3924          bra.s     Breakpoint_10
                    3925   Breakpoint_3:
                    3926   ; }
                    3927   ; else if(c == (char)('S')) {
00002448  0C02 0053 3928          cmp.b     #83,D2
0000244C  6606      3929          bne.s     Breakpoint_7
                    3930   ; SetBreakPoint() ;
0000244E  4EB8 2104 3931          jsr       _SetBreakPoint
00002452  6010      3932          bra.s     Breakpoint_10
                    3933   Breakpoint_7:
                    3934   ; }
                    3935   ; else if(c == (char)('C')) {
00002454  0C02 0043 3936          cmp.b     #67,D2
00002458  6606      3937          bne.s     Breakpoint_9
                    3938   ; BreakPointClear() ;
0000245A  4EB8 1E54 3939          jsr       _BreakPointClear
0000245E  6004      3940          bra.s     Breakpoint_10
                    3941   Breakpoint_9:
                    3942   ; }
                    3943   ; else
                    3944   ; UnknownCommand() ;
00002460  4EB8 23C0 3945          jsr       _UnknownCommand
                    3946   Breakpoint_10:
00002464  241F      3947          move.l    (A7)+,D2
00002466  4E75      3948          rts
                    3949   ; }
                    3950   ; void Watchpoint(void)
                    3951   ; {
                    3952   _Watchpoint:
00002468  2F02      3953          move.l    D2,-(A7)
                    3954   ; char c;
                    3955   ; c = toupper(_getch());
0000246A  2F00      3956          move.l    D0,-(A7)
0000246C  4EB8 0B68 3957          jsr       __getch
00002470  2200      3958          move.l    D0,D1
00002472  201F      3959          move.l    (A7)+,D0
00002474  2F01      3960          move.l    D1,-(A7)
00002476  4EB9 0000 3961          jsr       _toupper
0000247A  3516      
0000247C  584F      3962          addq.w    #4,A7
0000247E  1400      3963          move.b    D0,D2
                    3964   ; if( c == (char)('D'))                                      // WatchPoint Display
00002480  0C02 0044 3965          cmp.b     #68,D2
00002484  6608      3966          bne.s     Watchpoint_1
                    3967   ; WatchPointDisplay() ;
00002486  4EB8 1DA8 3968          jsr       _WatchPointDisplay
0000248A  6000 0054 3969          bra       Watchpoint_10
                    3970   Watchpoint_1:
                    3971   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000248E  0C02 004B 3972          cmp.b     #75,D2
00002492  6630      3973          bne.s     Watchpoint_3
                    3974   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002494  4879 0000 3975          pea       @m68kde~2_96.L
00002498  488E      
0000249A  4EB9 0000 3976          jsr       _printf
0000249E  3532      
000024A0  584F      3977          addq.w    #4,A7
                    3978   ; c = toupper(_getch());
000024A2  2F00      3979          move.l    D0,-(A7)
000024A4  4EB8 0B68 3980          jsr       __getch
000024A8  2200      3981          move.l    D0,D1
000024AA  201F      3982          move.l    (A7)+,D0
000024AC  2F01      3983          move.l    D1,-(A7)
000024AE  4EB9 0000 3984          jsr       _toupper
000024B2  3516      
000024B4  584F      3985          addq.w    #4,A7
000024B6  1400      3986          move.b    D0,D2
                    3987   ; if(c == (char)('Y'))
000024B8  0C02 0059 3988          cmp.b     #89,D2
000024BC  6604      3989          bne.s     Watchpoint_5
                    3990   ; KillAllWatchPoints() ;
000024BE  4EB8 20D4 3991          jsr       _KillAllWatchPoints
                    3992   Watchpoint_5:
000024C2  601C      3993          bra.s     Watchpoint_10
                    3994   Watchpoint_3:
                    3995   ; }
                    3996   ; else if(c == (char)('S')) {
000024C4  0C02 0053 3997          cmp.b     #83,D2
000024C8  6606      3998          bne.s     Watchpoint_7
                    3999   ; SetWatchPoint() ;
000024CA  4EB8 2224 4000          jsr       _SetWatchPoint
000024CE  6010      4001          bra.s     Watchpoint_10
                    4002   Watchpoint_7:
                    4003   ; }
                    4004   ; else if(c == (char)('C')) {
000024D0  0C02 0043 4005          cmp.b     #67,D2
000024D4  6606      4006          bne.s     Watchpoint_9
                    4007   ; WatchPointClear() ;
000024D6  4EB8 1F2E 4008          jsr       _WatchPointClear
000024DA  6004      4009          bra.s     Watchpoint_10
                    4010   Watchpoint_9:
                    4011   ; }
                    4012   ; else
                    4013   ; UnknownCommand() ;
000024DC  4EB8 23C0 4014          jsr       _UnknownCommand
                    4015   Watchpoint_10:
000024E0  241F      4016          move.l    (A7)+,D2
000024E2  4E75      4017          rts
                    4018   ; }
                    4019   ; void Help(void)
                    4020   ; {
                    4021   _Help:
000024E4  48E7 2020 4022          movem.l   D2/A2,-(A7)
000024E8  45F9 0000 4023          lea       _printf.L,A2
000024EC  3532      
                    4024   ; char *banner = "\r\n----------------------------------------------------------------" ;
000024EE  41F9 0000 4025          lea       @m68kde~2_97.L,A0
000024F2  48B0      
000024F4  2408      4026          move.l    A0,D2
                    4027   ; printf(banner) ;
000024F6  2F02      4028          move.l    D2,-(A7)
000024F8  4E92      4029          jsr       (A2)
000024FA  584F      4030          addq.w    #4,A7
                    4031   ; printf("\r\n  Debugger Command Summary") ;
000024FC  4879 0000 4032          pea       @m68kde~2_98.L
00002500  48F4      
00002502  4E92      4033          jsr       (A2)
00002504  584F      4034          addq.w    #4,A7
                    4035   ; printf(banner) ;
00002506  2F02      4036          move.l    D2,-(A7)
00002508  4E92      4037          jsr       (A2)
0000250A  584F      4038          addq.w    #4,A7
                    4039   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000250C  4879 0000 4040          pea       @m68kde~2_99.L
00002510  4912      
00002512  4E92      4041          jsr       (A2)
00002514  584F      4042          addq.w    #4,A7
                    4043   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002516  4879 0000 4044          pea       @m68kde~2_100.L
0000251A  4956      
0000251C  4E92      4045          jsr       (A2)
0000251E  584F      4046          addq.w    #4,A7
                    4047   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002520  4879 0000 4048          pea       @m68kde~2_101.L
00002524  498E      
00002526  4E92      4049          jsr       (A2)
00002528  584F      4050          addq.w    #4,A7
                    4051   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
0000252A  4879 0000 4052          pea       @m68kde~2_102.L
0000252E  49C8      
00002530  4E92      4053          jsr       (A2)
00002532  584F      4054          addq.w    #4,A7
                    4055   ; printf("\r\n  E            - Enter String into Memory") ;
00002534  4879 0000 4056          pea       @m68kde~2_103.L
00002538  49FA      
0000253A  4E92      4057          jsr       (A2)
0000253C  584F      4058          addq.w    #4,A7
                    4059   ; printf("\r\n  F            - Fill Memory with Data") ;
0000253E  4879 0000 4060          pea       @m68kde~2_104.L
00002542  4A26      
00002544  4E92      4061          jsr       (A2)
00002546  584F      4062          addq.w    #4,A7
                    4063   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002548  2F39 0B00 4064          move.l    _PC.L,-(A7)
0000254C  0120      
0000254E  4879 0000 4065          pea       @m68kde~2_105.L
00002552  4A50      
00002554  4E92      4066          jsr       (A2)
00002556  504F      4067          addq.w    #8,A7
                    4068   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002558  4879 0000 4069          pea       @m68kde~2_106.L
0000255C  4A8A      
0000255E  4E92      4070          jsr       (A2)
00002560  584F      4071          addq.w    #4,A7
                    4072   ; printf("\r\n  M            - Memory Examine and Change");
00002562  4879 0000 4073          pea       @m68kde~2_107.L
00002566  4AC2      
00002568  4E92      4074          jsr       (A2)
0000256A  584F      4075          addq.w    #4,A7
                    4076   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000256C  4879 0000 4077          pea       @m68kde~2_108.L
00002570  4AF0      
00002572  4E92      4078          jsr       (A2)
00002574  584F      4079          addq.w    #4,A7
                    4080   ; printf("\r\n  R            - Display 68000 Registers") ;
00002576  4879 0000 4081          pea       @m68kde~2_109.L
0000257A  4B2A      
0000257C  4E92      4082          jsr       (A2)
0000257E  584F      4083          addq.w    #4,A7
                    4084   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002580  4879 0000 4085          pea       @m68kde~2_110.L
00002584  4B56      
00002586  4E92      4086          jsr       (A2)
00002588  584F      4087          addq.w    #4,A7
                    4088   ; printf("\r\n  TM           - Test Memory") ;
0000258A  4879 0000 4089          pea       @m68kde~2_111.L
0000258E  4B88      
00002590  4E92      4090          jsr       (A2)
00002592  584F      4091          addq.w    #4,A7
                    4092   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002594  4879 0000 4093          pea       @m68kde~2_112.L
00002598  4BA8      
0000259A  4E92      4094          jsr       (A2)
0000259C  584F      4095          addq.w    #4,A7
                    4096   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000259E  4879 0000 4097          pea       @m68kde~2_113.L
000025A2  4BD0      
000025A4  4E92      4098          jsr       (A2)
000025A6  584F      4099          addq.w    #4,A7
                    4100   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
000025A8  4879 0000 4101          pea       @m68kde~2_114.L
000025AC  4C06      
000025AE  4E92      4102          jsr       (A2)
000025B0  584F      4103          addq.w    #4,A7
                    4104   ; printf(banner) ;
000025B2  2F02      4105          move.l    D2,-(A7)
000025B4  4E92      4106          jsr       (A2)
000025B6  584F      4107          addq.w    #4,A7
000025B8  4CDF 0404 4108          movem.l   (A7)+,D2/A2
000025BC  4E75      4109          rts
                    4110   ; }
                    4111   ; void menu(void)
                    4112   ; {
                    4113   _menu:
000025BE  48E7 303C 4114          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000025C2  45F9 0000 4115          lea       _printf.L,A2
000025C6  3532      
000025C8  47F9 0B00 4116          lea       _Trace.L,A3
000025CC  00D8      
000025CE  49F9 0B00 4117          lea       _x.L,A4
000025D2  00C8      
000025D4  4BF9 0B00 4118          lea       _SR.L,A5
000025D8  012C      
                    4119   ; char c,c1 ;
                    4120   ; while(1)    {
                    4121   menu_1:
                    4122   ; FlushKeyboard() ;               // dump unread characters from keyboard
000025DA  4EB8 0BA6 4123          jsr       _FlushKeyboard
                    4124   ; printf("\r\n#") ;
000025DE  4879 0000 4125          pea       @m68kde~2_115.L
000025E2  4C3E      
000025E4  4E92      4126          jsr       (A2)
000025E6  584F      4127          addq.w    #4,A7
                    4128   ; c = toupper(_getch());
000025E8  2F00      4129          move.l    D0,-(A7)
000025EA  4EB8 0B68 4130          jsr       __getch
000025EE  2200      4131          move.l    D0,D1
000025F0  201F      4132          move.l    (A7)+,D0
000025F2  2F01      4133          move.l    D1,-(A7)
000025F4  4EB9 0000 4134          jsr       _toupper
000025F8  3516      
000025FA  584F      4135          addq.w    #4,A7
000025FC  1400      4136          move.b    D0,D2
                    4137   ; if( c == (char)('L'))                  // load s record file
000025FE  0C02 004C 4138          cmp.b     #76,D2
00002602  6608      4139          bne.s     menu_4
                    4140   ; Load_SRecordFile() ;
00002604  4EB8 0E36 4141          jsr       _Load_SRecordFile
00002608  6000 021E 4142          bra       menu_46
                    4143   menu_4:
                    4144   ; else if( c == (char)('D'))             // dump memory
0000260C  0C02 0044 4145          cmp.b     #68,D2
00002610  6608      4146          bne.s     menu_6
                    4147   ; DumpMemory() ;
00002612  4EB8 0CCC 4148          jsr       _DumpMemory
00002616  6000 0210 4149          bra       menu_46
                    4150   menu_6:
                    4151   ; else if( c == (char)('E'))             // Enter String into memory
0000261A  0C02 0045 4152          cmp.b     #69,D2
0000261E  660A      4153          bne.s     menu_8
                    4154   ; EnterString() ;
00002620  4EB9 0000 4155          jsr       _EnterString
00002624  2970      
00002626  6000 0200 4156          bra       menu_46
                    4157   menu_8:
                    4158   ; else if( c == (char)('F'))             // fill memory
0000262A  0C02 0046 4159          cmp.b     #70,D2
0000262E  6608      4160          bne.s     menu_10
                    4161   ; FillMemory() ;
00002630  4EB8 0DBC 4162          jsr       _FillMemory
00002634  6000 01F2 4163          bra       menu_46
                    4164   menu_10:
                    4165   ; else if( c == (char)('G'))  {           // go user program
00002638  0C02 0047 4166          cmp.b     #71,D2
0000263C  6626      4167          bne.s     menu_12
                    4168   ; printf("\r\nProgram Running.....") ;
0000263E  4879 0000 4169          pea       @m68kde~2_116.L
00002642  4C42      
00002644  4E92      4170          jsr       (A2)
00002646  584F      4171          addq.w    #4,A7
                    4172   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002648  4879 0000 4173          pea       @m68kde~2_117.L
0000264C  4C5A      
0000264E  4E92      4174          jsr       (A2)
00002650  584F      4175          addq.w    #4,A7
                    4176   ; GoFlag = 1 ;
00002652  23FC 0000 4177          move.l    #1,_GoFlag.L
00002656  0001 0B00 
0000265A  00DC      
                    4178   ; go() ;
0000265C  4EB8 08B8 4179          jsr       _go
00002660  6000 01C6 4180          bra       menu_46
                    4181   menu_12:
                    4182   ; }
                    4183   ; else if( c == (char)('M'))           // memory examine and modify
00002664  0C02 004D 4184          cmp.b     #77,D2
00002668  6608      4185          bne.s     menu_14
                    4186   ; MemoryChange() ;
0000266A  4EB8 0FC4 4187          jsr       _MemoryChange
0000266E  6000 01B8 4188          bra       menu_46
                    4189   menu_14:
                    4190   ; else if( c == (char)('P'))            // Program Flash Chip
00002672  0C02 0050 4191          cmp.b     #80,D2
00002676  6608      4192          bne.s     menu_16
                    4193   ; ProgramFlashChip() ;
00002678  4EB8 1446 4194          jsr       _ProgramFlashChip
0000267C  6000 01AA 4195          bra       menu_46
                    4196   menu_16:
                    4197   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002680  0C02 0043 4198          cmp.b     #67,D2
00002684  6608      4199          bne.s     menu_18
                    4200   ; LoadFromFlashChip();
00002686  4EB8 14DA 4201          jsr       _LoadFromFlashChip
0000268A  6000 019C 4202          bra       menu_46
                    4203   menu_18:
                    4204   ; else if( c == (char)('R'))             // dump registers
0000268E  0C02 0052 4205          cmp.b     #82,D2
00002692  6608      4206          bne.s     menu_20
                    4207   ; DumpRegisters() ;
00002694  4EB8 1526 4208          jsr       _DumpRegisters
00002698  6000 018E 4209          bra       menu_46
                    4210   menu_20:
                    4211   ; else if( c == (char)('.'))           // change registers
0000269C  0C02 002E 4212          cmp.b     #46,D2
000026A0  6608      4213          bne.s     menu_22
                    4214   ; ChangeRegisters() ;
000026A2  4EB8 1A18 4215          jsr       _ChangeRegisters
000026A6  6000 0180 4216          bra       menu_46
                    4217   menu_22:
                    4218   ; else if( c == (char)('B'))              // breakpoint command
000026AA  0C02 0042 4219          cmp.b     #66,D2
000026AE  6608      4220          bne.s     menu_24
                    4221   ; Breakpoint() ;
000026B0  4EB8 23EC 4222          jsr       _Breakpoint
000026B4  6000 0172 4223          bra       menu_46
                    4224   menu_24:
                    4225   ; else if( c == (char)('T'))  {          // Test command
000026B8  0C02 0054 4226          cmp.b     #84,D2
000026BC  6600 0046 4227          bne       menu_26
                    4228   ; c1 = toupper(_getch()) ;
000026C0  2F00      4229          move.l    D0,-(A7)
000026C2  4EB8 0B68 4230          jsr       __getch
000026C6  2200      4231          move.l    D0,D1
000026C8  201F      4232          move.l    (A7)+,D0
000026CA  2F01      4233          move.l    D1,-(A7)
000026CC  4EB9 0000 4234          jsr       _toupper
000026D0  3516      
000026D2  584F      4235          addq.w    #4,A7
000026D4  1600      4236          move.b    D0,D3
                    4237   ; if(c1 == (char)('M'))                    // memory test
000026D6  0C03 004D 4238          cmp.b     #77,D3
000026DA  6608      4239          bne.s     menu_28
                    4240   ; MemoryTest() ;
000026DC  4EB9 0000 4241          jsr       _MemoryTest
000026E0  29C0      
000026E2  601C      4242          bra.s     menu_33
                    4243   menu_28:
                    4244   ; else if( c1 == (char)('S'))              // Switch Test command
000026E4  0C03 0053 4245          cmp.b     #83,D3
000026E8  6606      4246          bne.s     menu_30
                    4247   ; SwitchTest() ;
000026EA  4EB8 0AA4 4248          jsr       _SwitchTest
000026EE  6010      4249          bra.s     menu_33
                    4250   menu_30:
                    4251   ; else if( c1 == (char)('D'))              // display Test command
000026F0  0C03 0044 4252          cmp.b     #68,D3
000026F4  6606      4253          bne.s     menu_32
                    4254   ; TestLEDS() ;
000026F6  4EB8 0A50 4255          jsr       _TestLEDS
000026FA  6004      4256          bra.s     menu_33
                    4257   menu_32:
                    4258   ; else
                    4259   ; UnknownCommand() ;
000026FC  4EB8 23C0 4260          jsr       _UnknownCommand
                    4261   menu_33:
00002700  6000 0126 4262          bra       menu_46
                    4263   menu_26:
                    4264   ; }
                    4265   ; else if( c == (char)(' ')) {             // Next instruction command
00002704  0C02 0020 4266          cmp.b     #32,D2
00002708  6636      4267          bne.s     menu_34
                    4268   ; DisableBreakPoints() ;
0000270A  4EB8 1FD0 4269          jsr       _DisableBreakPoints
                    4270   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
0000270E  2013      4271          move.l    (A3),D0
00002710  0C80 0000 4272          cmp.l     #1,D0
00002714  0001      
00002716  661A      4273          bne.s     menu_36
00002718  2039 0B00 4274          move.l    _GoFlag.L,D0
0000271C  00DC      
0000271E  0C80 0000 4275          cmp.l     #1,D0
00002722  0001      
00002724  660C      4276          bne.s     menu_36
                    4277   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002726  13FC 0001 4278          move.b    #1,4194314
0000272A  0040 000A 
                    4279   ; return ;
0000272E  6000 00FC 4280          bra       menu_38
                    4281   menu_36:
                    4282   ; }
                    4283   ; else
                    4284   ; printf("\r\nError: Press 'G' first to start program") ;
00002732  4879 0000 4285          pea       @m68kde~2_118.L
00002736  4C88      
00002738  4E92      4286          jsr       (A2)
0000273A  584F      4287          addq.w    #4,A7
0000273C  6000 00EA 4288          bra       menu_46
                    4289   menu_34:
                    4290   ; }
                    4291   ; else if( c == (char)('S')) {             // single step
00002740  0C02 0053 4292          cmp.b     #83,D2
00002744  6600 008C 4293          bne       menu_39
                    4294   ; if(Trace == 0) {
00002748  2013      4295          move.l    (A3),D0
0000274A  6600 0050 4296          bne       menu_41
                    4297   ; DisableBreakPoints() ;
0000274E  4EB8 1FD0 4298          jsr       _DisableBreakPoints
                    4299   ; printf("\r\nSingle Step  :[ON]") ;
00002752  4879 0000 4300          pea       @m68kde~2_119.L
00002756  4CB2      
00002758  4E92      4301          jsr       (A2)
0000275A  584F      4302          addq.w    #4,A7
                    4303   ; printf("\r\nBreak Points :[Disabled]") ;
0000275C  4879 0000 4304          pea       @m68kde~2_52.L
00002760  4350      
00002762  4E92      4305          jsr       (A2)
00002764  584F      4306          addq.w    #4,A7
                    4307   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002766  0055 8000 4308          or.w      #32768,(A5)
                    4309   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000276A  2F39 0B00 4310          move.l    _PC.L,-(A7)
0000276E  0120      
00002770  4879 0000 4311          pea       @m68kde~2_120.L
00002774  4CC8      
00002776  4E92      4312          jsr       (A2)
00002778  504F      4313          addq.w    #8,A7
                    4314   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000277A  4879 0000 4315          pea       @m68kde~2_121.L
0000277E  4CFC      
00002780  4E92      4316          jsr       (A2)
00002782  584F      4317          addq.w    #4,A7
                    4318   ; DumpRegisters() ;
00002784  4EB8 1526 4319          jsr       _DumpRegisters
                    4320   ; Trace = 1;
00002788  26BC 0000 4321          move.l    #1,(A3)
0000278C  0001      
                    4322   ; TraceException = 1;
0000278E  13FC 0001 4323          move.b    #1,4194314
00002792  0040 000A 
                    4324   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002796  28B8 0074 4325          move.l    116,(A4)
0000279A  6032      4326          bra.s     menu_42
                    4327   menu_41:
                    4328   ; }
                    4329   ; else {
                    4330   ; Trace = 0 ;
0000279C  4293      4331          clr.l     (A3)
                    4332   ; TraceException = 0 ;
0000279E  4239 0040 4333          clr.b     4194314
000027A2  000A      
                    4334   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000027A4  28B8 0074 4335          move.l    116,(A4)
                    4336   ; EnableBreakPoints() ;
000027A8  4EB8 2024 4337          jsr       _EnableBreakPoints
                    4338   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000027AC  0255 7FFF 4339          and.w     #32767,(A5)
                    4340   ; printf("\r\nSingle Step : [OFF]") ;
000027B0  4879 0000 4341          pea       @m68kde~2_122.L
000027B4  4D20      
000027B6  4E92      4342          jsr       (A2)
000027B8  584F      4343          addq.w    #4,A7
                    4344   ; printf("\r\nBreak Points :[Enabled]") ;
000027BA  4879 0000 4345          pea       @m68kde~2_123.L
000027BE  4D36      
000027C0  4E92      4346          jsr       (A2)
000027C2  584F      4347          addq.w    #4,A7
                    4348   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000027C4  4879 0000 4349          pea       @m68kde~2_124.L
000027C8  4D50      
000027CA  4E92      4350          jsr       (A2)
000027CC  584F      4351          addq.w    #4,A7
                    4352   menu_42:
000027CE  6000 0058 4353          bra       menu_46
                    4354   menu_39:
                    4355   ; }
                    4356   ; }
                    4357   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000027D2  0C02 001B 4358          cmp.b     #27,D2
000027D6  6600 0040 4359          bne       menu_43
                    4360   ; Trace = 0;
000027DA  4293      4361          clr.l     (A3)
                    4362   ; TraceException = 0;
000027DC  4239 0040 4363          clr.b     4194314
000027E0  000A      
                    4364   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000027E2  28B8 0074 4365          move.l    116,(A4)
                    4366   ; EnableBreakPoints() ;
000027E6  4EB8 2024 4367          jsr       _EnableBreakPoints
                    4368   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000027EA  0255 7FFF 4369          and.w     #32767,(A5)
                    4370   ; printf("\r\nSingle Step  :[OFF]") ;
000027EE  4879 0000 4371          pea       @m68kde~2_125.L
000027F2  4D7A      
000027F4  4E92      4372          jsr       (A2)
000027F6  584F      4373          addq.w    #4,A7
                    4374   ; printf("\r\nBreak Points :[Enabled]");
000027F8  4879 0000 4375          pea       @m68kde~2_123.L
000027FC  4D36      
000027FE  4E92      4376          jsr       (A2)
00002800  584F      4377          addq.w    #4,A7
                    4378   ; printf("\r\nProgram Running.....") ;
00002802  4879 0000 4379          pea       @m68kde~2_116.L
00002806  4C42      
00002808  4E92      4380          jsr       (A2)
0000280A  584F      4381          addq.w    #4,A7
                    4382   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000280C  4879 0000 4383          pea       @m68kde~2_117.L
00002810  4C5A      
00002812  4E92      4384          jsr       (A2)
00002814  584F      4385          addq.w    #4,A7
                    4386   ; return ;
00002816  6014      4387          bra.s     menu_38
                    4388   menu_43:
                    4389   ; }
                    4390   ; else if( c == (char)('W'))              // Watchpoint command
00002818  0C02 0057 4391          cmp.b     #87,D2
0000281C  6606      4392          bne.s     menu_45
                    4393   ; Watchpoint() ;
0000281E  4EB8 2468 4394          jsr       _Watchpoint
00002822  6004      4395          bra.s     menu_46
                    4396   menu_45:
                    4397   ; else
                    4398   ; UnknownCommand() ;
00002824  4EB8 23C0 4399          jsr       _UnknownCommand
                    4400   menu_46:
00002828  6000 FDB0 4401          bra       menu_1
                    4402   menu_38:
0000282C  4CDF 3C0C 4403          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002830  4E75      4404          rts
                    4405   ; }
                    4406   ; }
                    4407   ; void PrintErrorMessageandAbort(char *string) {
                    4408   _PrintErrorMessageandAbort:
00002832  4E56 0000 4409          link      A6,#0
                    4410   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002836  4879 0000 4411          pea       @m68kde~2_126.L
0000283A  4D90      
0000283C  4EB9 0000 4412          jsr       _printf
00002840  3532      
00002842  584F      4413          addq.w    #4,A7
                    4414   ; printf("%s\r\n", string) ;
00002844  2F2E 0008 4415          move.l    8(A6),-(A7)
00002848  4879 0000 4416          pea       @m68kde~2_127.L
0000284C  4DAC      
0000284E  4EB9 0000 4417          jsr       _printf
00002852  3532      
00002854  504F      4418          addq.w    #8,A7
                    4419   ; menu() ;
00002856  4EB8 25BE 4420          jsr       _menu
0000285A  4E5E      4421          unlk      A6
0000285C  4E75      4422          rts
                    4423   ; }
                    4424   ; void IRQMessage(int level) {
                    4425   _IRQMessage:
0000285E  4E56 0000 4426          link      A6,#0
                    4427   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002862  4879 0000 4428          pea       @m68kde~2_128.L
00002866  4DB2      
00002868  4EB9 0000 4429          jsr       _printf
0000286C  3532      
0000286E  584F      4430          addq.w    #4,A7
                    4431   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002870  2F2E 0008 4432          move.l    8(A6),-(A7)
00002874  4879 0000 4433          pea       @m68kde~2_129.L
00002878  4DCA      
0000287A  4EB9 0000 4434          jsr       _printf
0000287E  3532      
00002880  504F      4435          addq.w    #8,A7
                    4436   ; menu() ;
00002882  4EB8 25BE 4437          jsr       _menu
00002886  4E5E      4438          unlk      A6
00002888  4E75      4439          rts
                    4440   ; }
                    4441   ; void UnhandledIRQ1(void) {
                    4442   _UnhandledIRQ1:
                    4443   ; IRQMessage(1);
0000288A  4878 0001 4444          pea       1
0000288E  4EB8 285E 4445          jsr       _IRQMessage
00002892  584F      4446          addq.w    #4,A7
00002894  4E75      4447          rts
                    4448   ; }
                    4449   ; void UnhandledIRQ2(void) {
                    4450   _UnhandledIRQ2:
                    4451   ; IRQMessage(2);
00002896  4878 0002 4452          pea       2
0000289A  4EB8 285E 4453          jsr       _IRQMessage
0000289E  584F      4454          addq.w    #4,A7
000028A0  4E75      4455          rts
                    4456   ; }
                    4457   ; void UnhandledIRQ3(void){
                    4458   _UnhandledIRQ3:
                    4459   ; IRQMessage(3);
000028A2  4878 0003 4460          pea       3
000028A6  4EB8 285E 4461          jsr       _IRQMessage
000028AA  584F      4462          addq.w    #4,A7
000028AC  4E75      4463          rts
                    4464   ; }
                    4465   ; void UnhandledIRQ4(void) {
                    4466   _UnhandledIRQ4:
                    4467   ; IRQMessage(4);
000028AE  4878 0004 4468          pea       4
000028B2  4EB8 285E 4469          jsr       _IRQMessage
000028B6  584F      4470          addq.w    #4,A7
000028B8  4E75      4471          rts
                    4472   ; }
                    4473   ; void UnhandledIRQ5(void) {
                    4474   _UnhandledIRQ5:
                    4475   ; IRQMessage(5);
000028BA  4878 0005 4476          pea       5
000028BE  4EB8 285E 4477          jsr       _IRQMessage
000028C2  584F      4478          addq.w    #4,A7
000028C4  4E75      4479          rts
                    4480   ; }
                    4481   ; void UnhandledIRQ6(void) {
                    4482   _UnhandledIRQ6:
                    4483   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000028C6  4879 0000 4484          pea       @m68kde~2_130.L
000028CA  4DEE      
000028CC  4EB8 2832 4485          jsr       _PrintErrorMessageandAbort
000028D0  584F      4486          addq.w    #4,A7
                    4487   ; menu() ;
000028D2  4EB8 25BE 4488          jsr       _menu
000028D6  4E75      4489          rts
                    4490   ; }
                    4491   ; void UnhandledIRQ7(void) {
                    4492   _UnhandledIRQ7:
                    4493   ; IRQMessage(7);
000028D8  4878 0007 4494          pea       7
000028DC  4EB8 285E 4495          jsr       _IRQMessage
000028E0  584F      4496          addq.w    #4,A7
000028E2  4E75      4497          rts
                    4498   ; }
                    4499   ; void UnhandledTrap(void) {
                    4500   _UnhandledTrap:
                    4501   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000028E4  4879 0000 4502          pea       @m68kde~2_131.L
000028E8  4E2E      
000028EA  4EB8 2832 4503          jsr       _PrintErrorMessageandAbort
000028EE  584F      4504          addq.w    #4,A7
000028F0  4E75      4505          rts
                    4506   ; }
                    4507   ; void BusError() {
                    4508   _BusError:
                    4509   ; PrintErrorMessageandAbort("BUS Error!") ;
000028F2  4879 0000 4510          pea       @m68kde~2_132.L
000028F6  4E44      
000028F8  4EB8 2832 4511          jsr       _PrintErrorMessageandAbort
000028FC  584F      4512          addq.w    #4,A7
000028FE  4E75      4513          rts
                    4514   ; }
                    4515   ; void AddressError() {
                    4516   _AddressError:
                    4517   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002900  4879 0000 4518          pea       @m68kde~2_133.L
00002904  4E50      
00002906  4EB8 2832 4519          jsr       _PrintErrorMessageandAbort
0000290A  584F      4520          addq.w    #4,A7
0000290C  4E75      4521          rts
                    4522   ; }
                    4523   ; void IllegalInstruction() {
                    4524   _IllegalInstruction:
                    4525   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
0000290E  4879 0000 4526          pea       @m68kde~2_134.L
00002912  4E60      
00002914  4EB8 2832 4527          jsr       _PrintErrorMessageandAbort
00002918  584F      4528          addq.w    #4,A7
0000291A  4E75      4529          rts
                    4530   ; }
                    4531   ; void Dividebyzero() {
                    4532   _Dividebyzero:
                    4533   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
0000291C  4879 0000 4534          pea       @m68kde~2_135.L
00002920  4E74      
00002922  4EB8 2832 4535          jsr       _PrintErrorMessageandAbort
00002926  584F      4536          addq.w    #4,A7
00002928  4E75      4537          rts
                    4538   ; }
                    4539   ; void Check() {
                    4540   _Check:
                    4541   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000292A  4879 0000 4542          pea       @m68kde~2_136.L
0000292E  4E84      
00002930  4EB8 2832 4543          jsr       _PrintErrorMessageandAbort
00002934  584F      4544          addq.w    #4,A7
00002936  4E75      4545          rts
                    4546   ; }
                    4547   ; void Trapv() {
                    4548   _Trapv:
                    4549   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002938  4879 0000 4550          pea       @m68kde~2_137.L
0000293C  4E96      
0000293E  4EB8 2832 4551          jsr       _PrintErrorMessageandAbort
00002942  584F      4552          addq.w    #4,A7
00002944  4E75      4553          rts
                    4554   ; }
                    4555   ; void PrivError() {
                    4556   _PrivError:
                    4557   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002946  4879 0000 4558          pea       @m68kde~2_138.L
0000294A  4EA8      
0000294C  4EB8 2832 4559          jsr       _PrintErrorMessageandAbort
00002950  584F      4560          addq.w    #4,A7
00002952  4E75      4561          rts
                    4562   ; }
                    4563   ; void UnitIRQ() {
                    4564   _UnitIRQ:
                    4565   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002954  4879 0000 4566          pea       @m68kde~2_139.L
00002958  4EBC      
0000295A  4EB8 2832 4567          jsr       _PrintErrorMessageandAbort
0000295E  584F      4568          addq.w    #4,A7
00002960  4E75      4569          rts
                    4570   ; }
                    4571   ; void Spurious() {
                    4572   _Spurious:
                    4573   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002962  4879 0000 4574          pea       @m68kde~2_140.L
00002966  4ECE      
00002968  4EB8 2832 4575          jsr       _PrintErrorMessageandAbort
0000296C  584F      4576          addq.w    #4,A7
0000296E  4E75      4577          rts
                    4578   ; }
                    4579   ; void EnterString(void)
                    4580   ; {
                    4581   _EnterString:
00002970  4E56 FFFC 4582          link      A6,#-4
00002974  2F02      4583          move.l    D2,-(A7)
                    4584   ; unsigned char *Start;
                    4585   ; unsigned char c;
                    4586   ; printf("\r\nStart Address in Memory: ") ;
00002976  4879 0000 4587          pea       @m68kde~2_141.L
0000297A  4EDC      
0000297C  4EB9 0000 4588          jsr       _printf
00002980  3532      
00002982  584F      4589          addq.w    #4,A7
                    4590   ; Start = Get8HexDigits(0) ;
00002984  42A7      4591          clr.l     -(A7)
00002986  4EB8 0CA4 4592          jsr       _Get8HexDigits
0000298A  584F      4593          addq.w    #4,A7
0000298C  2400      4594          move.l    D0,D2
                    4595   ; printf("\r\nEnter String (ESC to end) :") ;
0000298E  4879 0000 4596          pea       @m68kde~2_142.L
00002992  4EF8      
00002994  4EB9 0000 4597          jsr       _printf
00002998  3532      
0000299A  584F      4598          addq.w    #4,A7
                    4599   ; while((c = getchar()) != 0x1b)
                    4600   EnterString_1:
0000299C  4EB9 0000 4601          jsr       _getch
000029A0  347A      
000029A2  1D40 FFFF 4602          move.b    D0,-1(A6)
000029A6  0C00 001B 4603          cmp.b     #27,D0
000029AA  670A      4604          beq.s     EnterString_3
                    4605   ; *Start++ = c ;
000029AC  2042      4606          move.l    D2,A0
000029AE  5282      4607          addq.l    #1,D2
000029B0  10AE FFFF 4608          move.b    -1(A6),(A0)
000029B4  60E6      4609          bra       EnterString_1
                    4610   EnterString_3:
                    4611   ; *Start = 0x00;  // terminate with a null
000029B6  2042      4612          move.l    D2,A0
000029B8  4210      4613          clr.b     (A0)
000029BA  241F      4614          move.l    (A7)+,D2
000029BC  4E5E      4615          unlk      A6
000029BE  4E75      4616          rts
                    4617   ; }
                    4618   ; void MemoryTest(void)
                    4619   ; {
                    4620   _MemoryTest:
000029C0  4E56 FFE8 4621          link      A6,#-24
000029C4  48E7 3F3C 4622          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000029C8  45F9 0000 4623          lea       _printf.L,A2
000029CC  3532      
000029CE  4BF9 0000 4624          lea       _getch.L,A5
000029D2  347A      
                    4625   ; unsigned char * RamWriter;
                    4626   ; unsigned char * start_address;
                    4627   ; unsigned char * end_address;
                    4628   ; unsigned int test_type;
                    4629   ; unsigned int user_data = 0;
000029D4  4283      4630          clr.l     D3
                    4631   ; unsigned char * current_address;
                    4632   ; unsigned char *  intermediate_address;
                    4633   ; int address_increment;
                    4634   ; unsigned int read_write_test;
                    4635   ; int mem_error_flag;
                    4636   ; int valid_start_address_flag = 0;
000029D6  42AE FFF0 4637          clr.l     -16(A6)
                    4638   ; int valid_end_address_flag = 0;
000029DA  42AE FFF4 4639          clr.l     -12(A6)
                    4640   ; int valid_user_data_flag = 0;
000029DE  42AE FFF8 4641          clr.l     -8(A6)
                    4642   ; int memory_type;
                    4643   ; //-----------------------Common Section-----------------------
                    4644   ; printf("\r\nWhich Memory do you want to test? Enter 0 for DRAM or 1 for SRAM");
000029E2  4879 0000 4645          pea       @m68kde~2_143.L
000029E6  4F16      
000029E8  4E92      4646          jsr       (A2)
000029EA  584F      4647          addq.w    #4,A7
                    4648   ; memory_type = getchar() - '0';
000029EC  4E95      4649          jsr       (A5)
000029EE  0480 0000 4650          sub.l     #48,D0
000029F2  0030      
000029F4  2D40 FFFC 4651          move.l    D0,-4(A6)
                    4652   ; printf("\r\nWhich test do you want to perform? Enter '0' for Read or '1' for Write: "); //prompt user for read or write test
000029F8  4879 0000 4653          pea       @m68kde~2_144.L
000029FC  4F5A      
000029FE  4E92      4654          jsr       (A2)
00002A00  584F      4655          addq.w    #4,A7
                    4656   ; read_write_test = getchar() - '0';
00002A02  4E95      4657          jsr       (A5)
00002A04  0480 0000 4658          sub.l     #48,D0
00002A08  0030      
00002A0A  2840      4659          move.l    D0,A4
                    4660   ; while(read_write_test < 0 | read_write_test > 1){
                    4661   MemoryTest_1:
00002A0C  200C      4662          move.l    A4,D0
00002A0E  0C80 0000 4663          cmp.l     #0,D0
00002A12  0000      
00002A14  6404      4664          bhs.s     MemoryTest_4
00002A16  7001      4665          moveq     #1,D0
00002A18  6002      4666          bra.s     MemoryTest_5
                    4667   MemoryTest_4:
00002A1A  4280      4668          clr.l     D0
                    4669   MemoryTest_5:
00002A1C  220C      4670          move.l    A4,D1
00002A1E  0C81 0000 4671          cmp.l     #1,D1
00002A22  0001      
00002A24  6304      4672          bls.s     MemoryTest_6
00002A26  7201      4673          moveq     #1,D1
00002A28  6002      4674          bra.s     MemoryTest_7
                    4675   MemoryTest_6:
00002A2A  4281      4676          clr.l     D1
                    4677   MemoryTest_7:
00002A2C  8081      4678          or.l      D1,D0
00002A2E  6720      4679          beq.s     MemoryTest_3
                    4680   ; printf("\r\nError: Invalid Input"); //prompt user for read or write test
00002A30  4879 0000 4681          pea       @m68kde~2_145.L
00002A34  4FA6      
00002A36  4E92      4682          jsr       (A2)
00002A38  584F      4683          addq.w    #4,A7
                    4684   ; printf("\r\nWhich test do you want to perform? Enter '0' for Read or '1' for Write: "); //prompt user for read or write test
00002A3A  4879 0000 4685          pea       @m68kde~2_144.L
00002A3E  4F5A      
00002A40  4E92      4686          jsr       (A2)
00002A42  584F      4687          addq.w    #4,A7
                    4688   ; read_write_test = getchar() - '0';
00002A44  4E95      4689          jsr       (A5)
00002A46  0480 0000 4690          sub.l     #48,D0
00002A4A  0030      
00002A4C  2840      4691          move.l    D0,A4
00002A4E  60BC      4692          bra       MemoryTest_1
                    4693   MemoryTest_3:
                    4694   ; }
                    4695   ; printf("\r\nSpecify the memory test type. Input '0' for Bytes, '1' for Word, and '2' for Long Word: "); //prompt user for test type
00002A50  4879 0000 4696          pea       @m68kde~2_146.L
00002A54  4FBE      
00002A56  4E92      4697          jsr       (A2)
00002A58  584F      4698          addq.w    #4,A7
                    4699   ; test_type = getchar() - '0';
00002A5A  4E95      4700          jsr       (A5)
00002A5C  0480 0000 4701          sub.l     #48,D0
00002A60  0030      
00002A62  2800      4702          move.l    D0,D4
                    4703   ; while (test_type < 0 | test_type > 2) // check for valid input
                    4704   MemoryTest_8:
00002A64  0C84 0000 4705          cmp.l     #0,D4
00002A68  0000      
00002A6A  6404      4706          bhs.s     MemoryTest_11
00002A6C  7001      4707          moveq     #1,D0
00002A6E  6002      4708          bra.s     MemoryTest_12
                    4709   MemoryTest_11:
00002A70  4280      4710          clr.l     D0
                    4711   MemoryTest_12:
00002A72  0C84 0000 4712          cmp.l     #2,D4
00002A76  0002      
00002A78  6304      4713          bls.s     MemoryTest_13
00002A7A  7201      4714          moveq     #1,D1
00002A7C  6002      4715          bra.s     MemoryTest_14
                    4716   MemoryTest_13:
00002A7E  4281      4717          clr.l     D1
                    4718   MemoryTest_14:
00002A80  8081      4719          or.l      D1,D0
00002A82  6720      4720          beq.s     MemoryTest_10
                    4721   ; {
                    4722   ; printf("\r\nError: Invalid Input!");
00002A84  4879 0000 4723          pea       @m68kde~2_147.L
00002A88  501A      
00002A8A  4E92      4724          jsr       (A2)
00002A8C  584F      4725          addq.w    #4,A7
                    4726   ; printf("\r\nSpecify the memory test type. Input '0' for Bytes, '1' for Word, and '2' for Long Word: ");
00002A8E  4879 0000 4727          pea       @m68kde~2_146.L
00002A92  4FBE      
00002A94  4E92      4728          jsr       (A2)
00002A96  584F      4729          addq.w    #4,A7
                    4730   ; test_type = getchar() - '0';
00002A98  4E95      4731          jsr       (A5)
00002A9A  0480 0000 4732          sub.l     #48,D0
00002A9E  0030      
00002AA0  2800      4733          move.l    D0,D4
00002AA2  60C0      4734          bra       MemoryTest_8
                    4735   MemoryTest_10:
                    4736   ; }
                    4737   ; //***************Get Addresses***************
                    4738   ; while(!valid_start_address_flag){
                    4739   MemoryTest_15:
00002AA4  4AAE FFF0 4740          tst.l     -16(A6)
00002AA8  6600 00A0 4741          bne       MemoryTest_17
                    4742   ; printf("\r\nProvide a start address for your data: "); //SRAM
00002AAC  4879 0000 4743          pea       @m68kde~2_148.L
00002AB0  5032      
00002AB2  4E92      4744          jsr       (A2)
00002AB4  584F      4745          addq.w    #4,A7
                    4746   ; start_address = Get8HexDigits(0);
00002AB6  42A7      4747          clr.l     -(A7)
00002AB8  4EB8 0CA4 4748          jsr       _Get8HexDigits
00002ABC  584F      4749          addq.w    #4,A7
00002ABE  2A00      4750          move.l    D0,D5
                    4751   ; if(start_address < 0xF0000000 || start_address > 0xF003FFFF) //protect data leak into other memories
00002AC0  0C85 F000 4752          cmp.l     #-268435456,D5
00002AC4  0000      
00002AC6  6508      4753          blo.s     MemoryTest_20
00002AC8  0C85 F003 4754          cmp.l     #-268173313,D5
00002ACC  FFFF      
00002ACE  631A      4755          bls.s     MemoryTest_21
                    4756   MemoryTest_20:
                    4757   ; {
                    4758   ; if(memory_type == 1){
00002AD0  202E FFFC 4759          move.l    -4(A6),D0
00002AD4  0C80 0000 4760          cmp.l     #1,D0
00002AD8  0001      
00002ADA  660E      4761          bne.s     MemoryTest_21
                    4762   ; printf("\r\nError: Invalid address! Start address for SRAM cannot be less than F0000000 or greater than 0xF003FFFF");
00002ADC  4879 0000 4763          pea       @m68kde~2_149.L
00002AE0  505C      
00002AE2  4E92      4764          jsr       (A2)
00002AE4  584F      4765          addq.w    #4,A7
                    4766   ; continue;
00002AE6  6000 005E 4767          bra       MemoryTest_29
                    4768   MemoryTest_21:
                    4769   ; }
                    4770   ; }
                    4771   ; if(start_address < 0x09000000 || start_address > 0x097FFFFF) //DRAM
00002AEA  0C85 0900 4772          cmp.l     #150994944,D5
00002AEE  0000      
00002AF0  6508      4773          blo.s     MemoryTest_25
00002AF2  0C85 097F 4774          cmp.l     #159383551,D5
00002AF6  FFFF      
00002AF8  6314      4775          bls.s     MemoryTest_26
                    4776   MemoryTest_25:
                    4777   ; {
                    4778   ; if(memory_type == 0){
00002AFA  202E FFFC 4779          move.l    -4(A6),D0
00002AFE  660E      4780          bne.s     MemoryTest_26
                    4781   ; printf("\r\nError: Invalid address! Start address for DRAM cannot be less than 09000000 or greater than 097FFFFF");
00002B00  4879 0000 4782          pea       @m68kde~2_150.L
00002B04  50C6      
00002B06  4E92      4783          jsr       (A2)
00002B08  584F      4784          addq.w    #4,A7
                    4785   ; continue;
00002B0A  6000 003A 4786          bra       MemoryTest_29
                    4787   MemoryTest_26:
                    4788   ; }
                    4789   ; }
                    4790   ; if (test_type != 0) // check that we're aligned properly for start address for word and long word
00002B0E  4A84      4791          tst.l     D4
00002B10  672C      4792          beq.s     MemoryTest_28
                    4793   ; {
                    4794   ; if ((unsigned int)start_address % 2) // odd number address
00002B12  2F05      4795          move.l    D5,-(A7)
00002B14  4878 0002 4796          pea       2
00002B18  4EB9 0000 4797          jsr       ULDIV
00002B1C  3370      
00002B1E  202F 0004 4798          move.l    4(A7),D0
00002B22  504F      4799          addq.w    #8,A7
00002B24  4A80      4800          tst.l     D0
00002B26  670C      4801          beq.s     MemoryTest_30
                    4802   ; {
                    4803   ; printf("\r\nOdd address is not allowed for word or long word!");
00002B28  4879 0000 4804          pea       @m68kde~2_151.L
00002B2C  512E      
00002B2E  4E92      4805          jsr       (A2)
00002B30  584F      4806          addq.w    #4,A7
                    4807   ; continue;
00002B32  6012      4808          bra.s     MemoryTest_29
                    4809   MemoryTest_30:
                    4810   ; }
                    4811   ; else{
                    4812   ; valid_start_address_flag = 1;
00002B34  2D7C 0000 4813          move.l    #1,-16(A6)
00002B38  0001 FFF0 
00002B3C  6008      4814          bra.s     MemoryTest_29
                    4815   MemoryTest_28:
                    4816   ; }
                    4817   ; }
                    4818   ; else{
                    4819   ; valid_start_address_flag = 1;
00002B3E  2D7C 0000 4820          move.l    #1,-16(A6)
00002B42  0001 FFF0 
                    4821   MemoryTest_29:
00002B46  6000 FF5C 4822          bra       MemoryTest_15
                    4823   MemoryTest_17:
                    4824   ; }
                    4825   ; }
                    4826   ; printf("\r\nYou have entered %x for the start address", start_address);
00002B4A  2F05      4827          move.l    D5,-(A7)
00002B4C  4879 0000 4828          pea       @m68kde~2_152.L
00002B50  5162      
00002B52  4E92      4829          jsr       (A2)
00002B54  504F      4830          addq.w    #8,A7
                    4831   ; while(!valid_end_address_flag){
                    4832   MemoryTest_32:
00002B56  4AAE FFF4 4833          tst.l     -12(A6)
00002B5A  6600 00F0 4834          bne       MemoryTest_34
                    4835   ; printf("\r\nProvide an end address for your data: "); //protect data leak into other memories
00002B5E  4879 0000 4836          pea       @m68kde~2_153.L
00002B62  518E      
00002B64  4E92      4837          jsr       (A2)
00002B66  584F      4838          addq.w    #4,A7
                    4839   ; end_address = Get8HexDigits(0); //protect data leak into other memories
00002B68  42A7      4840          clr.l     -(A7)
00002B6A  4EB8 0CA4 4841          jsr       _Get8HexDigits
00002B6E  584F      4842          addq.w    #4,A7
00002B70  2C00      4843          move.l    D0,D6
                    4844   ; if(end_address <= start_address || end_address > 0xF0040000)
00002B72  BC85      4845          cmp.l     D5,D6
00002B74  6308      4846          bls.s     MemoryTest_37
00002B76  0C86 F004 4847          cmp.l     #-268173312,D6
00002B7A  0000      
00002B7C  631A      4848          bls.s     MemoryTest_38
                    4849   MemoryTest_37:
                    4850   ; {
                    4851   ; if(memory_type == 1)
00002B7E  202E FFFC 4852          move.l    -4(A6),D0
00002B82  0C80 0000 4853          cmp.l     #1,D0
00002B86  0001      
00002B88  660E      4854          bne.s     MemoryTest_38
                    4855   ; {
                    4856   ; printf("\r\nError: Invalid address! End address for SRAM should not be less than or equal to start address or greater than F003FFFF");
00002B8A  4879 0000 4857          pea       @m68kde~2_154.L
00002B8E  51B8      
00002B90  4E92      4858          jsr       (A2)
00002B92  584F      4859          addq.w    #4,A7
                    4860   ; continue;
00002B94  6000 00B2 4861          bra       MemoryTest_52
                    4862   MemoryTest_38:
                    4863   ; }
                    4864   ; }
                    4865   ; if(end_address <= start_address || end_address > 0x09800000)
00002B98  BC85      4866          cmp.l     D5,D6
00002B9A  6308      4867          bls.s     MemoryTest_42
00002B9C  0C86 0980 4868          cmp.l     #159383552,D6
00002BA0  0000      
00002BA2  6314      4869          bls.s     MemoryTest_43
                    4870   MemoryTest_42:
                    4871   ; {
                    4872   ; if(memory_type == 0)
00002BA4  202E FFFC 4873          move.l    -4(A6),D0
00002BA8  660E      4874          bne.s     MemoryTest_43
                    4875   ; {
                    4876   ; printf("\r\nError: Invalid address! End address for DRAM should not be less than or equal to start address or greater than 097FFFFF");
00002BAA  4879 0000 4877          pea       @m68kde~2_155.L
00002BAE  5232      
00002BB0  4E92      4878          jsr       (A2)
00002BB2  584F      4879          addq.w    #4,A7
                    4880   ; continue;
00002BB4  6000 0092 4881          bra       MemoryTest_52
                    4882   MemoryTest_43:
                    4883   ; }
                    4884   ; }
                    4885   ; if(test_type == 0){
00002BB8  4A84      4886          tst.l     D4
00002BBA  660C      4887          bne.s     MemoryTest_45
                    4888   ; valid_end_address_flag = 1;
00002BBC  2D7C 0000 4889          move.l    #1,-12(A6)
00002BC0  0001 FFF4 
00002BC4  6000 0082 4890          bra       MemoryTest_52
                    4891   MemoryTest_45:
                    4892   ; }
                    4893   ; else{
                    4894   ; if((unsigned int)end_address % 2) // check for odd number address
00002BC8  2F06      4895          move.l    D6,-(A7)
00002BCA  4878 0002 4896          pea       2
00002BCE  4EB9 0000 4897          jsr       ULDIV
00002BD2  3370      
00002BD4  202F 0004 4898          move.l    4(A7),D0
00002BD8  504F      4899          addq.w    #8,A7
00002BDA  4A80      4900          tst.l     D0
00002BDC  670E      4901          beq.s     MemoryTest_47
                    4902   ; {
                    4903   ; printf("\r\nOdd address is not allowed for word or long word!");
00002BDE  4879 0000 4904          pea       @m68kde~2_151.L
00002BE2  512E      
00002BE4  4E92      4905          jsr       (A2)
00002BE6  584F      4906          addq.w    #4,A7
                    4907   ; continue;
00002BE8  6000 005E 4908          bra       MemoryTest_52
                    4909   MemoryTest_47:
                    4910   ; }
                    4911   ; if(!((end_address - start_address) < 2) && test_type == 1){ //check if selections can fit data
00002BEC  2006      4912          move.l    D6,D0
00002BEE  9085      4913          sub.l     D5,D0
00002BF0  0C80 0000 4914          cmp.l     #2,D0
00002BF4  0002      
00002BF6  6D14      4915          blt.s     MemoryTest_49
00002BF8  0C84 0000 4916          cmp.l     #1,D4
00002BFC  0001      
00002BFE  660C      4917          bne.s     MemoryTest_49
                    4918   ; valid_end_address_flag = 1;
00002C00  2D7C 0000 4919          move.l    #1,-12(A6)
00002C04  0001 FFF4 
00002C08  6000 003E 4920          bra       MemoryTest_52
                    4921   MemoryTest_49:
                    4922   ; }
                    4923   ; else if(!((end_address - start_address) < 4) && test_type == 2){ //check if selections can fit data
00002C0C  2006      4924          move.l    D6,D0
00002C0E  9085      4925          sub.l     D5,D0
00002C10  0C80 0000 4926          cmp.l     #4,D0
00002C14  0004      
00002C16  6D12      4927          blt.s     MemoryTest_51
00002C18  0C84 0000 4928          cmp.l     #2,D4
00002C1C  0002      
00002C1E  660A      4929          bne.s     MemoryTest_51
                    4930   ; valid_end_address_flag = 1;
00002C20  2D7C 0000 4931          move.l    #1,-12(A6)
00002C24  0001 FFF4 
00002C28  601E      4932          bra.s     MemoryTest_52
                    4933   MemoryTest_51:
                    4934   ; }
                    4935   ; else{
                    4936   ; if(read_write_test){ //check if write operation can be performed
00002C2A  200C      4937          move.l    A4,D0
00002C2C  670C      4938          beq.s     MemoryTest_53
                    4939   ; printf("\r\nError: Data cannot be fitted in given address range");
00002C2E  4879 0000 4940          pea       @m68kde~2_156.L
00002C32  52AC      
00002C34  4E92      4941          jsr       (A2)
00002C36  584F      4942          addq.w    #4,A7
00002C38  600A      4943          bra.s     MemoryTest_54
                    4944   MemoryTest_53:
                    4945   ; }
                    4946   ; else{ //check if read operation can be performed
                    4947   ; printf("\r\nError: Not enough address range to read the data");
00002C3A  4879 0000 4948          pea       @m68kde~2_157.L
00002C3E  52E2      
00002C40  4E92      4949          jsr       (A2)
00002C42  584F      4950          addq.w    #4,A7
                    4951   MemoryTest_54:
                    4952   ; }
                    4953   ; continue;
00002C44  6000 0002 4954          bra       MemoryTest_52
                    4955   MemoryTest_52:
00002C48  6000 FF0C 4956          bra       MemoryTest_32
                    4957   MemoryTest_34:
                    4958   ; }
                    4959   ; }
                    4960   ; }
                    4961   ; switch (test_type) { // check if byte, word, or long word
00002C4C  0C84 0000 4962          cmp.l     #1,D4
00002C50  0001      
00002C52  6718      4963          beq.s     MemoryTest_58
00002C54  6206      4964          bhi.s     MemoryTest_61
00002C56  4A84      4965          tst.l     D4
00002C58  670C      4966          beq.s     MemoryTest_57
00002C5A  601C      4967          bra.s     MemoryTest_55
                    4968   MemoryTest_61:
00002C5C  0C84 0000 4969          cmp.l     #2,D4
00002C60  0002      
00002C62  670E      4970          beq.s     MemoryTest_59
00002C64  6012      4971          bra.s     MemoryTest_55
                    4972   MemoryTest_57:
                    4973   ; case 0:
                    4974   ; address_increment = 1; // byte
00002C66  367C 0001 4975          move.w    #1,A3
                    4976   ; break;
00002C6A  601A      4977          bra.s     MemoryTest_56
                    4978   MemoryTest_58:
                    4979   ; case 1:
                    4980   ; address_increment = 2; // word
00002C6C  367C 0002 4981          move.w    #2,A3
                    4982   ; break;
00002C70  6014      4983          bra.s     MemoryTest_56
                    4984   MemoryTest_59:
                    4985   ; case 2:
                    4986   ; address_increment = 4; // long word
00002C72  367C 0004 4987          move.w    #4,A3
                    4988   ; break;
00002C76  600E      4989          bra.s     MemoryTest_56
                    4990   MemoryTest_55:
                    4991   ; default:
                    4992   ; printf("\r\nWe are not supposed to get here! Default is increment by 1 byte.");
00002C78  4879 0000 4993          pea       @m68kde~2_158.L
00002C7C  5316      
00002C7E  4E92      4994          jsr       (A2)
00002C80  584F      4995          addq.w    #4,A7
                    4996   ; address_increment = 1; // should never get here: fall-through case: byte
00002C82  367C 0001 4997          move.w    #1,A3
                    4998   MemoryTest_56:
                    4999   ; }
                    5000   ; //-----------------------Read Section-----------------------
                    5001   ; if(!read_write_test){
00002C86  200C      5002          move.l    A4,D0
00002C88  6600 00C8 5003          bne       MemoryTest_62
                    5004   ; for(current_address = start_address; current_address < end_address; current_address += address_increment){
00002C8C  2405      5005          move.l    D5,D2
                    5006   MemoryTest_64:
00002C8E  B486      5007          cmp.l     D6,D2
00002C90  6400 00B2 5008          bhs       MemoryTest_66
                    5009   ; if(test_type == 0){ //read a byte
00002C94  4A84      5010          tst.l     D4
00002C96  661E      5011          bne.s     MemoryTest_67
                    5012   ; printf("\r\nData at location %x: %02x", current_address, *current_address);
00002C98  2042      5013          move.l    D2,A0
00002C9A  1210      5014          move.b    (A0),D1
00002C9C  C2BC 0000 5015          and.l     #255,D1
00002CA0  00FF      
00002CA2  2F01      5016          move.l    D1,-(A7)
00002CA4  2F02      5017          move.l    D2,-(A7)
00002CA6  4879 0000 5018          pea       @m68kde~2_159.L
00002CAA  535A      
00002CAC  4E92      5019          jsr       (A2)
00002CAE  DEFC 000C 5020          add.w     #12,A7
00002CB2  6000 008A 5021          bra       MemoryTest_70
                    5022   MemoryTest_67:
                    5023   ; }
                    5024   ; else if(test_type == 1){//read a word
00002CB6  0C84 0000 5025          cmp.l     #1,D4
00002CBA  0001      
00002CBC  662C      5026          bne.s     MemoryTest_69
                    5027   ; printf("\r\nWord at location %x: %02x%02x", current_address, *current_address, *(current_address+1));
00002CBE  2042      5028          move.l    D2,A0
00002CC0  1228 0001 5029          move.b    1(A0),D1
00002CC4  C2BC 0000 5030          and.l     #255,D1
00002CC8  00FF      
00002CCA  2F01      5031          move.l    D1,-(A7)
00002CCC  2042      5032          move.l    D2,A0
00002CCE  1210      5033          move.b    (A0),D1
00002CD0  C2BC 0000 5034          and.l     #255,D1
00002CD4  00FF      
00002CD6  2F01      5035          move.l    D1,-(A7)
00002CD8  2F02      5036          move.l    D2,-(A7)
00002CDA  4879 0000 5037          pea       @m68kde~2_160.L
00002CDE  5376      
00002CE0  4E92      5038          jsr       (A2)
00002CE2  DEFC 0010 5039          add.w     #16,A7
00002CE6  6000 0056 5040          bra       MemoryTest_70
                    5041   MemoryTest_69:
                    5042   ; }
                    5043   ; else{//read a long word
                    5044   ; if( (end_address - current_address) < 3){
00002CEA  2006      5045          move.l    D6,D0
00002CEC  9082      5046          sub.l     D2,D0
00002CEE  0C80 0000 5047          cmp.l     #3,D0
00002CF2  0003      
00002CF4  6C04      5048          bge.s     MemoryTest_71
                    5049   ; break;
00002CF6  6000 004C 5050          bra       MemoryTest_66
                    5051   MemoryTest_71:
                    5052   ; }
                    5053   ; printf("\r\nLong word at location %x: %02x%02x%02x%02x", current_address, *current_address, *(current_address+1), *(current_address+2), *(current_address+3));
00002CFA  2042      5054          move.l    D2,A0
00002CFC  1228 0003 5055          move.b    3(A0),D1
00002D00  C2BC 0000 5056          and.l     #255,D1
00002D04  00FF      
00002D06  2F01      5057          move.l    D1,-(A7)
00002D08  2042      5058          move.l    D2,A0
00002D0A  1228 0002 5059          move.b    2(A0),D1
00002D0E  C2BC 0000 5060          and.l     #255,D1
00002D12  00FF      
00002D14  2F01      5061          move.l    D1,-(A7)
00002D16  2042      5062          move.l    D2,A0
00002D18  1228 0001 5063          move.b    1(A0),D1
00002D1C  C2BC 0000 5064          and.l     #255,D1
00002D20  00FF      
00002D22  2F01      5065          move.l    D1,-(A7)
00002D24  2042      5066          move.l    D2,A0
00002D26  1210      5067          move.b    (A0),D1
00002D28  C2BC 0000 5068          and.l     #255,D1
00002D2C  00FF      
00002D2E  2F01      5069          move.l    D1,-(A7)
00002D30  2F02      5070          move.l    D2,-(A7)
00002D32  4879 0000 5071          pea       @m68kde~2_161.L
00002D36  5396      
00002D38  4E92      5072          jsr       (A2)
00002D3A  DEFC 0018 5073          add.w     #24,A7
                    5074   MemoryTest_70:
00002D3E  D48B      5075          add.l     A3,D2
00002D40  6000 FF4C 5076          bra       MemoryTest_64
                    5077   MemoryTest_66:
                    5078   ; }
                    5079   ; }
                    5080   ; printf("\r\nFinished reading");
00002D44  4879 0000 5081          pea       @m68kde~2_162.L
00002D48  53C4      
00002D4A  4E92      5082          jsr       (A2)
00002D4C  584F      5083          addq.w    #4,A7
00002D4E  6000 034A 5084          bra       MemoryTest_107
                    5085   MemoryTest_62:
                    5086   ; }
                    5087   ; //-----------------------Write Section-----------------------
                    5088   ; else{
                    5089   ; // 1 Byte
                    5090   ; while(!valid_user_data_flag){
                    5091   MemoryTest_73:
00002D52  4AAE FFF8 5092          tst.l     -8(A6)
00002D56  6600 006A 5093          bne       MemoryTest_75
                    5094   ; if(test_type == 0){ // acquire byte user data
00002D5A  4A84      5095          tst.l     D4
00002D5C  6620      5096          bne.s     MemoryTest_76
                    5097   ; printf("\r\nEnter the data in format XX: ");
00002D5E  4879 0000 5098          pea       @m68kde~2_163.L
00002D62  53D8      
00002D64  4E92      5099          jsr       (A2)
00002D66  584F      5100          addq.w    #4,A7
                    5101   ; user_data = Get2HexDigits(0);
00002D68  42A7      5102          clr.l     -(A7)
00002D6A  4EB8 0C04 5103          jsr       _Get2HexDigits
00002D6E  584F      5104          addq.w    #4,A7
00002D70  2600      5105          move.l    D0,D3
                    5106   ; valid_user_data_flag = 1;
00002D72  2D7C 0000 5107          move.l    #1,-8(A6)
00002D76  0001 FFF8 
00002D7A  6000 0044 5108          bra       MemoryTest_79
                    5109   MemoryTest_76:
                    5110   ; }
                    5111   ; else if(test_type == 1){ // acquire word user data
00002D7E  0C84 0000 5112          cmp.l     #1,D4
00002D82  0001      
00002D84  661E      5113          bne.s     MemoryTest_78
                    5114   ; printf("\r\nEnter the data in format XXXX: ");
00002D86  4879 0000 5115          pea       @m68kde~2_164.L
00002D8A  53F8      
00002D8C  4E92      5116          jsr       (A2)
00002D8E  584F      5117          addq.w    #4,A7
                    5118   ; user_data = Get4HexDigits(0);
00002D90  42A7      5119          clr.l     -(A7)
00002D92  4EB8 0C58 5120          jsr       _Get4HexDigits
00002D96  584F      5121          addq.w    #4,A7
00002D98  2600      5122          move.l    D0,D3
                    5123   ; valid_user_data_flag = 1;
00002D9A  2D7C 0000 5124          move.l    #1,-8(A6)
00002D9E  0001 FFF8 
00002DA2  601C      5125          bra.s     MemoryTest_79
                    5126   MemoryTest_78:
                    5127   ; }
                    5128   ; else{ // acquire long word user data
                    5129   ; printf("\r\nEnter the data in format XXXXXXXX: ");
00002DA4  4879 0000 5130          pea       @m68kde~2_165.L
00002DA8  541A      
00002DAA  4E92      5131          jsr       (A2)
00002DAC  584F      5132          addq.w    #4,A7
                    5133   ; user_data = Get8HexDigits(0);
00002DAE  42A7      5134          clr.l     -(A7)
00002DB0  4EB8 0CA4 5135          jsr       _Get8HexDigits
00002DB4  584F      5136          addq.w    #4,A7
00002DB6  2600      5137          move.l    D0,D3
                    5138   ; valid_user_data_flag = 1;
00002DB8  2D7C 0000 5139          move.l    #1,-8(A6)
00002DBC  0001 FFF8 
                    5140   MemoryTest_79:
00002DC0  6090      5141          bra       MemoryTest_73
                    5142   MemoryTest_75:
                    5143   ; }
                    5144   ; }
                    5145   ; // word XX_XX --> upper 8 bits ((0xFFFF & input) >> 8), shift address by 1, then lower 8 bits (0x00FF & input)
                    5146   ; // long word --> upper 8, shift by 1, next 8, shift by 1, next 8, shift by 1, write least significant 8, then done.
                    5147   ; mem_error_flag = 0;
00002DC2  7E00      5148          moveq     #0,D7
                    5149   ; for(current_address = start_address; current_address < end_address; current_address += address_increment){
00002DC4  2405      5150          move.l    D5,D2
                    5151   MemoryTest_80:
00002DC6  B486      5152          cmp.l     D6,D2
00002DC8  6400 02C0 5153          bhs       MemoryTest_82
                    5154   ; if((current_address - start_address)%10000 == 0){
00002DCC  2002      5155          move.l    D2,D0
00002DCE  9085      5156          sub.l     D5,D0
00002DD0  2F00      5157          move.l    D0,-(A7)
00002DD2  4878 2710 5158          pea       10000
00002DD6  4EB9 0000 5159          jsr       LDIV
00002DDA  3382      
00002DDC  202F 0004 5160          move.l    4(A7),D0
00002DE0  504F      5161          addq.w    #8,A7
00002DE2  4A80      5162          tst.l     D0
00002DE4  6610      5163          bne.s     MemoryTest_83
                    5164   ; printf("\r\nWriting %x at location %x", user_data, current_address); // Reports the progress every 10k (0x2800) locations
00002DE6  2F02      5165          move.l    D2,-(A7)
00002DE8  2F03      5166          move.l    D3,-(A7)
00002DEA  4879 0000 5167          pea       @m68kde~2_166.L
00002DEE  5440      
00002DF0  4E92      5168          jsr       (A2)
00002DF2  DEFC 000C 5169          add.w     #12,A7
                    5170   MemoryTest_83:
                    5171   ; }
                    5172   ; if(test_type == 0){
00002DF6  4A84      5173          tst.l     D4
00002DF8  662C      5174          bne.s     MemoryTest_85
                    5175   ; *(current_address) = user_data;
00002DFA  2042      5176          move.l    D2,A0
00002DFC  1083      5177          move.b    D3,(A0)
                    5178   ; if (*(current_address) != user_data) //read the data and confirm if it is written correctly
00002DFE  2042      5179          move.l    D2,A0
00002E00  1010      5180          move.b    (A0),D0
00002E02  C0BC 0000 5181          and.l     #255,D0
00002E06  00FF      
00002E08  B083      5182          cmp.l     D3,D0
00002E0A  6716      5183          beq.s     MemoryTest_87
                    5184   ; {
                    5185   ; printf("\r\nError writing %x to address %x", user_data, current_address);
00002E0C  2F02      5186          move.l    D2,-(A7)
00002E0E  2F03      5187          move.l    D3,-(A7)
00002E10  4879 0000 5188          pea       @m68kde~2_167.L
00002E14  545C      
00002E16  4E92      5189          jsr       (A2)
00002E18  DEFC 000C 5190          add.w     #12,A7
                    5191   ; mem_error_flag = 1;
00002E1C  7E01      5192          moveq     #1,D7
                    5193   ; break;
00002E1E  6000 026A 5194          bra       MemoryTest_82
                    5195   MemoryTest_87:
00002E22  6000 0260 5196          bra       MemoryTest_105
                    5197   MemoryTest_85:
                    5198   ; }
                    5199   ; }
                    5200   ; else if(test_type == 1){
00002E26  0C84 0000 5201          cmp.l     #1,D4
00002E2A  0001      
00002E2C  6600 00A0 5202          bne       MemoryTest_89
                    5203   ; *(current_address) = (0xFF00 & user_data) >> 8;
00002E30  303C FF00 5204          move.w    #65280,D0
00002E34  C0BC 0000 5205          and.l     #65535,D0
00002E38  FFFF      
00002E3A  C083      5206          and.l     D3,D0
00002E3C  E088      5207          lsr.l     #8,D0
00002E3E  2042      5208          move.l    D2,A0
00002E40  1080      5209          move.b    D0,(A0)
                    5210   ; if (*(current_address) != ((0xFF00 & user_data) >> 8)) //read the data and confirm if it is written correctly
00002E42  2042      5211          move.l    D2,A0
00002E44  1010      5212          move.b    (A0),D0
00002E46  C0BC 0000 5213          and.l     #255,D0
00002E4A  00FF      
00002E4C  323C FF00 5214          move.w    #65280,D1
00002E50  C2BC 0000 5215          and.l     #65535,D1
00002E54  FFFF      
00002E56  C283      5216          and.l     D3,D1
00002E58  E089      5217          lsr.l     #8,D1
00002E5A  B081      5218          cmp.l     D1,D0
00002E5C  6724      5219          beq.s     MemoryTest_91
                    5220   ; {
                    5221   ; printf("\r\nError writing %x to address %x", (0xFF00 & user_data) >> 8, current_address);
00002E5E  2F02      5222          move.l    D2,-(A7)
00002E60  323C FF00 5223          move.w    #65280,D1
00002E64  C2BC 0000 5224          and.l     #65535,D1
00002E68  FFFF      
00002E6A  C283      5225          and.l     D3,D1
00002E6C  E089      5226          lsr.l     #8,D1
00002E6E  2F01      5227          move.l    D1,-(A7)
00002E70  4879 0000 5228          pea       @m68kde~2_167.L
00002E74  545C      
00002E76  4E92      5229          jsr       (A2)
00002E78  DEFC 000C 5230          add.w     #12,A7
                    5231   ; mem_error_flag = 1;
00002E7C  7E01      5232          moveq     #1,D7
                    5233   ; break;
00002E7E  6000 020A 5234          bra       MemoryTest_82
                    5235   MemoryTest_91:
                    5236   ; }
                    5237   ; *(current_address + 1) = (0x00FF & user_data);
00002E82  303C 00FF 5238          move.w    #255,D0
00002E86  48C0      5239          ext.l     D0
00002E88  C083      5240          and.l     D3,D0
00002E8A  2042      5241          move.l    D2,A0
00002E8C  1140 0001 5242          move.b    D0,1(A0)
                    5243   ; if (*(current_address + 1) != (0x00FF & user_data)) //read the data and confirm if it is written correctly
00002E90  2042      5244          move.l    D2,A0
00002E92  1028 0001 5245          move.b    1(A0),D0
00002E96  C0BC 0000 5246          and.l     #255,D0
00002E9A  00FF      
00002E9C  323C 00FF 5247          move.w    #255,D1
00002EA0  48C1      5248          ext.l     D1
00002EA2  C283      5249          and.l     D3,D1
00002EA4  B081      5250          cmp.l     D1,D0
00002EA6  6722      5251          beq.s     MemoryTest_93
                    5252   ; {
                    5253   ; printf("\r\nError writing %x to address %x", (0x00FF & user_data), (current_address+1));
00002EA8  2202      5254          move.l    D2,D1
00002EAA  5281      5255          addq.l    #1,D1
00002EAC  2F01      5256          move.l    D1,-(A7)
00002EAE  323C 00FF 5257          move.w    #255,D1
00002EB2  48C1      5258          ext.l     D1
00002EB4  C283      5259          and.l     D3,D1
00002EB6  2F01      5260          move.l    D1,-(A7)
00002EB8  4879 0000 5261          pea       @m68kde~2_167.L
00002EBC  545C      
00002EBE  4E92      5262          jsr       (A2)
00002EC0  DEFC 000C 5263          add.w     #12,A7
                    5264   ; mem_error_flag = 1;
00002EC4  7E01      5265          moveq     #1,D7
                    5266   ; break;
00002EC6  6000 01C2 5267          bra       MemoryTest_82
                    5268   MemoryTest_93:
00002ECA  6000 01B8 5269          bra       MemoryTest_105
                    5270   MemoryTest_89:
                    5271   ; }
                    5272   ; }
                    5273   ; else if(test_type == 2)
00002ECE  0C84 0000 5274          cmp.l     #2,D4
00002ED2  0002      
00002ED4  6600 01AE 5275          bne       MemoryTest_105
                    5276   ; {
                    5277   ; if( (end_address - current_address) < 3){ //  to ensure we do not go past end address
00002ED8  2006      5278          move.l    D6,D0
00002EDA  9082      5279          sub.l     D2,D0
00002EDC  0C80 0000 5280          cmp.l     #3,D0
00002EE0  0003      
00002EE2  6C00 005A 5281          bge       MemoryTest_97
                    5282   ; *(current_address) = (0xFF000000 & user_data) >> 24;
00002EE6  203C FF00 5283          move.l    #-16777216,D0
00002EEA  0000      
00002EEC  C083      5284          and.l     D3,D0
00002EEE  E088      5285          lsr.l     #8,D0
00002EF0  E088      5286          lsr.l     #8,D0
00002EF2  E088      5287          lsr.l     #8,D0
00002EF4  2042      5288          move.l    D2,A0
00002EF6  1080      5289          move.b    D0,(A0)
                    5290   ; *(current_address + 1) = (0x00FF0000 & user_data) >> 16;
00002EF8  203C 00FF 5291          move.l    #16711680,D0
00002EFC  0000      
00002EFE  C083      5292          and.l     D3,D0
00002F00  E088      5293          lsr.l     #8,D0
00002F02  E088      5294          lsr.l     #8,D0
00002F04  2042      5295          move.l    D2,A0
00002F06  1140 0001 5296          move.b    D0,1(A0)
                    5297   ; printf("\r\nError: End address limit reached");
00002F0A  4879 0000 5298          pea       @m68kde~2_168.L
00002F0E  547E      
00002F10  4E92      5299          jsr       (A2)
00002F12  584F      5300          addq.w    #4,A7
                    5301   ; printf("\r\nCannot write %x and %x",(0x0000FF00 & user_data) >> 8, (0x000000FF) & user_data);
00002F14  323C 00FF 5302          move.w    #255,D1
00002F18  48C1      5303          ext.l     D1
00002F1A  C283      5304          and.l     D3,D1
00002F1C  2F01      5305          move.l    D1,-(A7)
00002F1E  323C FF00 5306          move.w    #65280,D1
00002F22  C2BC 0000 5307          and.l     #65535,D1
00002F26  FFFF      
00002F28  C283      5308          and.l     D3,D1
00002F2A  E089      5309          lsr.l     #8,D1
00002F2C  2F01      5310          move.l    D1,-(A7)
00002F2E  4879 0000 5311          pea       @m68kde~2_169.L
00002F32  54A2      
00002F34  4E92      5312          jsr       (A2)
00002F36  DEFC 000C 5313          add.w     #12,A7
                    5314   ; break;
00002F3A  6000 014E 5315          bra       MemoryTest_82
                    5316   MemoryTest_97:
                    5317   ; }
                    5318   ; *(current_address) = (0xFF000000 & user_data) >> 24;
00002F3E  203C FF00 5319          move.l    #-16777216,D0
00002F42  0000      
00002F44  C083      5320          and.l     D3,D0
00002F46  E088      5321          lsr.l     #8,D0
00002F48  E088      5322          lsr.l     #8,D0
00002F4A  E088      5323          lsr.l     #8,D0
00002F4C  2042      5324          move.l    D2,A0
00002F4E  1080      5325          move.b    D0,(A0)
                    5326   ; if (*(current_address) != ((0xFF000000 & user_data) >> 24)) //read the data and confirm if it is written correctly
00002F50  2042      5327          move.l    D2,A0
00002F52  1010      5328          move.b    (A0),D0
00002F54  C0BC 0000 5329          and.l     #255,D0
00002F58  00FF      
00002F5A  223C FF00 5330          move.l    #-16777216,D1
00002F5E  0000      
00002F60  C283      5331          and.l     D3,D1
00002F62  E089      5332          lsr.l     #8,D1
00002F64  E089      5333          lsr.l     #8,D1
00002F66  E089      5334          lsr.l     #8,D1
00002F68  B081      5335          cmp.l     D1,D0
00002F6A  6724      5336          beq.s     MemoryTest_99
                    5337   ; {
                    5338   ; printf("\r\nError writing %x to address %x", (0xFF000000 & user_data) >> 24, current_address);
00002F6C  2F02      5339          move.l    D2,-(A7)
00002F6E  223C FF00 5340          move.l    #-16777216,D1
00002F72  0000      
00002F74  C283      5341          and.l     D3,D1
00002F76  E089      5342          lsr.l     #8,D1
00002F78  E089      5343          lsr.l     #8,D1
00002F7A  E089      5344          lsr.l     #8,D1
00002F7C  2F01      5345          move.l    D1,-(A7)
00002F7E  4879 0000 5346          pea       @m68kde~2_167.L
00002F82  545C      
00002F84  4E92      5347          jsr       (A2)
00002F86  DEFC 000C 5348          add.w     #12,A7
                    5349   ; mem_error_flag = 1;
00002F8A  7E01      5350          moveq     #1,D7
                    5351   ; break;
00002F8C  6000 00FC 5352          bra       MemoryTest_82
                    5353   MemoryTest_99:
                    5354   ; }
                    5355   ; *(current_address + 1) = (0x00FF0000 & user_data) >> 16;
00002F90  203C 00FF 5356          move.l    #16711680,D0
00002F94  0000      
00002F96  C083      5357          and.l     D3,D0
00002F98  E088      5358          lsr.l     #8,D0
00002F9A  E088      5359          lsr.l     #8,D0
00002F9C  2042      5360          move.l    D2,A0
00002F9E  1140 0001 5361          move.b    D0,1(A0)
                    5362   ; if (*(current_address + 1) != ((0x00FF0000 & user_data) >> 16)) //read the data and confirm if it is written correctly
00002FA2  2042      5363          move.l    D2,A0
00002FA4  1028 0001 5364          move.b    1(A0),D0
00002FA8  C0BC 0000 5365          and.l     #255,D0
00002FAC  00FF      
00002FAE  223C 00FF 5366          move.l    #16711680,D1
00002FB2  0000      
00002FB4  C283      5367          and.l     D3,D1
00002FB6  E089      5368          lsr.l     #8,D1
00002FB8  E089      5369          lsr.l     #8,D1
00002FBA  B081      5370          cmp.l     D1,D0
00002FBC  6726      5371          beq.s     MemoryTest_101
                    5372   ; {
                    5373   ; printf("\r\nError writing %x to address %x", (0x00FF0000 & user_data) >> 16, (current_address+1));
00002FBE  2202      5374          move.l    D2,D1
00002FC0  5281      5375          addq.l    #1,D1
00002FC2  2F01      5376          move.l    D1,-(A7)
00002FC4  223C 00FF 5377          move.l    #16711680,D1
00002FC8  0000      
00002FCA  C283      5378          and.l     D3,D1
00002FCC  E089      5379          lsr.l     #8,D1
00002FCE  E089      5380          lsr.l     #8,D1
00002FD0  2F01      5381          move.l    D1,-(A7)
00002FD2  4879 0000 5382          pea       @m68kde~2_167.L
00002FD6  545C      
00002FD8  4E92      5383          jsr       (A2)
00002FDA  DEFC 000C 5384          add.w     #12,A7
                    5385   ; mem_error_flag = 1;
00002FDE  7E01      5386          moveq     #1,D7
                    5387   ; break;
00002FE0  6000 00A8 5388          bra       MemoryTest_82
                    5389   MemoryTest_101:
                    5390   ; }
                    5391   ; *(current_address + 2) = (0x0000FF00 & user_data) >> 8;
00002FE4  303C FF00 5392          move.w    #65280,D0
00002FE8  C0BC 0000 5393          and.l     #65535,D0
00002FEC  FFFF      
00002FEE  C083      5394          and.l     D3,D0
00002FF0  E088      5395          lsr.l     #8,D0
00002FF2  2042      5396          move.l    D2,A0
00002FF4  1140 0002 5397          move.b    D0,2(A0)
                    5398   ; if (*(current_address + 2) != ((0x0000FF00 & user_data) >> 8)) //read the data and confirm if it is written correctly
00002FF8  2042      5399          move.l    D2,A0
00002FFA  1028 0002 5400          move.b    2(A0),D0
00002FFE  C0BC 0000 5401          and.l     #255,D0
00003002  00FF      
00003004  323C FF00 5402          move.w    #65280,D1
00003008  C2BC 0000 5403          and.l     #65535,D1
0000300C  FFFF      
0000300E  C283      5404          and.l     D3,D1
00003010  E089      5405          lsr.l     #8,D1
00003012  B081      5406          cmp.l     D1,D0
00003014  6728      5407          beq.s     MemoryTest_103
                    5408   ; {
                    5409   ; printf("\r\nError writing %x to address %x", (0x0000FF00 & user_data) >> 8, (current_address+2));
00003016  2202      5410          move.l    D2,D1
00003018  5481      5411          addq.l    #2,D1
0000301A  2F01      5412          move.l    D1,-(A7)
0000301C  323C FF00 5413          move.w    #65280,D1
00003020  C2BC 0000 5414          and.l     #65535,D1
00003024  FFFF      
00003026  C283      5415          and.l     D3,D1
00003028  E089      5416          lsr.l     #8,D1
0000302A  2F01      5417          move.l    D1,-(A7)
0000302C  4879 0000 5418          pea       @m68kde~2_167.L
00003030  545C      
00003032  4E92      5419          jsr       (A2)
00003034  DEFC 000C 5420          add.w     #12,A7
                    5421   ; mem_error_flag = 1;
00003038  7E01      5422          moveq     #1,D7
                    5423   ; break;
0000303A  6000 004E 5424          bra       MemoryTest_82
                    5425   MemoryTest_103:
                    5426   ; }
                    5427   ; *(current_address + 3) = (0x000000FF) & user_data;
0000303E  303C 00FF 5428          move.w    #255,D0
00003042  48C0      5429          ext.l     D0
00003044  C083      5430          and.l     D3,D0
00003046  2042      5431          move.l    D2,A0
00003048  1140 0003 5432          move.b    D0,3(A0)
                    5433   ; if (*(current_address + 3) != ((0x000000FF) & user_data)) //read the data and confirm if it is written correctly
0000304C  2042      5434          move.l    D2,A0
0000304E  1028 0003 5435          move.b    3(A0),D0
00003052  C0BC 0000 5436          and.l     #255,D0
00003056  00FF      
00003058  323C 00FF 5437          move.w    #255,D1
0000305C  48C1      5438          ext.l     D1
0000305E  C283      5439          and.l     D3,D1
00003060  B081      5440          cmp.l     D1,D0
00003062  6720      5441          beq.s     MemoryTest_105
                    5442   ; {
                    5443   ; printf("\r\nError writing %x to address %x", (0x000000FF) & user_data, (current_address+3));
00003064  2202      5444          move.l    D2,D1
00003066  5681      5445          addq.l    #3,D1
00003068  2F01      5446          move.l    D1,-(A7)
0000306A  323C 00FF 5447          move.w    #255,D1
0000306E  48C1      5448          ext.l     D1
00003070  C283      5449          and.l     D3,D1
00003072  2F01      5450          move.l    D1,-(A7)
00003074  4879 0000 5451          pea       @m68kde~2_167.L
00003078  545C      
0000307A  4E92      5452          jsr       (A2)
0000307C  DEFC 000C 5453          add.w     #12,A7
                    5454   ; mem_error_flag = 1;
00003080  7E01      5455          moveq     #1,D7
                    5456   ; break;
00003082  6006      5457          bra.s     MemoryTest_82
                    5458   MemoryTest_105:
00003084  D48B      5459          add.l     A3,D2
00003086  6000 FD3E 5460          bra       MemoryTest_80
                    5461   MemoryTest_82:
                    5462   ; }
                    5463   ; }
                    5464   ; }
                    5465   ; if(mem_error_flag == 0){
0000308A  4A87      5466          tst.l     D7
0000308C  660C      5467          bne.s     MemoryTest_107
                    5468   ; printf("\r\nWriting finished at %08x", end_address);
0000308E  2F06      5469          move.l    D6,-(A7)
00003090  4879 0000 5470          pea       @m68kde~2_170.L
00003094  54BC      
00003096  4E92      5471          jsr       (A2)
00003098  504F      5472          addq.w    #8,A7
                    5473   MemoryTest_107:
0000309A  4CDF 3CFC 5474          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000309E  4E5E      5475          unlk      A6
000030A0  4E75      5476          rts
                    5477   ; }
                    5478   ; }
                    5479   ; }
                    5480   ; void main(void)
                    5481   ; {
                    5482   _main:
000030A2  4E56 FFF4 5483          link      A6,#-12
000030A6  48E7 3030 5484          movem.l   D2/D3/A2/A3,-(A7)
000030AA  45F8 0A30 5485          lea       _InstallExceptionHandler.L,A2
000030AE  47F9 0000 5486          lea       _printf.L,A3
000030B2  3532      
                    5487   ; char c ;
                    5488   ; int i, j ;
                    5489   ; char *BugMessage = "Student's Names: Jinil Patel and Saif Abdelazim";
000030B4  41F9 0000 5490          lea       @m68kde~2_171.L,A0
000030B8  54D8      
000030BA  2608      5491          move.l    A0,D3
                    5492   ; char *CopyrightMessage = "Student #: 38240727 and  62639422";
000030BC  41F9 0000 5493          lea       @m68kde~2_172.L,A0
000030C0  5508      
000030C2  2D48 FFFC 5494          move.l    A0,-4(A6)
                    5495   ; KillAllBreakPoints() ;
000030C6  4EB8 206C 5496          jsr       _KillAllBreakPoints
                    5497   ; i = x = y = z = PortA_Count = 0;
000030CA  42B9 0B00 5498          clr.l     _PortA_Count.L
000030CE  00D4      
000030D0  42B9 0B00 5499          clr.l     _z.L
000030D4  00D0      
000030D6  42B9 0B00 5500          clr.l     _y.L
000030DA  00CC      
000030DC  42B9 0B00 5501          clr.l     _x.L
000030E0  00C8      
000030E2  4282      5502          clr.l     D2
                    5503   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
000030E4  42B9 0B00 5504          clr.l     _GoFlag.L
000030E8  00DC      
000030EA  42B9 0B00 5505          clr.l     _Trace.L
000030EE  00D8      
                    5506   ; Echo = 1 ;
000030F0  23FC 0000 5507          move.l    #1,_Echo.L
000030F4  0001 0B00 
000030F8  00E0      
                    5508   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
000030FA  42B9 0B00 5509          clr.l     _d7.L
000030FE  0100      
00003100  42B9 0B00 5510          clr.l     _d6.L
00003104  00FC      
00003106  42B9 0B00 5511          clr.l     _d5.L
0000310A  00F8      
0000310C  42B9 0B00 5512          clr.l     _d4.L
00003110  00F4      
00003112  42B9 0B00 5513          clr.l     _d3.L
00003116  00F0      
00003118  42B9 0B00 5514          clr.l     _d2.L
0000311C  00EC      
0000311E  42B9 0B00 5515          clr.l     _d1.L
00003122  00E8      
00003124  42B9 0B00 5516          clr.l     _d0.L
00003128  00E4      
                    5517   ; a0=a1=a2=a3=a4=a5=a6=0 ;
0000312A  42B9 0B00 5518          clr.l     _a6.L
0000312E  011C      
00003130  42B9 0B00 5519          clr.l     _a5.L
00003134  0118      
00003136  42B9 0B00 5520          clr.l     _a4.L
0000313A  0114      
0000313C  42B9 0B00 5521          clr.l     _a3.L
00003140  0110      
00003142  42B9 0B00 5522          clr.l     _a2.L
00003146  010C      
00003148  42B9 0B00 5523          clr.l     _a1.L
0000314C  0108      
0000314E  42B9 0B00 5524          clr.l     _a0.L
00003152  0104      
                    5525   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00003154  23FC 0800 5526          move.l    #134217728,_PC.L
00003158  0000 0B00 
0000315C  0120      
0000315E  23FC 0C00 5527          move.l    #201326592,_SSP.L
00003162  0000 0B00 
00003166  0124      
00003168  23FC 0C00 5528          move.l    #201326592,_USP.L
0000316C  0000 0B00 
00003170  0128      
                    5529   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00003172  33FC 2000 5530          move.w    #8192,_SR.L
00003176  0B00 012C 
                    5531   ; // Initialise Breakpoint variables
                    5532   ; for(i = 0; i < 8; i++)  {
0000317A  4282      5533          clr.l     D2
                    5534   main_1:
0000317C  0C82 0000 5535          cmp.l     #8,D2
00003180  0008      
00003182  6C00 004C 5536          bge       main_3
                    5537   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00003186  2002      5538          move.l    D2,D0
00003188  E588      5539          lsl.l     #2,D0
0000318A  41F9 0B00 5540          lea       _BreakPointAddress.L,A0
0000318E  012E      
00003190  42B0 0800 5541          clr.l     0(A0,D0.L)
                    5542   ; WatchPointAddress[i] = 0 ;
00003194  2002      5543          move.l    D2,D0
00003196  E588      5544          lsl.l     #2,D0
00003198  41F9 0B00 5545          lea       _WatchPointAddress.L,A0
0000319C  0182      
0000319E  42B0 0800 5546          clr.l     0(A0,D0.L)
                    5547   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000031A2  2002      5548          move.l    D2,D0
000031A4  E388      5549          lsl.l     #1,D0
000031A6  41F9 0B00 5550          lea       _BreakPointInstruction.L,A0
000031AA  014E      
000031AC  4270 0800 5551          clr.w     0(A0,D0.L)
                    5552   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000031B0  2002      5553          move.l    D2,D0
000031B2  E588      5554          lsl.l     #2,D0
000031B4  41F9 0B00 5555          lea       _BreakPointSetOrCleared.L,A0
000031B8  015E      
000031BA  42B0 0800 5556          clr.l     0(A0,D0.L)
                    5557   ; WatchPointSetOrCleared[i] = 0;
000031BE  2002      5558          move.l    D2,D0
000031C0  E588      5559          lsl.l     #2,D0
000031C2  41F9 0B00 5560          lea       _WatchPointSetOrCleared.L,A0
000031C6  01A2      
000031C8  42B0 0800 5561          clr.l     0(A0,D0.L)
000031CC  5282      5562          addq.l    #1,D2
000031CE  60AC      5563          bra       main_1
                    5564   main_3:
                    5565   ; }
                    5566   ; Init_RS232() ;     // initialise the RS232 port
000031D0  4EB8 0B12 5567          jsr       _Init_RS232
                    5568   ; Init_LCD() ;
000031D4  4EB8 095E 5569          jsr       _Init_LCD
                    5570   ; SPI_Init();
000031D8  4EB8 10E4 5571          jsr       _SPI_Init
                    5572   ; printf("\r\nSPI has been initialized successfully.");
000031DC  4879 0000 5573          pea       @m68kde~2_173.L
000031E0  552A      
000031E2  4E93      5574          jsr       (A3)
000031E4  584F      5575          addq.w    #4,A7
                    5576   ; for( i = 32; i < 48; i++)
000031E6  7420      5577          moveq     #32,D2
                    5578   main_4:
000031E8  0C82 0000 5579          cmp.l     #48,D2
000031EC  0030      
000031EE  6C0E      5580          bge.s     main_6
                    5581   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
000031F0  2F02      5582          move.l    D2,-(A7)
000031F2  4878 28E4 5583          pea       _UnhandledTrap.L
000031F6  4E92      5584          jsr       (A2)
000031F8  504F      5585          addq.w    #8,A7
000031FA  5282      5586          addq.l    #1,D2
000031FC  60EA      5587          bra       main_4
                    5588   main_6:
                    5589   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
000031FE  4878 002F 5590          pea       47
00003202  4878 25BE 5591          pea       _menu.L
00003206  4E92      5592          jsr       (A2)
00003208  504F      5593          addq.w    #8,A7
                    5594   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
0000320A  4878 0019 5595          pea       25
0000320E  4878 288A 5596          pea       _UnhandledIRQ1.L
00003212  4E92      5597          jsr       (A2)
00003214  504F      5598          addq.w    #8,A7
                    5599   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00003216  4878 001A 5600          pea       26
0000321A  4878 2896 5601          pea       _UnhandledIRQ2.L
0000321E  4E92      5602          jsr       (A2)
00003220  504F      5603          addq.w    #8,A7
                    5604   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003222  4878 001B 5605          pea       27
00003226  4878 28A2 5606          pea       _UnhandledIRQ3.L
0000322A  4E92      5607          jsr       (A2)
0000322C  504F      5608          addq.w    #8,A7
                    5609   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
0000322E  4878 001C 5610          pea       28
00003232  4878 28AE 5611          pea       _UnhandledIRQ4.L
00003236  4E92      5612          jsr       (A2)
00003238  504F      5613          addq.w    #8,A7
                    5614   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
0000323A  4878 001D 5615          pea       29
0000323E  4878 28BA 5616          pea       _UnhandledIRQ5.L
00003242  4E92      5617          jsr       (A2)
00003244  504F      5618          addq.w    #8,A7
                    5619   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00003246  4878 001E 5620          pea       30
0000324A  4878 28C6 5621          pea       _UnhandledIRQ6.L
0000324E  4E92      5622          jsr       (A2)
00003250  504F      5623          addq.w    #8,A7
                    5624   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00003252  4878 001F 5625          pea       31
00003256  4878 28D8 5626          pea       _UnhandledIRQ7.L
0000325A  4E92      5627          jsr       (A2)
0000325C  504F      5628          addq.w    #8,A7
                    5629   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
0000325E  4878 002E 5630          pea       46
00003262  4878 22FA 5631          pea       _HandleBreakPoint.L
00003266  4E92      5632          jsr       (A2)
00003268  504F      5633          addq.w    #8,A7
                    5634   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
0000326A  4878 001D 5635          pea       29
0000326E  4878 19DA 5636          pea       _DumpRegistersandPause.L
00003272  4E92      5637          jsr       (A2)
00003274  504F      5638          addq.w    #8,A7
                    5639   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00003276  4878 0002 5640          pea       2
0000327A  4878 28F2 5641          pea       _BusError.L
0000327E  4E92      5642          jsr       (A2)
00003280  504F      5643          addq.w    #8,A7
                    5644   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00003282  4878 0003 5645          pea       3
00003286  4878 2900 5646          pea       _AddressError.L
0000328A  4E92      5647          jsr       (A2)
0000328C  504F      5648          addq.w    #8,A7
                    5649   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
0000328E  4878 0004 5650          pea       4
00003292  4878 290E 5651          pea       _IllegalInstruction.L
00003296  4E92      5652          jsr       (A2)
00003298  504F      5653          addq.w    #8,A7
                    5654   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
0000329A  4878 0005 5655          pea       5
0000329E  4878 291C 5656          pea       _Dividebyzero.L
000032A2  4E92      5657          jsr       (A2)
000032A4  504F      5658          addq.w    #8,A7
                    5659   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000032A6  4878 0006 5660          pea       6
000032AA  4878 292A 5661          pea       _Check.L
000032AE  4E92      5662          jsr       (A2)
000032B0  504F      5663          addq.w    #8,A7
                    5664   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000032B2  4878 0007 5665          pea       7
000032B6  4878 2938 5666          pea       _Trapv.L
000032BA  4E92      5667          jsr       (A2)
000032BC  504F      5668          addq.w    #8,A7
                    5669   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000032BE  4878 0008 5670          pea       8
000032C2  4878 2946 5671          pea       _PrivError.L
000032C6  4E92      5672          jsr       (A2)
000032C8  504F      5673          addq.w    #8,A7
                    5674   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000032CA  4878 000F 5675          pea       15
000032CE  4878 2954 5676          pea       _UnitIRQ.L
000032D2  4E92      5677          jsr       (A2)
000032D4  504F      5678          addq.w    #8,A7
                    5679   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000032D6  4878 0018 5680          pea       24
000032DA  4878 292A 5681          pea       _Check.L
000032DE  4E92      5682          jsr       (A2)
000032E0  504F      5683          addq.w    #8,A7
                    5684   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000032E2  4EB8 0BA6 5685          jsr       _FlushKeyboard
                    5686   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000032E6  4239 0040 5687          clr.b     4194314
000032EA  000A      
                    5688   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5689   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5690   main_7:
000032EC  1039 0040 5691          move.b    4194306,D0
000032F0  0002      
000032F2  C03C 0002 5692          and.b     #2,D0
000032F6  0C00 0002 5693          cmp.b     #2,D0
000032FA  662A      5694          bne.s     main_9
                    5695   ; LoadFromFlashChip();
000032FC  4EB8 14DA 5696          jsr       _LoadFromFlashChip
                    5697   ; printf("\r\nRunning.....") ;
00003300  4879 0000 5698          pea       @m68kde~2_174.L
00003304  5554      
00003306  4E93      5699          jsr       (A3)
00003308  584F      5700          addq.w    #4,A7
                    5701   ; Oline1("Running.....") ;
0000330A  4879 0000 5702          pea       @m68kde~2_175.L
0000330E  5564      
00003310  4EB8 0A02 5703          jsr       _Oline1
00003314  584F      5704          addq.w    #4,A7
                    5705   ; GoFlag = 1;
00003316  23FC 0000 5706          move.l    #1,_GoFlag.L
0000331A  0001 0B00 
0000331E  00DC      
                    5707   ; go() ;
00003320  4EB8 08B8 5708          jsr       _go
00003324  60C6      5709          bra       main_7
                    5710   main_9:
                    5711   ; }
                    5712   ; // otherwise start the debug monitor
                    5713   ; Oline0(BugMessage) ;
00003326  2F03      5714          move.l    D3,-(A7)
00003328  4EB8 09D4 5715          jsr       _Oline0
0000332C  584F      5716          addq.w    #4,A7
                    5717   ; Oline1("By: PJ Davies") ;
0000332E  4879 0000 5718          pea       @m68kde~2_176.L
00003332  5572      
00003334  4EB8 0A02 5719          jsr       _Oline1
00003338  584F      5720          addq.w    #4,A7
                    5721   ; printf("\r\n%s", BugMessage) ;
0000333A  2F03      5722          move.l    D3,-(A7)
0000333C  4879 0000 5723          pea       @m68kde~2_177.L
00003340  5580      
00003342  4E93      5724          jsr       (A3)
00003344  504F      5725          addq.w    #8,A7
                    5726   ; printf("\r\n%s", CopyrightMessage) ;
00003346  2F2E FFFC 5727          move.l    -4(A6),-(A7)
0000334A  4879 0000 5728          pea       @m68kde~2_177.L
0000334E  5580      
00003350  4E93      5729          jsr       (A3)
00003352  504F      5730          addq.w    #8,A7
                    5731   ; menu();
00003354  4EB8 25BE 5732          jsr       _menu
00003358  4CDF 0C0C 5733          movem.l   (A7)+,D2/D3/A2/A3
0000335C  4E5E      5734          unlk      A6
0000335E  4E75      5735          rts
                    5736   ; }
                    5737   _strcpy:
00003360  206F 0004 5738          move.l    (4,A7),A0
00003364  226F 0008 5739          move.l    (8,A7),A1
00003368  2008      5740          move.l    A0,D0
                    5741   strcpy_1:
0000336A  10D9      5742          move.b    (A1)+,(A0)+
0000336C  66FC      5743          bne.s     strcpy_1
0000336E  4E75      5744          rts
                    5745   ULDIV:
00003370  4E56 0000 5746          link    A6,#0
00003374  48E7 C000 5747          movem.l D0/D1,-(A7)
00003378  222E 0008 5748          move.l  8(A6),D1
0000337C  202E 000C 5749          move.l  12(A6),D0
00003380  6036      5750          bra.s   ldiv_3
                    5751   LDIV:
00003382  4E56 0000 5752          link    A6,#0
00003386  48E7 C000 5753          movem.l D0/D1,-(A7)
0000338A  222E 0008 5754          move.l  8(A6),D1
0000338E  202E 000C 5755          move.l  12(A6),D0
00003392  4A80      5756          tst.l   D0
00003394  6A0E      5757          bpl.s   ldiv_1
00003396  4480      5758          neg.l   D0
00003398  4A81      5759          tst.l   D1
0000339A  6A14      5760          bpl.s   ldiv_2
0000339C  4481      5761          neg.l   D1
0000339E  612A      5762          bsr.s   dodiv
000033A0  4481      5763          neg.l   D1
000033A2  6016      5764          bra.s   ldiv_4
                    5765   ldiv_1:
000033A4  4A81      5766          tst.l   D1
000033A6  6A10      5767          bpl.s   ldiv_3
000033A8  4481      5768          neg.l   D1
000033AA  611E      5769          bsr.s   dodiv
000033AC  4480      5770          neg.l   D0
000033AE  600A      5771          bra.s   ldiv_4
                    5772   ldiv_2:
000033B0  6118      5773          bsr.s   dodiv
000033B2  4480      5774          neg.l   D0
000033B4  4481      5775          neg.l   D1
000033B6  6002      5776          bra.s   ldiv_4
                    5777   ldiv_3:
000033B8  6110      5778          bsr.s   dodiv
                    5779   ldiv_4:
000033BA  2D40 0008 5780          move.l  D0,8(A6)
000033BE  2D41 000C 5781          move.l  D1,12(A6)
000033C2  4CDF 0003 5782          movem.l (A7)+,D0/D1
000033C6  4E5E      5783          unlk    A6
000033C8  4E75      5784          rts
                    5785   dodiv:
000033CA  0C81 0000 5786          cmpi.l  #$FFFF,D1
000033CE  FFFF      
000033D0  6236      5787          bhi.s   dodiv_2
000033D2  0C80 0000 5788          cmpi.l  #$FFFF,D0
000033D6  FFFF      
000033D8  6210      5789          bhi.s   dodiv_1
000033DA  80C1      5790          divu    D1,D0
000033DC  2200      5791          move.l  D0,D1
000033DE  4241      5792          clr.w   D1
000033E0  4841      5793          swap    D1
000033E2  0280 0000 5794          andi.l  #$FFFF,D0
000033E6  FFFF      
000033E8  4E75      5795          rts
                    5796   dodiv_1:
000033EA  48A7 A000 5797          movem.w D0/D2,-(A7)
000033EE  4240      5798          clr.w   D0
000033F0  4840      5799          swap    D0
000033F2  80C1      5800          divu    D1,D0
000033F4  3400      5801          move.w  D0,D2
000033F6  301F      5802          move.w  (A7)+,D0
000033F8  80C1      5803          divu    D1,D0
000033FA  4840      5804          swap    D0
000033FC  4281      5805          clr.l   D1
000033FE  3200      5806          move.w  D0,D1
00003400  3002      5807          move.w  D2,D0
00003402  4840      5808          swap    D0
00003404  341F      5809          move.w  (A7)+,D2
00003406  4E75      5810          rts
                    5811   dodiv_2:
00003408  48E7 3800 5812          movem.l D2/D3/D4,-(A7)
0000340C  2401      5813          move.l  D1,D2
0000340E  4242      5814          clr.w   D2
00003410  4842      5815          swap    D2
00003412  5282      5816          addq.l  #1,D2
00003414  2600      5817          move.l  D0,D3
00003416  2801      5818          move.l  D1,D4
00003418  2202      5819          move.l  D2,D1
0000341A  61CE      5820          bsr.s   dodiv_1
0000341C  2204      5821          move.l  D4,D1
0000341E  82C2      5822          divu    D2,D1
00003420  80C1      5823          divu    D1,D0
00003422  0280 0000 5824          andi.l  #$FFFF,D0
00003426  FFFF      
                    5825   dodiv_3:
00003428  2204      5826          move.l  D4,D1
0000342A  2404      5827          move.l  D4,D2
0000342C  4842      5828          swap    D2
0000342E  C2C0      5829          mulu    D0,D1
00003430  C4C0      5830          mulu    D0,D2
00003432  4842      5831          swap    D2
00003434  D282      5832          add.l   D2,D1
00003436  9283      5833          sub.l   D3,D1
00003438  620A      5834          bhi.s   dodiv_4
0000343A  4481      5835          neg.l   D1
0000343C  B881      5836          cmp.l   D1,D4
0000343E  6208      5837          bhi.s   dodiv_5
00003440  5280      5838          addq.l  #1,D0
00003442  60E4      5839          bra.s   dodiv_3
                    5840   dodiv_4:
00003444  5380      5841          subq.l  #1,D0
00003446  60E0      5842          bra.s   dodiv_3
                    5843   dodiv_5:
00003448  4CDF 001C 5844          movem.l (A7)+,D2/D3/D4
0000344C  4E75      5845          rts
                    5846   _putch:
0000344E  4E56 0000 5847          link      A6,#0
00003452  2F02      5848          move.l    D2,-(A7)
00003454  242E 0008 5849          move.l    8(A6),D2
00003458  0C82 0000 5850          cmp.l     #10,D2
0000345C  000A      
0000345E  660A      5851          bne.s     putch_1
00003460  4878 000D 5852          pea       13
00003464  4EB8 0B3C 5853          jsr       __putch
00003468  584F      5854          addq.w    #4,A7
                    5855   putch_1:
0000346A  2F02      5856          move.l    D2,-(A7)
0000346C  4EB8 0B3C 5857          jsr       __putch
00003470  584F      5858          addq.w    #4,A7
00003472  2002      5859          move.l    D2,D0
00003474  241F      5860          move.l    (A7)+,D2
00003476  4E5E      5861          unlk      A6
00003478  4E75      5862          rts
                    5863   _getch:
0000347A  2F02      5864          move.l    D2,-(A7)
0000347C  2439 0B00 5865          move.l    __ungetbuf.L,D2
00003480  00C0      
00003482  2039 0B00 5866          move.l    __ungetbuf.L,D0
00003486  00C0      
00003488  0C80 FFFF 5867          cmp.l     #-1,D0
0000348C  FFFF      
0000348E  670C      5868          beq.s     getch_1
00003490  23FC FFFF 5869          move.l    #-1,__ungetbuf.L
00003494  FFFF 0B00 
00003498  00C0      
0000349A  6010      5870          bra.s     getch_3
                    5871   getch_1:
0000349C  4EB8 0B68 5872          jsr       __getch
000034A0  2400      5873          move.l    D0,D2
000034A2  0C80 0000 5874          cmp.l     #13,D0
000034A6  000D      
000034A8  6602      5875          bne.s     getch_3
000034AA  740A      5876          moveq     #10,D2
                    5877   getch_3:
000034AC  2002      5878          move.l    D2,D0
000034AE  241F      5879          move.l    (A7)+,D2
000034B0  4E75      5880          rts
                    5881   _tolower:
000034B2  202F 0004 5882          move.l    4(A7),D0
000034B6  0C80 0000 5883          cmp.l     #'A',D0
000034BA  0041      
000034BC  6D0E      5884          blt.s     tolower_1
000034BE  0C80 0000 5885          cmp.l     #'Z',D0
000034C2  005A      
000034C4  6E06      5886          bgt.s     tolower_1
000034C6  0680 0000 5887          add.l     #$20,D0
000034CA  0020      
                    5888   tolower_1:
000034CC  4E75      5889          rts
                    5890   _sprintf:
000034CE  4E56 FFFC 5891          link      A6,#-4
000034D2  2F02      5892          move.l    D2,-(A7)
000034D4  41EE 000C 5893          lea       12(A6),A0
000034D8  5848      5894          addq.w    #4,A0
000034DA  2408      5895          move.l    A0,D2
000034DC  2F02      5896          move.l    D2,-(A7)
000034DE  2F2E 000C 5897          move.l    12(A6),-(A7)
000034E2  2F2E 0008 5898          move.l    8(A6),-(A7)
000034E6  4EB9 0000 5899          jsr       _doprint
000034EA  3608      
000034EC  DEFC 000C 5900          add.w     #12,A7
000034F0  2D40 FFFC 5901          move.l    D0,-4(A6)
000034F4  4282      5902          clr.l     D2
000034F6  202E FFFC 5903          move.l    -4(A6),D0
000034FA  241F      5904          move.l    (A7)+,D2
000034FC  4E5E      5905          unlk      A6
000034FE  4E75      5906          rts
                    5907   _strcat:
00003500  206F 0004 5908          move.l    (4,A7),A0
00003504  226F 0008 5909          move.l    (8,A7),A1
00003508  2008      5910          move.l    A0,D0
                    5911   strcat_1:
0000350A  4A18      5912          tst.b     (A0)+
0000350C  66FC      5913          bne.s     strcat_1
0000350E  5388      5914          subq.l    #1,A0
                    5915   strcat_2:
00003510  10D9      5916          move.b    (A1)+,(A0)+
00003512  66FC      5917          bne.s     strcat_2
00003514  4E75      5918          rts
                    5919   _toupper:
00003516  202F 0004 5920          move.l    4(A7),D0
0000351A  0C80 0000 5921          cmp.l     #'a',D0
0000351E  0061      
00003520  6D0E      5922          blt.s     toupper_1
00003522  0C80 0000 5923          cmp.l     #'z',D0
00003526  007A      
00003528  6E06      5924          bgt.s     toupper_1
0000352A  0480 0000 5925          sub.l     #$20,D0
0000352E  0020      
                    5926   toupper_1:
00003530  4E75      5927          rts
                    5928   _printf:
00003532  4E56 FFFC 5929          link      A6,#-4
00003536  2F02      5930          move.l    D2,-(A7)
00003538  41EE 0008 5931          lea       8(A6),A0
0000353C  5848      5932          addq.w    #4,A0
0000353E  2408      5933          move.l    A0,D2
00003540  2F02      5934          move.l    D2,-(A7)
00003542  2F2E 0008 5935          move.l    8(A6),-(A7)
00003546  42A7      5936          clr.l     -(A7)
00003548  4EB9 0000 5937          jsr       _doprint
0000354C  3608      
0000354E  DEFC 000C 5938          add.w     #12,A7
00003552  2D40 FFFC 5939          move.l    D0,-4(A6)
00003556  4282      5940          clr.l     D2
00003558  202E FFFC 5941          move.l    -4(A6),D0
0000355C  241F      5942          move.l    (A7)+,D2
0000355E  4E5E      5943          unlk      A6
00003560  4E75      5944          rts
                    5945   @doprint_copy:
00003562  4E56 0000 5946          link      A6,#0
00003566  206E 0008 5947          move.l    8(A6),A0
0000356A  4A90      5948          tst.l     (A0)
0000356C  6710      5949          beq.s     @doprint_copy_1
0000356E  202E 000C 5950          move.l    12(A6),D0
00003572  206E 0008 5951          move.l    8(A6),A0
00003576  2250      5952          move.l    (A0),A1
00003578  5290      5953          addq.l    #1,(A0)
0000357A  1280      5954          move.b    D0,(A1)
0000357C  600A      5955          bra.s     @doprint_copy_2
                    5956   @doprint_copy_1:
0000357E  2F2E 000C 5957          move.l    12(A6),-(A7)
00003582  4EB8 344E 5958          jsr       _putch
00003586  584F      5959          addq.w    #4,A7
                    5960   @doprint_copy_2:
00003588  4E5E      5961          unlk      A6
0000358A  4E75      5962          rts
                    5963   @doprint_getval:
0000358C  4E56 0000 5964          link      A6,#0
00003590  48E7 3000 5965          movem.l   D2/D3,-(A7)
00003594  262E 0008 5966          move.l    8(A6),D3
00003598  4282      5967          clr.l     D2
0000359A  2043      5968          move.l    D3,A0
0000359C  2050      5969          move.l    (A0),A0
0000359E  1010      5970          move.b    (A0),D0
000035A0  0C00 002A 5971          cmp.b     #42,D0
000035A4  6612      5972          bne.s     @doprint_getval_1
000035A6  206E 000C 5973          move.l    12(A6),A0
000035AA  2250      5974          move.l    (A0),A1
000035AC  5890      5975          addq.l    #4,(A0)
000035AE  2411      5976          move.l    (A1),D2
000035B0  2043      5977          move.l    D3,A0
000035B2  5290      5978          addq.l    #1,(A0)
000035B4  6000 0048 5979          bra       @doprint_getval_5
                    5980   @doprint_getval_1:
000035B8  7001      5981          moveq     #1,D0
000035BA  2043      5982          move.l    D3,A0
000035BC  2050      5983          move.l    (A0),A0
000035BE  1210      5984          move.b    (A0),D1
000035C0  4881      5985          ext.w     D1
000035C2  48C1      5986          ext.l     D1
000035C4  D081      5987          add.l     D1,D0
000035C6  41F9 0000 5988          lea       __ctype.L,A0
000035CA  5592      
000035CC  1030 0800 5989          move.b    0(A0,D0.L),D0
000035D0  C03C 0004 5990          and.b     #4,D0
000035D4  6728      5991          beq.s     @doprint_getval_5
000035D6  2F02      5992          move.l    D2,-(A7)
000035D8  4878 000A 5993          pea       10
000035DC  4EB9 0000 5994          jsr       LMUL
000035E0  3DA4      
000035E2  2017      5995          move.l    (A7),D0
000035E4  504F      5996          addq.w    #8,A7
000035E6  2043      5997          move.l    D3,A0
000035E8  2250      5998          move.l    (A0),A1
000035EA  5290      5999          addq.l    #1,(A0)
000035EC  1211      6000          move.b    (A1),D1
000035EE  4881      6001          ext.w     D1
000035F0  48C1      6002          ext.l     D1
000035F2  D081      6003          add.l     D1,D0
000035F4  0480 0000 6004          sub.l     #48,D0
000035F8  0030      
000035FA  2400      6005          move.l    D0,D2
000035FC  60BA      6006          bra       @doprint_getval_1
                    6007   @doprint_getval_5:
000035FE  2002      6008          move.l    D2,D0
00003600  4CDF 000C 6009          movem.l   (A7)+,D2/D3
00003604  4E5E      6010          unlk      A6
00003606  4E75      6011          rts
                    6012   _doprint:
00003608  4E56 FFCC 6013          link      A6,#-52
0000360C  48E7 3F3C 6014          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003610  45EE 0008 6015          lea       8(A6),A2
00003614  47F8 3562 6016          lea       @doprint_copy.L,A3
00003618  49F9 0000 6017          lea       _ultoa.L,A4
0000361C  3D30      
0000361E  4286      6018          clr.l     D6
                    6019   doprint_1:
00003620  206E 000C 6020          move.l    12(A6),A0
00003624  4A10      6021          tst.b     (A0)
00003626  6700 05EA 6022          beq       doprint_3
0000362A  206E 000C 6023          move.l    12(A6),A0
0000362E  1010      6024          move.b    (A0),D0
00003630  0C00 0025 6025          cmp.b     #37,D0
00003634  671C      6026          beq.s     doprint_4
00003636  206E 000C 6027          move.l    12(A6),A0
0000363A  52AE 000C 6028          addq.l    #1,12(A6)
0000363E  1210      6029          move.b    (A0),D1
00003640  4881      6030          ext.w     D1
00003642  48C1      6031          ext.l     D1
00003644  2F01      6032          move.l    D1,-(A7)
00003646  2F0A      6033          move.l    A2,-(A7)
00003648  4E93      6034          jsr       (A3)
0000364A  504F      6035          addq.w    #8,A7
0000364C  5286      6036          addq.l    #1,D6
0000364E  6000 05BE 6037          bra       doprint_2
                    6038   doprint_4:
00003652  52AE 000C 6039          addq.l    #1,12(A6)
00003656  422E FFD3 6040          clr.b     -45(A6)
0000365A  422E FFD2 6041          clr.b     -46(A6)
0000365E  422E FFD0 6042          clr.b     -48(A6)
00003662  422E FFCF 6043          clr.b     -49(A6)
00003666  422E FFCE 6044          clr.b     -50(A6)
0000366A  422E FFCD 6045          clr.b     -51(A6)
0000366E  42AE FFFC 6046          clr.l     -4(A6)
00003672  7AFF      6047          moveq     #-1,D5
00003674  41EE FFDC 6048          lea       -36(A6),A0
00003678  2608      6049          move.l    A0,D3
0000367A  2408      6050          move.l    A0,D2
                    6051   doprint_6:
0000367C  206E 000C 6052          move.l    12(A6),A0
00003680  1010      6053          move.b    (A0),D0
00003682  4880      6054          ext.w     D0
00003684  48C0      6055          ext.l     D0
00003686  0C80 0000 6056          cmp.l     #43,D0
0000368A  002B      
0000368C  6730      6057          beq.s     doprint_12
0000368E  6E18      6058          bgt.s     doprint_15
00003690  0C80 0000 6059          cmp.l     #35,D0
00003694  0023      
00003696  6700 003E 6060          beq       doprint_14
0000369A  6E00 0046 6061          bgt       doprint_9
0000369E  0C80 0000 6062          cmp.l     #32,D0
000036A2  0020      
000036A4  6724      6063          beq.s     doprint_13
000036A6  603A      6064          bra.s     doprint_9
                    6065   doprint_15:
000036A8  0C80 0000 6066          cmp.l     #45,D0
000036AC  002D      
000036AE  6702      6067          beq.s     doprint_11
000036B0  6030      6068          bra.s     doprint_9
                    6069   doprint_11:
000036B2  1D7C 0001 6070          move.b    #1,-51(A6)
000036B6  FFCD      
000036B8  52AE 000C 6071          addq.l    #1,12(A6)
000036BC  6026      6072          bra.s     doprint_7
                    6073   doprint_12:
000036BE  1D7C 0001 6074          move.b    #1,-50(A6)
000036C2  FFCE      
000036C4  52AE 000C 6075          addq.l    #1,12(A6)
000036C8  601A      6076          bra.s     doprint_7
                    6077   doprint_13:
000036CA  1D7C 0001 6078          move.b    #1,-49(A6)
000036CE  FFCF      
000036D0  52AE 000C 6079          addq.l    #1,12(A6)
000036D4  600E      6080          bra.s     doprint_7
                    6081   doprint_14:
000036D6  1D7C 0001 6082          move.b    #1,-48(A6)
000036DA  FFD0      
000036DC  52AE 000C 6083          addq.l    #1,12(A6)
000036E0  6002      6084          bra.s     doprint_7
                    6085   doprint_9:
000036E2  6002      6086          bra.s     doprint_8
                    6087   doprint_7:
000036E4  6096      6088          bra       doprint_6
                    6089   doprint_8:
000036E6  206E 000C 6090          move.l    12(A6),A0
000036EA  1010      6091          move.b    (A0),D0
000036EC  0C00 0030 6092          cmp.b     #48,D0
000036F0  660A      6093          bne.s     doprint_16
000036F2  52AE 000C 6094          addq.l    #1,12(A6)
000036F6  1D7C 0001 6095          move.b    #1,-46(A6)
000036FA  FFD2      
                    6096   doprint_16:
000036FC  486E 0010 6097          pea       16(A6)
00003700  486E 000C 6098          pea       12(A6)
00003704  4EB8 358C 6099          jsr       @doprint_getval
00003708  504F      6100          addq.w    #8,A7
0000370A  2A40      6101          move.l    D0,A5
0000370C  206E 000C 6102          move.l    12(A6),A0
00003710  1010      6103          move.b    (A0),D0
00003712  0C00 002E 6104          cmp.b     #46,D0
00003716  6614      6105          bne.s     doprint_18
00003718  52AE 000C 6106          addq.l    #1,12(A6)
0000371C  486E 0010 6107          pea       16(A6)
00003720  486E 000C 6108          pea       12(A6)
00003724  4EB8 358C 6109          jsr       @doprint_getval
00003728  504F      6110          addq.w    #8,A7
0000372A  2A00      6111          move.l    D0,D5
                    6112   doprint_18:
0000372C  206E 000C 6113          move.l    12(A6),A0
00003730  1010      6114          move.b    (A0),D0
00003732  0C00 006C 6115          cmp.b     #108,D0
00003736  660A      6116          bne.s     doprint_20
00003738  52AE 000C 6117          addq.l    #1,12(A6)
0000373C  1D7C 0001 6118          move.b    #1,-45(A6)
00003740  FFD3      
                    6119   doprint_20:
00003742  206E 000C 6120          move.l    12(A6),A0
00003746  1010      6121          move.b    (A0),D0
00003748  4880      6122          ext.w     D0
0000374A  48C0      6123          ext.l     D0
0000374C  0C80 0000 6124          cmp.l     #111,D0
00003750  006F      
00003752  6700 00D8 6125          beq       doprint_27
00003756  6E34      6126          bgt.s     doprint_33
00003758  0C80 0000 6127          cmp.l     #100,D0
0000375C  0064      
0000375E  6700 0054 6128          beq       doprint_24
00003762  6E1C      6129          bgt.s     doprint_34
00003764  0C80 0000 6130          cmp.l     #99,D0
00003768  0063      
0000376A  6700 0130 6131          beq       doprint_30
0000376E  6E00 0174 6132          bgt       doprint_22
00003772  0C80 0000 6133          cmp.l     #88,D0
00003776  0058      
00003778  6700 00EA 6134          beq       doprint_28
0000377C  6000 0166 6135          bra       doprint_22
                    6136   doprint_34:
00003780  0C80 0000 6137          cmp.l     #105,D0
00003784  0069      
00003786  672C      6138          beq.s     doprint_24
00003788  6000 015A 6139          bra       doprint_22
                    6140   doprint_33:
0000378C  0C80 0000 6141          cmp.l     #117,D0
00003790  0075      
00003792  6700 0060 6142          beq       doprint_26
00003796  6E0E      6143          bgt.s     doprint_35
00003798  0C80 0000 6144          cmp.l     #115,D0
0000379C  0073      
0000379E  6700 0124 6145          beq       doprint_31
000037A2  6000 0140 6146          bra       doprint_22
                    6147   doprint_35:
000037A6  0C80 0000 6148          cmp.l     #120,D0
000037AA  0078      
000037AC  6700 00B6 6149          beq       doprint_28
000037B0  6000 0132 6150          bra       doprint_22
                    6151   doprint_24:
000037B4  4A2E FFD3 6152          tst.b     -45(A6)
000037B8  671C      6153          beq.s     doprint_36
000037BA  4878 000A 6154          pea       10
000037BE  2F03      6155          move.l    D3,-(A7)
000037C0  206E 0010 6156          move.l    16(A6),A0
000037C4  58AE 0010 6157          addq.l    #4,16(A6)
000037C8  2F10      6158          move.l    (A0),-(A7)
000037CA  4EB9 0000 6159          jsr       _ltoa
000037CE  3CAC      
000037D0  DEFC 000C 6160          add.w     #12,A7
000037D4  601A      6161          bra.s     doprint_37
                    6162   doprint_36:
000037D6  4878 000A 6163          pea       10
000037DA  2F03      6164          move.l    D3,-(A7)
000037DC  206E 0010 6165          move.l    16(A6),A0
000037E0  58AE 0010 6166          addq.l    #4,16(A6)
000037E4  2F10      6167          move.l    (A0),-(A7)
000037E6  4EB9 0000 6168          jsr       _ltoa
000037EA  3CAC      
000037EC  DEFC 000C 6169          add.w     #12,A7
                    6170   doprint_37:
000037F0  6000 0100 6171          bra       doprint_23
                    6172   doprint_26:
000037F4  4A2E FFD3 6173          tst.b     -45(A6)
000037F8  6718      6174          beq.s     doprint_38
000037FA  4878 000A 6175          pea       10
000037FE  2F03      6176          move.l    D3,-(A7)
00003800  206E 0010 6177          move.l    16(A6),A0
00003804  58AE 0010 6178          addq.l    #4,16(A6)
00003808  2F10      6179          move.l    (A0),-(A7)
0000380A  4E94      6180          jsr       (A4)
0000380C  DEFC 000C 6181          add.w     #12,A7
00003810  6016      6182          bra.s     doprint_39
                    6183   doprint_38:
00003812  4878 000A 6184          pea       10
00003816  2F03      6185          move.l    D3,-(A7)
00003818  206E 0010 6186          move.l    16(A6),A0
0000381C  58AE 0010 6187          addq.l    #4,16(A6)
00003820  2F10      6188          move.l    (A0),-(A7)
00003822  4E94      6189          jsr       (A4)
00003824  DEFC 000C 6190          add.w     #12,A7
                    6191   doprint_39:
00003828  6000 00C8 6192          bra       doprint_23
                    6193   doprint_27:
0000382C  4A2E FFD3 6194          tst.b     -45(A6)
00003830  6718      6195          beq.s     doprint_40
00003832  4878 0008 6196          pea       8
00003836  2F03      6197          move.l    D3,-(A7)
00003838  206E 0010 6198          move.l    16(A6),A0
0000383C  58AE 0010 6199          addq.l    #4,16(A6)
00003840  2F10      6200          move.l    (A0),-(A7)
00003842  4E94      6201          jsr       (A4)
00003844  DEFC 000C 6202          add.w     #12,A7
00003848  6016      6203          bra.s     doprint_41
                    6204   doprint_40:
0000384A  4878 0008 6205          pea       8
0000384E  2F03      6206          move.l    D3,-(A7)
00003850  206E 0010 6207          move.l    16(A6),A0
00003854  58AE 0010 6208          addq.l    #4,16(A6)
00003858  2F10      6209          move.l    (A0),-(A7)
0000385A  4E94      6210          jsr       (A4)
0000385C  DEFC 000C 6211          add.w     #12,A7
                    6212   doprint_41:
00003860  6000 0090 6213          bra       doprint_23
                    6214   doprint_28:
00003864  4A2E FFD3 6215          tst.b     -45(A6)
00003868  6718      6216          beq.s     doprint_42
0000386A  4878 0010 6217          pea       16
0000386E  2F03      6218          move.l    D3,-(A7)
00003870  206E 0010 6219          move.l    16(A6),A0
00003874  58AE 0010 6220          addq.l    #4,16(A6)
00003878  2F10      6221          move.l    (A0),-(A7)
0000387A  4E94      6222          jsr       (A4)
0000387C  DEFC 000C 6223          add.w     #12,A7
00003880  6016      6224          bra.s     doprint_43
                    6225   doprint_42:
00003882  4878 0010 6226          pea       16
00003886  2F03      6227          move.l    D3,-(A7)
00003888  206E 0010 6228          move.l    16(A6),A0
0000388C  58AE 0010 6229          addq.l    #4,16(A6)
00003890  2F10      6230          move.l    (A0),-(A7)
00003892  4E94      6231          jsr       (A4)
00003894  DEFC 000C 6232          add.w     #12,A7
                    6233   doprint_43:
00003898  6000 0058 6234          bra       doprint_23
                    6235   doprint_30:
0000389C  206E 0010 6236          move.l    16(A6),A0
000038A0  58AE 0010 6237          addq.l    #4,16(A6)
000038A4  2010      6238          move.l    (A0),D0
000038A6  2042      6239          move.l    D2,A0
000038A8  5282      6240          addq.l    #1,D2
000038AA  1080      6241          move.b    D0,(A0)
000038AC  2042      6242          move.l    D2,A0
000038AE  4210      6243          clr.b     (A0)
000038B0  200D      6244          move.l    A5,D0
000038B2  6704      6245          beq.s     doprint_44
000038B4  200D      6246          move.l    A5,D0
000038B6  6006      6247          bra.s     doprint_45
                    6248   doprint_44:
000038B8  7001      6249          moveq     #1,D0
000038BA  4880      6250          ext.w     D0
000038BC  48C0      6251          ext.l     D0
                    6252   doprint_45:
000038BE  2A00      6253          move.l    D0,D5
000038C0  6000 0030 6254          bra       doprint_23
                    6255   doprint_31:
000038C4  206E 0010 6256          move.l    16(A6),A0
000038C8  58AE 0010 6257          addq.l    #4,16(A6)
000038CC  2610      6258          move.l    (A0),D3
000038CE  0C85 FFFF 6259          cmp.l     #-1,D5
000038D2  FFFF      
000038D4  660C      6260          bne.s     doprint_46
000038D6  2F03      6261          move.l    D3,-(A7)
000038D8  4EB9 0000 6262          jsr       _strlen
000038DC  3E32      
000038DE  584F      6263          addq.w    #4,A7
000038E0  2A00      6264          move.l    D0,D5
                    6265   doprint_46:
000038E2  600E      6266          bra.s     doprint_23
                    6267   doprint_22:
000038E4  206E 000C 6268          move.l    12(A6),A0
000038E8  2242      6269          move.l    D2,A1
000038EA  5282      6270          addq.l    #1,D2
000038EC  1290      6271          move.b    (A0),(A1)
000038EE  2042      6272          move.l    D2,A0
000038F0  4210      6273          clr.b     (A0)
                    6274   doprint_23:
000038F2  2F03      6275          move.l    D3,-(A7)
000038F4  4EB9 0000 6276          jsr       _strlen
000038F8  3E32      
000038FA  584F      6277          addq.w    #4,A7
000038FC  1800      6278          move.b    D0,D4
000038FE  206E 000C 6279          move.l    12(A6),A0
00003902  1010      6280          move.b    (A0),D0
00003904  0C00 0073 6281          cmp.b     #115,D0
00003908  661C      6282          bne.s     doprint_48
0000390A  0C85 0000 6283          cmp.l     #0,D5
0000390E  0000      
00003910  6D14      6284          blt.s     doprint_48
00003912  4884      6285          ext.w     D4
00003914  48C4      6286          ext.l     D4
00003916  B885      6287          cmp.l     D5,D4
00003918  6F04      6288          ble.s     doprint_50
0000391A  2005      6289          move.l    D5,D0
0000391C  6006      6290          bra.s     doprint_51
                    6291   doprint_50:
0000391E  1004      6292          move.b    D4,D0
00003920  4880      6293          ext.w     D0
00003922  48C0      6294          ext.l     D0
                    6295   doprint_51:
00003924  1800      6296          move.b    D0,D4
                    6297   doprint_48:
00003926  206E 000C 6298          move.l    12(A6),A0
0000392A  1010      6299          move.b    (A0),D0
0000392C  0C00 0058 6300          cmp.b     #88,D0
00003930  6600 0026 6301          bne       doprint_56
00003934  41EE FFDC 6302          lea       -36(A6),A0
00003938  2408      6303          move.l    A0,D2
                    6304   doprint_54:
0000393A  2042      6305          move.l    D2,A0
0000393C  4A10      6306          tst.b     (A0)
0000393E  6718      6307          beq.s     doprint_56
00003940  2042      6308          move.l    D2,A0
00003942  1210      6309          move.b    (A0),D1
00003944  4881      6310          ext.w     D1
00003946  48C1      6311          ext.l     D1
00003948  2F01      6312          move.l    D1,-(A7)
0000394A  4EB8 3516 6313          jsr       _toupper
0000394E  584F      6314          addq.w    #4,A7
00003950  2042      6315          move.l    D2,A0
00003952  1080      6316          move.b    D0,(A0)
00003954  5282      6317          addq.l    #1,D2
00003956  60E2      6318          bra       doprint_54
                    6319   doprint_56:
00003958  7E00      6320          moveq     #0,D7
0000395A  41EE FFD4 6321          lea       -44(A6),A0
0000395E  2408      6322          move.l    A0,D2
00003960  206E 000C 6323          move.l    12(A6),A0
00003964  1010      6324          move.b    (A0),D0
00003966  0C00 0064 6325          cmp.b     #100,D0
0000396A  670E      6326          beq.s     doprint_59
0000396C  206E 000C 6327          move.l    12(A6),A0
00003970  1010      6328          move.b    (A0),D0
00003972  0C00 0069 6329          cmp.b     #105,D0
00003976  6600 0068 6330          bne       doprint_65
                    6331   doprint_59:
0000397A  102E FFCE 6332          move.b    -50(A6),D0
0000397E  4880      6333          ext.w     D0
00003980  48C0      6334          ext.l     D0
00003982  4A80      6335          tst.l     D0
00003984  660C      6336          bne.s     doprint_62
00003986  2043      6337          move.l    D3,A0
00003988  1010      6338          move.b    (A0),D0
0000398A  0C00 002D 6339          cmp.b     #45,D0
0000398E  6600 0028 6340          bne       doprint_60
                    6341   doprint_62:
00003992  2043      6342          move.l    D3,A0
00003994  1010      6343          move.b    (A0),D0
00003996  0C00 002D 6344          cmp.b     #45,D0
0000399A  660E      6345          bne.s     doprint_63
0000399C  2043      6346          move.l    D3,A0
0000399E  5283      6347          addq.l    #1,D3
000039A0  2242      6348          move.l    D2,A1
000039A2  5282      6349          addq.l    #1,D2
000039A4  1290      6350          move.b    (A0),(A1)
000039A6  5304      6351          subq.b    #1,D4
000039A8  6008      6352          bra.s     doprint_64
                    6353   doprint_63:
000039AA  2042      6354          move.l    D2,A0
000039AC  5282      6355          addq.l    #1,D2
000039AE  10BC 002B 6356          move.b    #43,(A0)
                    6357   doprint_64:
000039B2  5287      6358          addq.l    #1,D7
000039B4  6000 002A 6359          bra       doprint_65
                    6360   doprint_60:
000039B8  4A2E FFCF 6361          tst.b     -49(A6)
000039BC  6722      6362          beq.s     doprint_65
000039BE  2043      6363          move.l    D3,A0
000039C0  1010      6364          move.b    (A0),D0
000039C2  0C00 002D 6365          cmp.b     #45,D0
000039C6  660E      6366          bne.s     doprint_67
000039C8  2043      6367          move.l    D3,A0
000039CA  5283      6368          addq.l    #1,D3
000039CC  2242      6369          move.l    D2,A1
000039CE  5282      6370          addq.l    #1,D2
000039D0  1290      6371          move.b    (A0),(A1)
000039D2  5304      6372          subq.b    #1,D4
000039D4  6008      6373          bra.s     doprint_68
                    6374   doprint_67:
000039D6  2042      6375          move.l    D2,A0
000039D8  5282      6376          addq.l    #1,D2
000039DA  10BC 0020 6377          move.b    #32,(A0)
                    6378   doprint_68:
000039DE  5287      6379          addq.l    #1,D7
                    6380   doprint_65:
000039E0  4A2E FFD0 6381          tst.b     -48(A6)
000039E4  6700 005A 6382          beq       doprint_77
000039E8  206E 000C 6383          move.l    12(A6),A0
000039EC  1010      6384          move.b    (A0),D0
000039EE  4880      6385          ext.w     D0
000039F0  48C0      6386          ext.l     D0
000039F2  0C80 0000 6387          cmp.l     #111,D0
000039F6  006F      
000039F8  671A      6388          beq.s     doprint_73
000039FA  6E0C      6389          bgt.s     doprint_76
000039FC  0C80 0000 6390          cmp.l     #88,D0
00003A00  0058      
00003A02  6710      6391          beq.s     doprint_73
00003A04  6000 003A 6392          bra       doprint_77
                    6393   doprint_76:
00003A08  0C80 0000 6394          cmp.l     #120,D0
00003A0C  0078      
00003A0E  6704      6395          beq.s     doprint_73
00003A10  6000 002E 6396          bra       doprint_77
                    6397   doprint_73:
00003A14  2042      6398          move.l    D2,A0
00003A16  5282      6399          addq.l    #1,D2
00003A18  10BC 0030 6400          move.b    #48,(A0)
00003A1C  5287      6401          addq.l    #1,D7
00003A1E  206E 000C 6402          move.l    12(A6),A0
00003A22  1010      6403          move.b    (A0),D0
00003A24  0C00 0078 6404          cmp.b     #120,D0
00003A28  670C      6405          beq.s     doprint_79
00003A2A  206E 000C 6406          move.l    12(A6),A0
00003A2E  1010      6407          move.b    (A0),D0
00003A30  0C00 0058 6408          cmp.b     #88,D0
00003A34  660A      6409          bne.s     doprint_77
                    6410   doprint_79:
00003A36  2042      6411          move.l    D2,A0
00003A38  5282      6412          addq.l    #1,D2
00003A3A  10BC 0078 6413          move.b    #120,(A0)
00003A3E  5287      6414          addq.l    #1,D7
                    6415   doprint_77:
00003A40  2042      6416          move.l    D2,A0
00003A42  4210      6417          clr.b     (A0)
00003A44  206E 000C 6418          move.l    12(A6),A0
00003A48  1010      6419          move.b    (A0),D0
00003A4A  4880      6420          ext.w     D0
00003A4C  48C0      6421          ext.l     D0
00003A4E  0C80 0000 6422          cmp.l     #105,D0
00003A52  0069      
00003A54  6700 0076 6423          beq       doprint_82
00003A58  6E42      6424          bgt.s     doprint_93
00003A5A  0C80 0000 6425          cmp.l     #99,D0
00003A5E  0063      
00003A60  6700 0084 6426          beq       doprint_96
00003A64  6E1C      6427          bgt.s     doprint_94
00003A66  0C80 0000 6428          cmp.l     #88,D0
00003A6A  0058      
00003A6C  6700 005E 6429          beq       doprint_82
00003A70  6E00 0184 6430          bgt       doprint_80
00003A74  0C80 0000 6431          cmp.l     #69,D0
00003A78  0045      
00003A7A  6700 0050 6432          beq       doprint_82
00003A7E  6000 0176 6433          bra       doprint_80
                    6434   doprint_94:
00003A82  0C80 0000 6435          cmp.l     #101,D0
00003A86  0065      
00003A88  6700 0042 6436          beq       doprint_82
00003A8C  6E00 0168 6437          bgt       doprint_80
00003A90  0C80 0000 6438          cmp.l     #100,D0
00003A94  0064      
00003A96  6734      6439          beq.s     doprint_82
00003A98  6000 015C 6440          bra       doprint_80
                    6441   doprint_93:
00003A9C  0C80 0000 6442          cmp.l     #117,D0
00003AA0  0075      
00003AA2  6728      6443          beq.s     doprint_82
00003AA4  6E1A      6444          bgt.s     doprint_95
00003AA6  0C80 0000 6445          cmp.l     #115,D0
00003AAA  0073      
00003AAC  6700 0038 6446          beq       doprint_96
00003AB0  6E00 0144 6447          bgt       doprint_80
00003AB4  0C80 0000 6448          cmp.l     #111,D0
00003AB8  006F      
00003ABA  6710      6449          beq.s     doprint_82
00003ABC  6000 0138 6450          bra       doprint_80
                    6451   doprint_95:
00003AC0  0C80 0000 6452          cmp.l     #120,D0
00003AC4  0078      
00003AC6  6704      6453          beq.s     doprint_82
00003AC8  6000 012C 6454          bra       doprint_80
                    6455   doprint_82:
00003ACC  4A2E FFD2 6456          tst.b     -46(A6)
00003AD0  6714      6457          beq.s     doprint_96
00003AD2  4A2E FFCD 6458          tst.b     -51(A6)
00003AD6  660E      6459          bne.s     doprint_96
00003AD8  200D      6460          move.l    A5,D0
00003ADA  9087      6461          sub.l     D7,D0
00003ADC  4884      6462          ext.w     D4
00003ADE  48C4      6463          ext.l     D4
00003AE0  9084      6464          sub.l     D4,D0
00003AE2  2D40 FFFC 6465          move.l    D0,-4(A6)
                    6466   doprint_96:
00003AE6  202E FFFC 6467          move.l    -4(A6),D0
00003AEA  0C80 0000 6468          cmp.l     #0,D0
00003AEE  0000      
00003AF0  6C04      6469          bge.s     doprint_98
00003AF2  42AE FFFC 6470          clr.l     -4(A6)
                    6471   doprint_98:
00003AF6  4A2E FFCD 6472          tst.b     -51(A6)
00003AFA  6600 0030 6473          bne       doprint_104
00003AFE  1004      6474          move.b    D4,D0
00003B00  4880      6475          ext.w     D0
00003B02  48C0      6476          ext.l     D0
00003B04  D0AE FFFC 6477          add.l     -4(A6),D0
00003B08  D087      6478          add.l     D7,D0
00003B0A  1D40 FFD1 6479          move.b    D0,-47(A6)
                    6480   doprint_102:
00003B0E  102E FFD1 6481          move.b    -47(A6),D0
00003B12  4880      6482          ext.w     D0
00003B14  48C0      6483          ext.l     D0
00003B16  220D      6484          move.l    A5,D1
00003B18  534D      6485          subq.w    #1,A5
00003B1A  B081      6486          cmp.l     D1,D0
00003B1C  6C0E      6487          bge.s     doprint_104
00003B1E  4878 0020 6488          pea       32
00003B22  2F0A      6489          move.l    A2,-(A7)
00003B24  4E93      6490          jsr       (A3)
00003B26  504F      6491          addq.w    #8,A7
00003B28  5286      6492          addq.l    #1,D6
00003B2A  60E2      6493          bra       doprint_102
                    6494   doprint_104:
00003B2C  41EE FFD4 6495          lea       -44(A6),A0
00003B30  2408      6496          move.l    A0,D2
                    6497   doprint_105:
00003B32  2042      6498          move.l    D2,A0
00003B34  4A10      6499          tst.b     (A0)
00003B36  6716      6500          beq.s     doprint_107
00003B38  2042      6501          move.l    D2,A0
00003B3A  5282      6502          addq.l    #1,D2
00003B3C  1210      6503          move.b    (A0),D1
00003B3E  4881      6504          ext.w     D1
00003B40  48C1      6505          ext.l     D1
00003B42  2F01      6506          move.l    D1,-(A7)
00003B44  2F0A      6507          move.l    A2,-(A7)
00003B46  4E93      6508          jsr       (A3)
00003B48  504F      6509          addq.w    #8,A7
00003B4A  5286      6510          addq.l    #1,D6
00003B4C  60E4      6511          bra       doprint_105
                    6512   doprint_107:
00003B4E  202E FFFC 6513          move.l    -4(A6),D0
00003B52  1D40 FFD1 6514          move.b    D0,-47(A6)
                    6515   doprint_108:
00003B56  102E FFD1 6516          move.b    -47(A6),D0
00003B5A  532E FFD1 6517          subq.b    #1,-47(A6)
00003B5E  4A00      6518          tst.b     D0
00003B60  670E      6519          beq.s     doprint_110
00003B62  4878 0030 6520          pea       48
00003B66  2F0A      6521          move.l    A2,-(A7)
00003B68  4E93      6522          jsr       (A3)
00003B6A  504F      6523          addq.w    #8,A7
00003B6C  5286      6524          addq.l    #1,D6
00003B6E  60E6      6525          bra       doprint_108
                    6526   doprint_110:
00003B70  2043      6527          move.l    D3,A0
00003B72  4A10      6528          tst.b     (A0)
00003B74  6700 0048 6529          beq       doprint_113
00003B78  206E 000C 6530          move.l    12(A6),A0
00003B7C  1010      6531          move.b    (A0),D0
00003B7E  4880      6532          ext.w     D0
00003B80  48C0      6533          ext.l     D0
00003B82  0C80 0000 6534          cmp.l     #115,D0
00003B86  0073      
00003B88  670C      6535          beq.s     doprint_116
00003B8A  6E18      6536          bgt.s     doprint_119
00003B8C  0C80 0000 6537          cmp.l     #99,D0
00003B90  0063      
00003B92  6702      6538          beq.s     doprint_116
00003B94  600E      6539          bra.s     doprint_119
                    6540   doprint_116:
00003B96  2005      6541          move.l    D5,D0
00003B98  5385      6542          subq.l    #1,D5
00003B9A  0C80 0000 6543          cmp.l     #0,D0
00003B9E  0000      
00003BA0  6E02      6544          bgt.s     doprint_119
00003BA2  6016      6545          bra.s     doprint_115
                    6546   doprint_119:
00003BA4  2043      6547          move.l    D3,A0
00003BA6  5283      6548          addq.l    #1,D3
00003BA8  1210      6549          move.b    (A0),D1
00003BAA  4881      6550          ext.w     D1
00003BAC  48C1      6551          ext.l     D1
00003BAE  2F01      6552          move.l    D1,-(A7)
00003BB0  2F0A      6553          move.l    A2,-(A7)
00003BB2  4E93      6554          jsr       (A3)
00003BB4  504F      6555          addq.w    #8,A7
00003BB6  5286      6556          addq.l    #1,D6
00003BB8  6002      6557          bra.s     doprint_112
                    6558   doprint_115:
00003BBA  6002      6559          bra.s     doprint_113
                    6560   doprint_112:
00003BBC  60B2      6561          bra       doprint_110
                    6562   doprint_113:
00003BBE  4A2E FFCD 6563          tst.b     -51(A6)
00003BC2  6700 0030 6564          beq       doprint_125
00003BC6  1004      6565          move.b    D4,D0
00003BC8  4880      6566          ext.w     D0
00003BCA  48C0      6567          ext.l     D0
00003BCC  D0AE FFFC 6568          add.l     -4(A6),D0
00003BD0  D087      6569          add.l     D7,D0
00003BD2  1D40 FFD1 6570          move.b    D0,-47(A6)
                    6571   doprint_123:
00003BD6  102E FFD1 6572          move.b    -47(A6),D0
00003BDA  4880      6573          ext.w     D0
00003BDC  48C0      6574          ext.l     D0
00003BDE  220D      6575          move.l    A5,D1
00003BE0  534D      6576          subq.w    #1,A5
00003BE2  B081      6577          cmp.l     D1,D0
00003BE4  6C0E      6578          bge.s     doprint_125
00003BE6  4878 0020 6579          pea       32
00003BEA  2F0A      6580          move.l    A2,-(A7)
00003BEC  4E93      6581          jsr       (A3)
00003BEE  504F      6582          addq.w    #8,A7
00003BF0  5386      6583          subq.l    #1,D6
00003BF2  60E2      6584          bra       doprint_123
                    6585   doprint_125:
00003BF4  6014      6586          bra.s     doprint_81
                    6587   doprint_80:
00003BF6  206E 000C 6588          move.l    12(A6),A0
00003BFA  1210      6589          move.b    (A0),D1
00003BFC  4881      6590          ext.w     D1
00003BFE  48C1      6591          ext.l     D1
00003C00  2F01      6592          move.l    D1,-(A7)
00003C02  2F0A      6593          move.l    A2,-(A7)
00003C04  4E93      6594          jsr       (A3)
00003C06  504F      6595          addq.w    #8,A7
00003C08  5286      6596          addq.l    #1,D6
                    6597   doprint_81:
00003C0A  52AE 000C 6598          addq.l    #1,12(A6)
                    6599   doprint_2:
00003C0E  6000 FA10 6600          bra       doprint_1
                    6601   doprint_3:
00003C12  4A92      6602          tst.l     (A2)
00003C14  6710      6603          beq.s     doprint_126
00003C16  4201      6604          clr.b     D1
00003C18  C2BC 0000 6605          and.l     #255,D1
00003C1C  00FF      
00003C1E  2F01      6606          move.l    D1,-(A7)
00003C20  2F0A      6607          move.l    A2,-(A7)
00003C22  4E93      6608          jsr       (A3)
00003C24  504F      6609          addq.w    #8,A7
                    6610   doprint_126:
00003C26  2006      6611          move.l    D6,D0
00003C28  4CDF 3CFC 6612          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003C2C  4E5E      6613          unlk      A6
00003C2E  4E75      6614          rts
                    6615   @itoa_convert:
00003C30  4E56 0000 6616          link      A6,#0
00003C34  48E7 3C00 6617          movem.l   D2/D3/D4/D5,-(A7)
00003C38  242E 0008 6618          move.l    8(A6),D2
00003C3C  262E 0010 6619          move.l    16(A6),D3
00003C40  2A2E 000C 6620          move.l    12(A6),D5
00003C44  2F05      6621          move.l    D5,-(A7)
00003C46  2F03      6622          move.l    D3,-(A7)
00003C48  4EB8 3370 6623          jsr       ULDIV
00003C4C  202F 0004 6624          move.l    4(A7),D0
00003C50  504F      6625          addq.w    #8,A7
00003C52  2800      6626          move.l    D0,D4
00003C54  BA83      6627          cmp.l     D3,D5
00003C56  651C      6628          blo.s     @itoa_convert_1
00003C58  2F03      6629          move.l    D3,-(A7)
00003C5A  2F05      6630          move.l    D5,-(A7)
00003C5C  2F03      6631          move.l    D3,-(A7)
00003C5E  4EB8 3370 6632          jsr       ULDIV
00003C62  2217      6633          move.l    (A7),D1
00003C64  504F      6634          addq.w    #8,A7
00003C66  2F01      6635          move.l    D1,-(A7)
00003C68  2F02      6636          move.l    D2,-(A7)
00003C6A  4EB8 3C30 6637          jsr       @itoa_convert
00003C6E  DEFC 000C 6638          add.w     #12,A7
00003C72  2400      6639          move.l    D0,D2
                    6640   @itoa_convert_1:
00003C74  0C84 0000 6641          cmp.l     #9,D4
00003C78  0009      
00003C7A  6E0E      6642          bgt.s     @itoa_convert_3
00003C7C  2004      6643          move.l    D4,D0
00003C7E  7230      6644          moveq     #48,D1
00003C80  C2BC 0000 6645          and.l     #255,D1
00003C84  00FF      
00003C86  D081      6646          add.l     D1,D0
00003C88  6012      6647          bra.s     @itoa_convert_4
                    6648   @itoa_convert_3:
00003C8A  2004      6649          move.l    D4,D0
00003C8C  7261      6650          moveq     #97,D1
00003C8E  C2BC 0000 6651          and.l     #255,D1
00003C92  00FF      
00003C94  D081      6652          add.l     D1,D0
00003C96  0480 0000 6653          sub.l     #10,D0
00003C9A  000A      
                    6654   @itoa_convert_4:
00003C9C  2042      6655          move.l    D2,A0
00003C9E  1080      6656          move.b    D0,(A0)
00003CA0  2002      6657          move.l    D2,D0
00003CA2  5280      6658          addq.l    #1,D0
00003CA4  4CDF 003C 6659          movem.l   (A7)+,D2/D3/D4/D5
00003CA8  4E5E      6660          unlk      A6
00003CAA  4E75      6661          rts
                    6662   _ltoa:
00003CAC  4E56 0000 6663          link      A6,#0
00003CB0  48E7 3C00 6664          movem.l   D2/D3/D4/D5,-(A7)
00003CB4  242E 0008 6665          move.l    8(A6),D2
00003CB8  262E 000C 6666          move.l    12(A6),D3
00003CBC  2A2E 0010 6667          move.l    16(A6),D5
00003CC0  2803      6668          move.l    D3,D4
00003CC2  0C85 0000 6669          cmp.l     #2,D5
00003CC6  0002      
00003CC8  6D08      6670          blt.s     ltoa_3
00003CCA  0C85 0000 6671          cmp.l     #36,D5
00003CCE  0024      
00003CD0  6F06      6672          ble.s     ltoa_1
                    6673   ltoa_3:
00003CD2  2003      6674          move.l    D3,D0
00003CD4  6000 0052 6675          bra       ltoa_4
                    6676   ltoa_1:
00003CD8  0C85 0000 6677          cmp.l     #10,D5
00003CDC  000A      
00003CDE  6600 0032 6678          bne       ltoa_5
00003CE2  0C82 0000 6679          cmp.l     #0,D2
00003CE6  0000      
00003CE8  6C28      6680          bge.s     ltoa_5
00003CEA  2002      6681          move.l    D2,D0
00003CEC  4480      6682          neg.l     D0
00003CEE  2400      6683          move.l    D0,D2
00003CF0  0C82 0000 6684          cmp.l     #0,D2
00003CF4  0000      
00003CF6  6C12      6685          bge.s     ltoa_7
00003CF8  4879 0000 6686          pea       @itoa_1.L
00003CFC  5586      
00003CFE  2F03      6687          move.l    D3,-(A7)
00003D00  4EB8 3360 6688          jsr       _strcpy
00003D04  504F      6689          addq.w    #8,A7
00003D06  2003      6690          move.l    D3,D0
00003D08  601E      6691          bra.s     ltoa_4
                    6692   ltoa_7:
00003D0A  2044      6693          move.l    D4,A0
00003D0C  5284      6694          addq.l    #1,D4
00003D0E  10BC 002D 6695          move.b    #45,(A0)
                    6696   ltoa_5:
00003D12  2F05      6697          move.l    D5,-(A7)
00003D14  2F02      6698          move.l    D2,-(A7)
00003D16  2F04      6699          move.l    D4,-(A7)
00003D18  4EB8 3C30 6700          jsr       @itoa_convert
00003D1C  DEFC 000C 6701          add.w     #12,A7
00003D20  2800      6702          move.l    D0,D4
00003D22  2044      6703          move.l    D4,A0
00003D24  4210      6704          clr.b     (A0)
00003D26  2003      6705          move.l    D3,D0
                    6706   ltoa_4:
00003D28  4CDF 003C 6707          movem.l   (A7)+,D2/D3/D4/D5
00003D2C  4E5E      6708          unlk      A6
00003D2E  4E75      6709          rts
                    6710   _ultoa:
00003D30  4E56 0000 6711          link      A6,#0
00003D34  48E7 3800 6712          movem.l   D2/D3/D4,-(A7)
00003D38  262E 0010 6713          move.l    16(A6),D3
00003D3C  282E 000C 6714          move.l    12(A6),D4
00003D40  2404      6715          move.l    D4,D2
00003D42  0C83 0000 6716          cmp.l     #2,D3
00003D46  0002      
00003D48  6D08      6717          blt.s     ultoa_3
00003D4A  0C83 0000 6718          cmp.l     #36,D3
00003D4E  0024      
00003D50  6F04      6719          ble.s     ultoa_1
                    6720   ultoa_3:
00003D52  2004      6721          move.l    D4,D0
00003D54  6018      6722          bra.s     ultoa_4
                    6723   ultoa_1:
00003D56  2F03      6724          move.l    D3,-(A7)
00003D58  2F2E 0008 6725          move.l    8(A6),-(A7)
00003D5C  2F02      6726          move.l    D2,-(A7)
00003D5E  4EB8 3C30 6727          jsr       @itoa_convert
00003D62  DEFC 000C 6728          add.w     #12,A7
00003D66  2400      6729          move.l    D0,D2
00003D68  2042      6730          move.l    D2,A0
00003D6A  4210      6731          clr.b     (A0)
00003D6C  2004      6732          move.l    D4,D0
                    6733   ultoa_4:
00003D6E  4CDF 001C 6734          movem.l   (A7)+,D2/D3/D4
00003D72  4E5E      6735          unlk      A6
00003D74  4E75      6736          rts
                    6737   _itoa:
00003D76  4E56 0000 6738          link      A6,#0
00003D7A  2F2E 0010 6739          move.l    16(A6),-(A7)
00003D7E  2F2E 000C 6740          move.l    12(A6),-(A7)
00003D82  2F2E 0008 6741          move.l    8(A6),-(A7)
00003D86  4EB8 3CAC 6742          jsr       _ltoa
00003D8A  DEFC 000C 6743          add.w     #12,A7
00003D8E  4E5E      6744          unlk      A6
00003D90  4E75      6745          rts
                    6746   ULMUL:
00003D92  4E56 0000 6747          link    A6,#0
00003D96  48E7 C000 6748          movem.l D0/D1,-(A7)
00003D9A  222E 0008 6749          move.l  8(A6),D1
00003D9E  202E 000C 6750          move.l  12(A6),D0
00003DA2  602C      6751          bra.s   lmul_3
                    6752   LMUL:
00003DA4  4E56 0000 6753          link    A6,#0
00003DA8  48E7 C000 6754          movem.l D0/D1,-(A7)
00003DAC  222E 0008 6755          move.l  8(A6),D1
00003DB0  202E 000C 6756          move.l  12(A6),D0
00003DB4  4A80      6757          tst.l   D0
00003DB6  6A0A      6758          bpl.s   lmul_1
00003DB8  4480      6759          neg.l   D0
00003DBA  4A81      6760          tst.l   D1
00003DBC  6A0A      6761          bpl.s   lmul_2
00003DBE  4481      6762          neg.l   D1
00003DC0  600E      6763          bra.s   lmul_3
                    6764   lmul_1:
00003DC2  4A81      6765          tst.l   D1
00003DC4  6A0A      6766          bpl.s   lmul_3
00003DC6  4481      6767          neg.l   D1
                    6768   lmul_2:
00003DC8  6114      6769          bsr.s   domul
00003DCA  4481      6770          neg.l   D1
00003DCC  4080      6771          negx.l  D0
00003DCE  6002      6772          bra.s   lmul_4
                    6773   lmul_3:
00003DD0  610C      6774          bsr.s   domul
                    6775   lmul_4:
00003DD2  2D41 0008 6776          move.l  D1,8(A6)
00003DD6  4CDF 0003 6777          movem.l (A7)+,D0/D1
00003DDA  4E5E      6778          unlk    A6
00003DDC  4E75      6779          rts
                    6780   domul:
00003DDE  0C81 0000 6781          cmpi.l  #$FFFF,D1
00003DE2  FFFF      
00003DE4  620C      6782          bhi.s   domul_1
00003DE6  0C80 0000 6783          cmpi.l  #$FFFF,D0
00003DEA  FFFF      
00003DEC  620E      6784          bhi.s   domul_2
00003DEE  C2C0      6785          mulu    D0,D1
00003DF0  4E75      6786          rts
                    6787   domul_1:
00003DF2  0C80 0000 6788          cmpi.l  #$FFFF,D0
00003DF6  FFFF      
00003DF8  6218      6789          bhi.s   domul_4
00003DFA  6002      6790          bra.s   domul_3
                    6791   domul_2
00003DFC  C141      6792          exg     D0,D1
                    6793   domul_3:
00003DFE  2F02      6794          move.l  D2,-(A7)
00003E00  2401      6795          move.l  D1,D2
00003E02  4842      6796          swap    D2
00003E04  C2C0      6797          mulu    D0,D1
00003E06  C4C0      6798          mulu    D0,D2
00003E08  4842      6799          swap    D2
00003E0A  4242      6800          clr.w   D2
00003E0C  D282      6801          add.l   D2,D1
00003E0E  241F      6802          move.l  (A7)+,D2
00003E10  4E75      6803          rts
                    6804   domul_4:
00003E12  48E7 3000 6805          movem.l D2/D3,-(A7)
00003E16  2401      6806          move.l  D1,D2
00003E18  2601      6807          move.l  D1,D3
00003E1A  C2C0      6808          mulu    D0,D1
00003E1C  4842      6809          swap    D2
00003E1E  C4C0      6810          mulu    D0,D2
00003E20  4840      6811          swap    D0
00003E22  C6C0      6812          mulu    D0,D3
00003E24  D483      6813          add.l   D3,D2
00003E26  4842      6814          swap    D2
00003E28  4242      6815          clr.w   D2
00003E2A  D282      6816          add.l   D2,D1
00003E2C  4CDF 000C 6817          movem.l (A7)+,D2/D3
00003E30  4E75      6818          rts
                    6819   _strlen:
00003E32  206F 0004 6820          move.l    (4,A7),A0
00003E36  2248      6821          move.l    A0,A1
                    6822   strlen_1:
00003E38  4A19      6823          tst.b     (A1)+
00003E3A  66FC      6824          bne       strlen_1
00003E3C  2009      6825          move.l    A1,D0
00003E3E  9088      6826          sub.l     A0,D0
00003E40  5380      6827          subq.l    #1,D0
00003E42  4E75      6828          rts
                    6829          section   const
                    6830   
                    6831   @m68kde~2_1:
00003E44  0D0A 00   6832          dc.b      13,10,0
                    6833   @m68kde~2_2:
00003E48  0D53 7769 6834          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003E4C  7463 6865 
00003E50  7320 5357 
00003E54  5B        
00003E55  372D 305D 6835          dc.b      55,45,48,93,32,61,32,0
00003E59  203D 2000 
                    6836   @m68kde~2_3:
00003E5E  3000      6837          dc.b      48,0
                    6838   @m68kde~2_4:
00003E60  3100      6839          dc.b      49,0
                    6840   @m68kde~2_5:
00003E62  0D0A 4475 6841          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003E66  6D70 204D 
00003E6A  656D 6F72 
00003E6E  79        
00003E6F  2042 6C6F 6842          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003E73  636B 3A20 
00003E77  3C45 5343 
00003E7B  3E20      
00003E7D  746F 2041 6843          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003E81  626F 7274 
00003E85  2C20 3C53 
00003E89  50        
00003E8A  4143 453E 6844          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003E8E  2074 6F20 
00003E92  436F 6E74 
00003E96  69        
00003E97  6E75 6500 6845          dc.b      110,117,101,0
                    6846   @m68kde~2_6:
00003E9C  0D0A 456E 6847          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003EA0  7465 7220 
00003EA4  5374 6172 
00003EA8  74        
00003EA9  2041 6464 6848          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003EAD  7265 7373 
00003EB1  3A20 00   
                    6849   @m68kde~2_7:
00003EB4  0D0A 2530 6850          dc.b      13,10,37,48,56,120,32,0
00003EB8  3878 2000 
                    6851   @m68kde~2_8:
00003EBC  2530 3258 6852          dc.b      37,48,50,88,0
00003EC0  00        
                    6853   @m68kde~2_9:
00003EC2  2020 00   6854          dc.b      32,32,0
                    6855   @m68kde~2_10:
00003EC6  0D0A 4669 6856          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003ECA  6C6C 204D 
00003ECE  656D 6F72 
00003ED2  79        
00003ED3  2042 6C6F 6857          dc.b      32,66,108,111,99,107,0
00003ED7  636B 00   
                    6858   @m68kde~2_11:
00003EDA  0D0A 456E 6859          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003EDE  7465 7220 
00003EE2  456E 6420 
00003EE6  41        
00003EE7  6464 7265 6860          dc.b      100,100,114,101,115,115,58,32,0
00003EEB  7373 3A20 
00003EEF  00        
                    6861   @m68kde~2_12:
00003EF0  0D0A 456E 6862          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003EF4  7465 7220 
00003EF8  4669 6C6C 
00003EFC  20        
00003EFD  4461 7461 6863          dc.b      68,97,116,97,58,32,0
00003F01  3A20 00   
                    6864   @m68kde~2_13:
00003F04  0D0A 4669 6865          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003F08  6C6C 696E 
00003F0C  6720 4164 
00003F10  64        
00003F11  7265 7373 6866          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003F15  6573 205B 
00003F19  2425 3038 
00003F1D  58        
00003F1E  202D 2024 6867          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003F22  2530 3858 
00003F26  5D20 7769 
00003F2A  7468      
00003F2C  2024 2530 6868          dc.b      32,36,37,48,50,88,0
00003F30  3258 00   
                    6869   @m68kde~2_14:
00003F34  0D0A 5573 6870          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003F38  6520 4879 
00003F3C  7065 7254 
00003F40  65        
00003F41  726D 696E 6871          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003F45  616C 2074 
00003F49  6F20 5365 
00003F4D  6E64 2054 6872          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003F51  6578 7420 
00003F55  4669 6C65 
00003F59  2028 2E68 6873          dc.b      32,40,46,104,101,120,41,13,10,0
00003F5D  6578 290D 
00003F61  0A00      
                    6874   @m68kde~2_15:
00003F64  0D0A 4C6F 6875          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003F68  6164 2046 
00003F6C  6169 6C65 
00003F70  64        
00003F71  2061 7420 6876          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003F75  4164 6472 
00003F79  6573 7320 
00003F7D  3D        
00003F7E  205B 2425 6877          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003F82  3038 585D 
00003F86  0D0A 00   
                    6878   @m68kde~2_16:
00003F8A  0D0A 5375 6879          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003F8E  6363 6573 
00003F92  733A 2044 
00003F96  6F        
00003F97  776E 6C6F 6880          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003F9B  6164 6564 
00003F9F  2025 6420 
00003FA3  6279 7465 6881          dc.b      98,121,116,101,115,13,10,0
00003FA7  730D 0A00 
                    6882   @m68kde~2_17:
00003FAC  0D0A 4578 6883          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003FB0  616D 696E 
00003FB4  6520 616E 
00003FB8  64        
00003FB9  2043 6861 6884          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003FBD  6E67 6520 
00003FC1  4D65 6D6F 
00003FC5  72        
00003FC6  7900      6885          dc.b      121,0
                    6886   @m68kde~2_18:
00003FC8  0D0A 3C45 6887          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003FCC  5343 3E20 
00003FD0  746F 2053 
00003FD4  746F      
00003FD6  702C 203C 6888          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003FDA  5350 4143 
00003FDE  453E 2074 
00003FE2  6F20      
00003FE4  4164 7661 6889          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003FE8  6E63 652C 
00003FEC  2027 2D27 
00003FF0  2074      
00003FF2  6F20 476F 6890          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003FF6  2042 6163 
00003FFA  6B2C 203C 
00003FFE  4441      
00004000  5441 3E20 6891          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004004  746F 2063 
00004008  6861 6E67 
0000400C  65        
0000400D  00        6892          dc.b      0
                    6893   @m68kde~2_19:
0000400E  0D0A 456E 6894          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004012  7465 7220 
00004016  4164 6472 
0000401A  65        
0000401B  7373 3A20 6895          dc.b      115,115,58,32,0
0000401F  00        
                    6896   @m68kde~2_20:
00004020  0D0A 5B25 6897          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004024  3038 785D 
00004028  203A 2025 
0000402C  3032 78   
0000402F  2020 00   6898          dc.b      32,32,0
                    6899   @m68kde~2_21:
00004032  0D0A 5761 6900          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004036  726E 696E 
0000403A  6720 4368 
0000403E  61        
0000403F  6E67 6520 6901          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004043  4661 696C 
00004047  6564 3A20 
0000404B  57        
0000404C  726F 7465 6902          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004050  205B 2530 
00004054  3278 5D2C 
00004058  20        
00004059  5265 6164 6903          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
0000405D  205B 2530 
00004061  3278 5D00 
                    6904   @m68kde~2_22:
00004066  0D0A 4572 6905          dc.b      13,10,69,114,97,115,105,110,103,32,70,108,97
0000406A  6173 696E 
0000406E  6720 466C 
00004072  61        
00004073  7368 2063 6906          dc.b      115,104,32,99,104,105,112,46,46,46,46,0
00004077  6869 702E 
0000407B  2E2E 2E00 
                    6907   @m68kde~2_23:
00004080  0D0A 2A2A 6908          dc.b      13,10,42,42,42,42,42,42,42,42,70,105,110,105
00004084  2A2A 2A2A 
00004088  2A2A 4669 
0000408C  6E69      
0000408E  7368 6564 6909          dc.b      115,104,101,100,32,101,114,97,115,105,110,103
00004092  2065 7261 
00004096  7369 6E67 
0000409A  2A2A 2A2A 6910          dc.b      42,42,42,42,42,42,42,42,0
0000409E  2A2A 2A2A 
000040A2  00        
                    6911   @m68kde~2_24:
000040A4  0D0A 5772 6912          dc.b      13,10,87,114,105,116,105,110,103,32,80,114,111
000040A8  6974 696E 
000040AC  6720 5072 
000040B0  6F        
000040B1  6772 616D 6913          dc.b      103,114,97,109,32,116,111,32,70,108,97,115,104
000040B5  2074 6F20 
000040B9  466C 6173 
000040BD  68        
000040BE  2063 6869 6914          dc.b      32,99,104,105,112,46,46,46,46,0
000040C2  702E 2E2E 
000040C6  2E00      
                    6915   @m68kde~2_25:
000040C8  0D0A 2A2A 6916          dc.b      13,10,42,42,42,42,42,42,42,42,70,108,97,115
000040CC  2A2A 2A2A 
000040D0  2A2A 466C 
000040D4  6173      
000040D6  6820 4368 6917          dc.b      104,32,67,104,105,112,32,80,114,111,103,114
000040DA  6970 2050 
000040DE  726F 6772 
000040E2  616D 6D65 6918          dc.b      97,109,109,101,100,42,42,42,42,42,42,42,42,0
000040E6  642A 2A2A 
000040EA  2A2A 2A2A 
000040EE  2A00      
                    6919   @m68kde~2_26:
000040F0  0D0A 5665 6920          dc.b      13,10,86,101,114,105,102,121,105,110,103,32
000040F4  7269 6679 
000040F8  696E 6720 
000040FC  7468 6520 6921          dc.b      116,104,101,32,114,101,97,100,46,46,46,46,0
00004100  7265 6164 
00004104  2E2E 2E2E 
00004108  00        
                    6922   @m68kde~2_27:
0000410A  0D0A 4572 6923          dc.b      13,10,69,114,114,111,114,58,32,68,97,116,97
0000410E  726F 723A 
00004112  2044 6174 
00004116  61        
00004117  206D 6973 6924          dc.b      32,109,105,115,109,97,116,99,104,32,97,116,32
0000411B  6D61 7463 
0000411F  6820 6174 
00004123  20        
00004124  6C6F 6361 6925          dc.b      108,111,99,97,116,105,111,110,32,37,48,56,120
00004128  7469 6F6E 
0000412C  2025 3038 
00004130  78        
00004131  2E20 4578 6926          dc.b      46,32,69,120,112,101,99,116,101,100,32,100,97
00004135  7065 6374 
00004139  6564 2064 
0000413D  61        
0000413E  7461 203D 6927          dc.b      116,97,32,61,32,37,48,50,120,59,32,65,99,116
00004142  2025 3032 
00004146  783B 2041 
0000414A  6374      
0000414C  7561 6C20 6928          dc.b      117,97,108,32,68,97,116,97,32,37,48,50,120,0
00004150  4461 7461 
00004154  2025 3032 
00004158  7800      
                    6929   @m68kde~2_28:
0000415A  0D0A 2A2A 6930          dc.b      13,10,42,42,42,42,42,42,42,42,87,114,105,116
0000415E  2A2A 2A2A 
00004162  2A2A 5772 
00004166  6974      
00004168  696E 6720 6931          dc.b      105,110,103,32,67,111,109,112,108,101,116,101
0000416C  436F 6D70 
00004170  6C65 7465 
00004174  642A 2A2A 6932          dc.b      100,42,42,42,42,42,42,42,42,0
00004178  2A2A 2A2A 
0000417C  2A00      
                    6933   @m68kde~2_29:
0000417E  0D0A 4C6F 6934          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004182  6164 696E 
00004186  6720 5072 
0000418A  6F        
0000418B  6772 616D 6935          dc.b      103,114,97,109,32,70,114,111,109,32,70,108,97
0000418F  2046 726F 
00004193  6D20 466C 
00004197  61        
00004198  7368 2E2E 6936          dc.b      115,104,46,46,46,46,0
0000419C  2E2E 00   
                    6937   @m68kde~2_30:
000041A0  0D0A 2A2A 6938          dc.b      13,10,42,42,42,42,42,42,42,42,80,114,111,103
000041A4  2A2A 2A2A 
000041A8  2A2A 5072 
000041AC  6F67      
000041AE  7261 6D20 6939          dc.b      114,97,109,32,108,111,97,100,101,100,32,116
000041B2  6C6F 6164 
000041B6  6564 2074 
000041BA  6F20 5241 6940          dc.b      111,32,82,65,77,42,42,42,42,42,42,42,42,0
000041BE  4D2A 2A2A 
000041C2  2A2A 2A2A 
000041C6  2A00      
                    6941   @m68kde~2_31:
000041C8  2425 3038 6942          dc.b      36,37,48,56,88,32,32,0
000041CC  5820 2000 
                    6943   @m68kde~2_32:
000041D0  2000      6944          dc.b      32,0
                    6945   @m68kde~2_33:
000041D2  2E00      6946          dc.b      46,0
                    6947   @m68kde~2_34:
000041D4  2563 00   6948          dc.b      37,99,0
                    6949   @m68kde~2_35:
000041D8  00        6950          dc.b      0
                    6951   @m68kde~2_36:
000041DA  0D0A 0D0A 6952          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000041DE  2044 3020 
000041E2  3D20 2425 
000041E6  3038 58   
000041E9  2020 4130 6953          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000041ED  203D 2024 
000041F1  2530 3858 
000041F5  00        
                    6954   @m68kde~2_37:
000041F6  0D0A 2044 6955          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000041FA  3120 3D20 
000041FE  2425 3038 
00004202  5820 20   
00004205  4131 203D 6956          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004209  2024 2530 
0000420D  3858 00   
                    6957   @m68kde~2_38:
00004210  0D0A 2044 6958          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004214  3220 3D20 
00004218  2425 3038 
0000421C  5820 20   
0000421F  4132 203D 6959          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004223  2024 2530 
00004227  3858 00   
                    6960   @m68kde~2_39:
0000422A  0D0A 2044 6961          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000422E  3320 3D20 
00004232  2425 3038 
00004236  5820 20   
00004239  4133 203D 6962          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000423D  2024 2530 
00004241  3858 00   
                    6963   @m68kde~2_40:
00004244  0D0A 2044 6964          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004248  3420 3D20 
0000424C  2425 3038 
00004250  5820 20   
00004253  4134 203D 6965          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004257  2024 2530 
0000425B  3858 00   
                    6966   @m68kde~2_41:
0000425E  0D0A 2044 6967          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004262  3520 3D20 
00004266  2425 3038 
0000426A  5820 20   
0000426D  4135 203D 6968          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004271  2024 2530 
00004275  3858 00   
                    6969   @m68kde~2_42:
00004278  0D0A 2044 6970          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000427C  3620 3D20 
00004280  2425 3038 
00004284  5820 20   
00004287  4136 203D 6971          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000428B  2024 2530 
0000428F  3858 00   
                    6972   @m68kde~2_43:
00004292  0D0A 2044 6973          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004296  3720 3D20 
0000429A  2425 3038 
0000429E  5820 20   
000042A1  4137 203D 6974          dc.b      65,55,32,61,32,36,37,48,56,88,0
000042A5  2024 2530 
000042A9  3858 00   
                    6975   @m68kde~2_44:
000042AC  0D0A 0D0A 6976          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000042B0  5553 5020 
000042B4  3D20 2425 
000042B8  3038 58   
000042BB  2020 2841 6977          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000042BF  3729 2055 
000042C3  7365 7220 
000042C7  5350      
000042C9  00        6978          dc.b      0
                    6979   @m68kde~2_45:
000042CA  0D0A 5353 6980          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000042CE  5020 3D20 
000042D2  2425 3038 
000042D6  5820 20   
000042D9  2841 3729 6981          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000042DD  2053 7570 
000042E1  6572 7669 
000042E5  73        
000042E6  6F72 2053 6982          dc.b      111,114,32,83,80,0
000042EA  5000      
                    6983   @m68kde~2_46:
000042EC  0D0A 2053 6984          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000042F0  5220 3D20 
000042F4  2425 3034 
000042F8  5820 20   
000042FB  2000      6985          dc.b      32,0
                    6986   @m68kde~2_47:
000042FE  2020 205B 6987          dc.b      32,32,32,91,0
00004302  00        
                    6988   @m68kde~2_48:
00004304  0D0A 2050 6989          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004308  4320 3D20 
0000430C  2425 3038 
00004310  5820 20   
00004313  00        6990          dc.b      0
                    6991   @m68kde~2_49:
00004314  5B40 2042 6992          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004318  5245 414B 
0000431C  504F 494E 
00004320  545D 00   
                    6993   @m68kde~2_50:
00004324  0D0A 5750 6994          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004328  2564 203D 
0000432C  2025 7300 
                    6995   @m68kde~2_51:
00004330  0D0A 0D0A 6996          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004334  0D0A 0D0A 
00004338  0D0A 0D0A 
0000433C  5369 6E   
0000433F  676C 6520 6997          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004343  5374 6570 
00004347  2020 3A5B 
0000434B  4F        
0000434C  4E5D 00   6998          dc.b      78,93,0
                    6999   @m68kde~2_52:
00004350  0D0A 4272 7000          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004354  6561 6B20 
00004358  506F 696E 
0000435C  74        
0000435D  7320 3A5B 7001          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004361  4469 7361 
00004365  626C 6564 
00004369  5D        
0000436A  00        7002          dc.b      0
                    7003   @m68kde~2_53:
0000436C  0D0A 5072 7004          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004370  6573 7320 
00004374  3C53 5041 
00004378  4345      
0000437A  3E20 746F 7005          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
0000437E  2045 7865 
00004382  6375 7465 
00004386  20        
00004387  4E65 7874 7006          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000438B  2049 6E73 
0000438F  7472 7563 
00004393  7469 6F6E 7007          dc.b      116,105,111,110,0
00004397  00        
                    7008   @m68kde~2_54:
00004398  0D0A 5072 7009          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000439C  6573 7320 
000043A0  3C45 5343 
000043A4  3E20      
000043A6  746F 2052 7010          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000043AA  6573 756D 
000043AE  6520 5072 
000043B2  6F67 7261 7011          dc.b      111,103,114,97,109,0
000043B6  6D00      
                    7012   @m68kde~2_55:
000043B8  0D0A 496C 7013          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000043BC  6C65 6761 
000043C0  6C20 4461 
000043C4  74        
000043C5  6120 5265 7014          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000043C9  6769 7374 
000043CD  6572 203A 
000043D1  20        
000043D2  5573 6520 7015          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000043D6  4430 2D44 
000043DA  372E 2E2E 
000043DE  2E2E      
000043E0  0D0A 00   7016          dc.b      13,10,0
                    7017   @m68kde~2_56:
000043E4  0D0A 4425 7018          dc.b      13,10,68,37,99,32,61,32,0
000043E8  6320 3D20 
000043EC  00        
                    7019   @m68kde~2_57:
000043EE  0D0A 496C 7020          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000043F2  6C65 6761 
000043F6  6C20 4164 
000043FA  64        
000043FB  7265 7373 7021          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000043FF  2052 6567 
00004403  6973 7465 
00004407  7220 3A20 7022          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000440B  5573 6520 
0000440F  4130 2D41 
00004413  372E      
00004415  2E2E 2E2E 7023          dc.b      46,46,46,46,13,10,0
00004419  0D0A 00   
                    7024   @m68kde~2_58:
0000441C  0D0A 4125 7025          dc.b      13,10,65,37,99,32,61,32,0
00004420  6320 3D20 
00004424  00        
                    7026   @m68kde~2_59:
00004426  0D0A 5573 7027          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000442A  6572 2053 
0000442E  5020 3D20 
00004432  00        
                    7028   @m68kde~2_60:
00004434  0D0A 496C 7029          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004438  6C65 6761 
0000443C  6C20 5265 
00004440  67        
00004441  6973 7465 7030          dc.b      105,115,116,101,114,46,46,46,46,0
00004445  722E 2E2E 
00004449  2E00      
                    7031   @m68kde~2_61:
0000444C  0D0A 5379 7032          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004450  7374 656D 
00004454  2053 5020 
00004458  3D        
00004459  2000      7033          dc.b      32,0
                    7034   @m68kde~2_62:
0000445C  0D0A 5043 7035          dc.b      13,10,80,67,32,61,32,0
00004460  203D 2000 
                    7036   @m68kde~2_63:
00004464  0D0A 5352 7037          dc.b      13,10,83,82,32,61,32,0
00004468  203D 2000 
                    7038   @m68kde~2_64:
0000446C  0D0A 496C 7039          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004470  6C65 6761 
00004474  6C20 5265 
00004478  67        
00004479  6973 7465 7040          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000447D  723A 2055 
00004481  7365 2041 
00004485  30        
00004486  2D41 372C 7041          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000448A  2044 302D 
0000448E  4437 2C20 
00004492  5353 50   
00004495  2C20 5553 7042          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004499  502C 2050 
0000449D  4320 6F72 
000044A1  2053      
000044A3  520D 0A00 7043          dc.b      82,13,10,0
                    7044   @m68kde~2_65:
000044A8  0D0A 0D0A 7045          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000044AC  4E75 6D20 
000044B0  2020 2020 
000044B4  4164      
000044B6  6472 6573 7046          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000044BA  7320 2020 
000044BE  2020 2049 
000044C2  6E        
000044C3  7374 7275 7047          dc.b      115,116,114,117,99,116,105,111,110,0
000044C7  6374 696F 
000044CB  6E00      
                    7048   @m68kde~2_66:
000044CE  0D0A 2D2D 7049          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000044D2  2D20 2020 
000044D6  2020 2D2D 
000044DA  2D2D 2D   
000044DD  2D2D 2D2D 7050          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000044E1  2020 2020 
000044E5  2D2D 2D2D 
000044E9  2D2D 2D   
000044EC  2D2D 2D2D 7051          dc.b      45,45,45,45,0
000044F0  00        
                    7052   @m68kde~2_67:
000044F2  0D0A 4E6F 7053          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000044F6  2042 7265 
000044FA  616B 506F 
000044FE  69        
000044FF  6E74 7320 7054          dc.b      110,116,115,32,83,101,116,0
00004503  5365 7400 
                    7055   @m68kde~2_68:
00004508  0D0A 2533 7056          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000450C  6420 2020 
00004510  2020 2425 
00004514  3038 78   
00004517  00        7057          dc.b      0
                    7058   @m68kde~2_69:
00004518  0D0A 4E75 7059          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000451C  6D20 2020 
00004520  2020 4164 
00004524  6472      
00004526  6573 7300 7060          dc.b      101,115,115,0
                    7061   @m68kde~2_70:
0000452A  0D0A 2D2D 7062          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000452E  2D20 2020 
00004532  2020 2D2D 
00004536  2D2D 2D   
00004539  2D2D 2D2D 7063          dc.b      45,45,45,45,0
0000453D  00        
                    7064   @m68kde~2_71:
0000453E  0D0A 4E6F 7065          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004542  2057 6174 
00004546  6368 506F 
0000454A  69        
0000454B  6E74 7320 7066          dc.b      110,116,115,32,83,101,116,0
0000454F  5365 7400 
                    7067   @m68kde~2_72:
00004554  0D0A 456E 7068          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004558  7465 7220 
0000455C  4272 6561 
00004560  6B        
00004561  2050 6F69 7069          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004565  6E74 204E 
00004569  756D 6265 
0000456D  72        
0000456E  3A20 00   7070          dc.b      58,32,0
                    7071   @m68kde~2_73:
00004572  0D0A 496C 7072          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004576  6C65 6761 
0000457A  6C20 5261 
0000457E  6E        
0000457F  6765 203A 7073          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004583  2055 7365 
00004587  2030 202D 
0000458B  2037      
0000458D  00        7074          dc.b      0
                    7075   @m68kde~2_74:
0000458E  0D0A 4272 7076          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004592  6561 6B20 
00004596  506F 696E 
0000459A  74        
0000459B  2043 6C65 7077          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000459F  6172 6564 
000045A3  2E2E 2E2E 
000045A7  2E        
000045A8  0D0A 00   7078          dc.b      13,10,0
                    7079   @m68kde~2_75:
000045AC  0D0A 4272 7080          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000045B0  6561 6B20 
000045B4  506F 696E 
000045B8  74        
000045B9  2077 6173 7081          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000045BD  6E27 7420 
000045C1  5365 742E 
000045C5  2E        
000045C6  2E2E 2E00 7082          dc.b      46,46,46,0
                    7083   @m68kde~2_76:
000045CA  0D0A 456E 7084          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000045CE  7465 7220 
000045D2  5761 7463 
000045D6  68        
000045D7  2050 6F69 7085          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000045DB  6E74 204E 
000045DF  756D 6265 
000045E3  72        
000045E4  3A20 00   7086          dc.b      58,32,0
                    7087   @m68kde~2_77:
000045E8  0D0A 5761 7088          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000045EC  7463 6820 
000045F0  506F 696E 
000045F4  74        
000045F5  2043 6C65 7089          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000045F9  6172 6564 
000045FD  2E2E 2E2E 
00004601  2E        
00004602  0D0A 00   7090          dc.b      13,10,0
                    7091   @m68kde~2_78:
00004606  0D0A 5761 7092          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000460A  7463 6820 
0000460E  506F 696E 
00004612  74        
00004613  2057 6173 7093          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004617  206E 6F74 
0000461B  2053 6574 
0000461F  2E        
00004620  2E2E 2E2E 7094          dc.b      46,46,46,46,0
00004624  00        
                    7095   @m68kde~2_79:
00004626  0D0A 4E6F 7096          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000462A  2046 5245 
0000462E  4520 4272 
00004632  6561      
00004634  6B20 506F 7097          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004638  696E 7473 
0000463C  2E2E 2E2E 
00004640  2E        
00004641  00        7098          dc.b      0
                    7099   @m68kde~2_80:
00004642  0D0A 4272 7100          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004646  6561 6B20 
0000464A  506F 696E 
0000464E  74        
0000464F  2041 6464 7101          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004653  7265 7373 
00004657  3A20 00   
                    7102   @m68kde~2_81:
0000465A  0D0A 4572 7103          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000465E  726F 7220 
00004662  3A20 4272 
00004666  65        
00004667  616B 2050 7104          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000466B  6F69 6E74 
0000466F  7320 4341 
00004673  4E        
00004674  4E4F 5420 7105          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004678  6265 2073 
0000467C  6574 2061 
00004680  74        
00004681  204F 4444 7106          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004685  2061 6464 
00004689  7265 7373 
0000468D  65        
0000468E  7300      7107          dc.b      115,0
                    7108   @m68kde~2_82:
00004690  0D0A 4572 7109          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004694  726F 7220 
00004698  3A20 4272 
0000469C  65        
0000469D  616B 2050 7110          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000046A1  6F69 6E74 
000046A5  7320 4341 
000046A9  4E        
000046AA  4E4F 5420 7111          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000046AE  6265 2073 
000046B2  6574 2066 
000046B6  6F        
000046B7  7220 524F 7112          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000046BB  4D20 696E 
000046BF  2052 616E 
000046C3  67        
000046C4  6520 3A20 7113          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000046C8  5B24 302D 
000046CC  2430 3030 
000046D0  3037 46   
000046D3  4646 5D00 7114          dc.b      70,70,93,0
                    7115   @m68kde~2_83:
000046D8  0D0A 4572 7116          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000046DC  726F 723A 
000046E0  2042 7265 
000046E4  61        
000046E5  6B20 506F 7117          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000046E9  696E 7420 
000046ED  416C 7265 
000046F1  6164 7920 7118          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000046F5  4578 6973 
000046F9  7473 2061 
000046FD  74        
000046FE  2041 6464 7119          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004702  7265 7373 
00004706  203A 2025 
0000470A  30        
0000470B  3878 0D0A 7120          dc.b      56,120,13,10,0
0000470F  00        
                    7121   @m68kde~2_84:
00004710  0D0A 4272 7122          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004714  6561 6B20 
00004718  506F 696E 
0000471C  74        
0000471D  2053 6574 7123          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004721  2061 7420 
00004725  4164 6472 
00004729  65        
0000472A  7373 3A20 7124          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000472E  5B24 2530 
00004732  3878 5D00 
                    7125   @m68kde~2_85:
00004736  0D0A 4E6F 7126          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
0000473A  2046 5245 
0000473E  4520 5761 
00004742  7463      
00004744  6820 506F 7127          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004748  696E 7473 
0000474C  2E2E 2E2E 
00004750  2E        
00004751  00        7128          dc.b      0
                    7129   @m68kde~2_86:
00004752  0D0A 5761 7130          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004756  7463 6820 
0000475A  506F 696E 
0000475E  74        
0000475F  2041 6464 7131          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004763  7265 7373 
00004767  3A20 00   
                    7132   @m68kde~2_87:
0000476A  0D0A 4572 7133          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
0000476E  726F 723A 
00004772  2057 6174 
00004776  63        
00004777  6820 506F 7134          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
0000477B  696E 7420 
0000477F  416C 7265 
00004783  6164 7920 7135          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004787  5365 7420 
0000478B  6174 2041 
0000478F  64        
00004790  6472 6573 7136          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004794  7320 3A20 
00004798  2530 3878 
0000479C  0D        
0000479D  0A00      7137          dc.b      10,0
                    7138   @m68kde~2_88:
000047A0  0D0A 5761 7139          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000047A4  7463 6820 
000047A8  506F 696E 
000047AC  74        
000047AD  2053 6574 7140          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000047B1  2061 7420 
000047B5  4164 6472 
000047B9  65        
000047BA  7373 3A20 7141          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000047BE  5B24 2530 
000047C2  3878 5D00 
                    7142   @m68kde~2_89:
000047C6  0D0A 0D0A 7143          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000047CA  0D0A 0D0A 
000047CE  4042 5245 
000047D2  414B 50   
000047D5  4F49 4E54 7144          dc.b      79,73,78,84,0
000047D9  00        
                    7145   @m68kde~2_90:
000047DA  0D0A 5369 7146          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000047DE  6E67 6C65 
000047E2  2053 7465 
000047E6  70        
000047E7  203A 205B 7147          dc.b      32,58,32,91,79,78,93,0
000047EB  4F4E 5D00 
                    7148   @m68kde~2_91:
000047F0  0D0A 4272 7149          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000047F4  6561 6B50 
000047F8  6F69 6E74 
000047FC  73        
000047FD  203A 205B 7150          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004801  456E 6162 
00004805  6C65 645D 
00004809  00        
                    7151   @m68kde~2_92:
0000480A  0D0A 5072 7152          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000480E  6573 7320 
00004812  3C45 5343 
00004816  3E20      
00004818  746F 2052 7153          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000481C  6573 756D 
00004820  6520 5573 
00004824  6572 2050 7154          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004828  726F 6772 
0000482C  616D 0D0A 
00004830  00        
                    7155   @m68kde~2_93:
00004832  0D0A 556E 7156          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004836  6B6E 6F77 
0000483A  6E20 436F 
0000483E  6D        
0000483F  6D61 6E64 7157          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004843  2E2E 2E2E 
00004847  2E0D 0A00 
                    7158   @m68kde~2_94:
0000484C  0D0A 5072 7159          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004850  6F67 7261 
00004854  6D20 456E 
00004858  64        
00004859  6564 2028 7160          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
0000485D  5452 4150 
00004861  2023 3135 
00004865  292E      
00004867  2E2E 2E00 7161          dc.b      46,46,46,0
                    7162   @m68kde~2_95:
0000486C  0D0A 4B69 7163          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004870  6C6C 2041 
00004874  6C6C 2042 
00004878  72        
00004879  6561 6B20 7164          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
0000487D  506F 696E 
00004881  7473 2E2E 
00004885  2E        
00004886  2879 2F6E 7165          dc.b      40,121,47,110,41,63,0
0000488A  293F 00   
                    7166   @m68kde~2_96:
0000488E  0D0A 4B69 7167          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004892  6C6C 2041 
00004896  6C6C 2057 
0000489A  61        
0000489B  7463 6820 7168          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
0000489F  506F 696E 
000048A3  7473 2E2E 
000048A7  2E        
000048A8  2879 2F6E 7169          dc.b      40,121,47,110,41,63,0
000048AC  293F 00   
                    7170   @m68kde~2_97:
000048B0  0D0A 2D2D 7171          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000048B4  2D2D 2D2D 
000048B8  2D2D 2D2D 
000048BC  2D2D 2D   
000048BF  2D2D 2D2D 7172          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000048C3  2D2D 2D2D 
000048C7  2D2D 2D2D 
000048CB  2D2D 2D   
000048CE  2D2D 2D2D 7173          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000048D2  2D2D 2D2D 
000048D6  2D2D 2D2D 
000048DA  2D2D 2D   
000048DD  2D2D 2D2D 7174          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000048E1  2D2D 2D2D 
000048E5  2D2D 2D2D 
000048E9  2D2D 2D   
000048EC  2D2D 2D2D 7175          dc.b      45,45,45,45,45,45,0
000048F0  2D2D 00   
                    7176   @m68kde~2_98:
000048F4  0D0A 2020 7177          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000048F8  4465 6275 
000048FC  6767 6572 
00004900  20        
00004901  436F 6D6D 7178          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004905  616E 6420 
00004909  5375 6D6D 
0000490D  6172 7900 7179          dc.b      97,114,121,0
                    7180   @m68kde~2_99:
00004912  0D0A 2020 7181          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004916  2E28 7265 
0000491A  6729 2020 
0000491E  2020      
00004920  2020 202D 7182          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004924  2043 6861 
00004928  6E67 6520 
0000492C  5265      
0000492E  6769 7374 7183          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004932  6572 733A 
00004936  2065 2E67 
0000493A  2041 302D 7184          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000493E  4137 2C44 
00004942  302D 4437 
00004946  2C50 43   
00004949  2C53 5350 7185          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000494D  2C55 5350 
00004951  2C53 5200 
                    7186   @m68kde~2_100:
00004956  0D0A 2020 7187          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000495A  4244 2F42 
0000495E  532F 4243 
00004962  2F42 4B   
00004965  2020 2D20 7188          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004969  4272 6561 
0000496D  6B20 506F 
00004971  69        
00004972  6E74 3A20 7189          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004976  4469 7370 
0000497A  6C61 792F 
0000497E  53        
0000497F  6574 2F43 7190          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004983  6C65 6172 
00004987  2F4B 696C 
0000498B  6C        
0000498C  00        7191          dc.b      0
                    7192   @m68kde~2_101:
0000498E  0D0A 2020 7193          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004992  4320 2020 
00004996  2020 2020 
0000499A  2020 20   
0000499D  2020 2D20 7194          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000049A1  436F 7079 
000049A5  2050 726F 
000049A9  67        
000049AA  7261 6D20 7195          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000049AE  6672 6F6D 
000049B2  2046 6C61 
000049B6  73        
000049B7  6820 746F 7196          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000049BB  204D 6169 
000049BF  6E20 4D65 
000049C3  6D        
000049C4  6F72 7900 7197          dc.b      111,114,121,0
                    7198   @m68kde~2_102:
000049C8  0D0A 2020 7199          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
000049CC  4420 2020 
000049D0  2020 2020 
000049D4  2020 20   
000049D7  2020 2D20 7200          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000049DB  4475 6D70 
000049DF  204D 656D 
000049E3  6F        
000049E4  7279 2043 7201          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000049E8  6F6E 7465 
000049EC  6E74 7320 
000049F0  746F 2053 7202          dc.b      116,111,32,83,99,114,101,101,110,0
000049F4  6372 6565 
000049F8  6E00      
                    7203   @m68kde~2_103:
000049FA  0D0A 2020 7204          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000049FE  4520 2020 
00004A02  2020 2020 
00004A06  2020 20   
00004A09  2020 2D20 7205          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004A0D  456E 7465 
00004A11  7220 5374 
00004A15  72        
00004A16  696E 6720 7206          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004A1A  696E 746F 
00004A1E  204D 656D 
00004A22  6F72 7900 7207          dc.b      111,114,121,0
                    7208   @m68kde~2_104:
00004A26  0D0A 2020 7209          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004A2A  4620 2020 
00004A2E  2020 2020 
00004A32  2020 20   
00004A35  2020 2D20 7210          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004A39  4669 6C6C 
00004A3D  204D 656D 
00004A41  6F        
00004A42  7279 2077 7211          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004A46  6974 6820 
00004A4A  4461 7461 
00004A4E  00        
                    7212   @m68kde~2_105:
00004A50  0D0A 2020 7213          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004A54  4720 2020 
00004A58  2020 2020 
00004A5C  2020 20   
00004A5F  2020 2D20 7214          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004A63  476F 2050 
00004A67  726F 6772 
00004A6B  61        
00004A6C  6D20 5374 7215          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004A70  6172 7469 
00004A74  6E67 2061 
00004A78  74        
00004A79  2041 6464 7216          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004A7D  7265 7373 
00004A81  3A20 2425 
00004A85  30        
00004A86  3858 00   7217          dc.b      56,88,0
                    7218   @m68kde~2_106:
00004A8A  0D0A 2020 7219          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004A8E  4C20 2020 
00004A92  2020 2020 
00004A96  2020 20   
00004A99  2020 2D20 7220          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004A9D  4C6F 6164 
00004AA1  2050 726F 
00004AA5  67        
00004AA6  7261 6D20 7221          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004AAA  282E 4845 
00004AAE  5820 6669 
00004AB2  6C        
00004AB3  6529 2066 7222          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004AB7  726F 6D20 
00004ABB  4C61 7074 
00004ABF  6F        
00004AC0  7000      7223          dc.b      112,0
                    7224   @m68kde~2_107:
00004AC2  0D0A 2020 7225          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004AC6  4D20 2020 
00004ACA  2020 2020 
00004ACE  2020 20   
00004AD1  2020 2D20 7226          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004AD5  4D65 6D6F 
00004AD9  7279 2045 
00004ADD  78        
00004ADE  616D 696E 7227          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004AE2  6520 616E 
00004AE6  6420 4368 
00004AEA  61        
00004AEB  6E67 6500 7228          dc.b      110,103,101,0
                    7229   @m68kde~2_108:
00004AF0  0D0A 2020 7230          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004AF4  5020 2020 
00004AF8  2020 2020 
00004AFC  2020 20   
00004AFF  2020 2D20 7231          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004B03  5072 6F67 
00004B07  7261 6D20 
00004B0B  46        
00004B0C  6C61 7368 7232          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004B10  204D 656D 
00004B14  6F72 7920 
00004B18  7769 7468 7233          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004B1C  2055 7365 
00004B20  7220 5072 
00004B24  6F67 7261 7234          dc.b      111,103,114,97,109,0
00004B28  6D00      
                    7235   @m68kde~2_109:
00004B2A  0D0A 2020 7236          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004B2E  5220 2020 
00004B32  2020 2020 
00004B36  2020 20   
00004B39  2020 2D20 7237          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004B3D  4469 7370 
00004B41  6C61 7920 
00004B45  36        
00004B46  3830 3030 7238          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004B4A  2052 6567 
00004B4E  6973 7465 
00004B52  72        
00004B53  7300      7239          dc.b      115,0
                    7240   @m68kde~2_110:
00004B56  0D0A 2020 7241          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004B5A  5320 2020 
00004B5E  2020 2020 
00004B62  2020 20   
00004B65  2020 2D20 7242          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004B69  546F 6767 
00004B6D  6C65 204F 
00004B71  4E        
00004B72  2F4F 4646 7243          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004B76  2053 696E 
00004B7A  676C 6520 
00004B7E  53        
00004B7F  7465 7020 7244          dc.b      116,101,112,32,77,111,100,101,0
00004B83  4D6F 6465 
00004B87  00        
                    7245   @m68kde~2_111:
00004B88  0D0A 2020 7246          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004B8C  544D 2020 
00004B90  2020 2020 
00004B94  2020 20   
00004B97  2020 2D20 7247          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004B9B  5465 7374 
00004B9F  204D 656D 
00004BA3  6F        
00004BA4  7279 00   7248          dc.b      114,121,0
                    7249   @m68kde~2_112:
00004BA8  0D0A 2020 7250          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004BAC  5453 2020 
00004BB0  2020 2020 
00004BB4  2020 20   
00004BB7  2020 2D20 7251          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004BBB  5465 7374 
00004BBF  2053 7769 
00004BC3  74        
00004BC4  6368 6573 7252          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004BC8  3A20 5357 
00004BCC  372D 3000 
                    7253   @m68kde~2_113:
00004BD0  0D0A 2020 7254          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004BD4  5444 2020 
00004BD8  2020 2020 
00004BDC  2020 20   
00004BDF  2020 2D20 7255          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004BE3  5465 7374 
00004BE7  2044 6973 
00004BEB  70        
00004BEC  6C61 7973 7256          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004BF0  3A20 4C45 
00004BF4  4473 2061 
00004BF8  6E        
00004BF9  6420 372D 7257          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004BFD  5365 676D 
00004C01  656E 7400 
                    7258   @m68kde~2_114:
00004C06  0D0A 2020 7259          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004C0A  5744 2F57 
00004C0E  532F 5743 
00004C12  2F57 4B   
00004C15  2020 2D20 7260          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004C19  5761 7463 
00004C1D  6820 506F 
00004C21  696E      
00004C23  743A 2044 7261          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004C27  6973 706C 
00004C2B  6179 2F53 
00004C2F  65        
00004C30  742F 436C 7262          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004C34  6561 722F 
00004C38  4B69 6C6C 
00004C3C  00        
                    7263   @m68kde~2_115:
00004C3E  0D0A 2300 7264          dc.b      13,10,35,0
                    7265   @m68kde~2_116:
00004C42  0D0A 5072 7266          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004C46  6F67 7261 
00004C4A  6D20 5275 
00004C4E  6E        
00004C4F  6E69 6E67 7267          dc.b      110,105,110,103,46,46,46,46,46,0
00004C53  2E2E 2E2E 
00004C57  2E00      
                    7268   @m68kde~2_117:
00004C5A  0D0A 5072 7269          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004C5E  6573 7320 
00004C62  3C52 4553 
00004C66  4554      
00004C68  3E20 6275 7270          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004C6C  7474 6F6E 
00004C70  203C 4B65 
00004C74  79        
00004C75  303E 206F 7271          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004C79  6E20 4445 
00004C7D  3120 746F 
00004C81  2073      
00004C83  746F 7000 7272          dc.b      116,111,112,0
                    7273   @m68kde~2_118:
00004C88  0D0A 4572 7274          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004C8C  726F 723A 
00004C90  2050 7265 
00004C94  73        
00004C95  7320 2747 7275          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004C99  2720 6669 
00004C9D  7273 7420 
00004CA1  74        
00004CA2  6F20 7374 7276          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004CA6  6172 7420 
00004CAA  7072 6F67 
00004CAE  7261 6D00 7277          dc.b      114,97,109,0
                    7278   @m68kde~2_119:
00004CB2  0D0A 5369 7279          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004CB6  6E67 6C65 
00004CBA  2053 7465 
00004CBE  70        
00004CBF  2020 3A5B 7280          dc.b      32,32,58,91,79,78,93,0
00004CC3  4F4E 5D00 
                    7281   @m68kde~2_120:
00004CC8  0D0A 5072 7282          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004CCC  6573 7320 
00004CD0  2747 2720 
00004CD4  74        
00004CD5  6F20 5472 7283          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004CD9  6163 6520 
00004CDD  5072 6F67 
00004CE1  72        
00004CE2  616D 2066 7284          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004CE6  726F 6D20 
00004CEA  6164 6472 
00004CEE  6573 7320 7285          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004CF2  2425 582E 
00004CF6  2E2E 2E2E 
00004CFA  00        
                    7286   @m68kde~2_121:
00004CFC  0D0A 5075 7287          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004D00  7368 203C 
00004D04  5245 5345 
00004D08  5420      
00004D0A  4275 7474 7288          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004D0E  6F6E 3E20 
00004D12  746F 2053 
00004D16  74        
00004D17  6F70 2E2E 7289          dc.b      111,112,46,46,46,46,46,0
00004D1B  2E2E 2E00 
                    7290   @m68kde~2_122:
00004D20  0D0A 5369 7291          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D24  6E67 6C65 
00004D28  2053 7465 
00004D2C  70        
00004D2D  203A 205B 7292          dc.b      32,58,32,91,79,70,70,93,0
00004D31  4F46 465D 
00004D35  00        
                    7293   @m68kde~2_123:
00004D36  0D0A 4272 7294          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D3A  6561 6B20 
00004D3E  506F 696E 
00004D42  74        
00004D43  7320 3A5B 7295          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004D47  456E 6162 
00004D4B  6C65 645D 
00004D4F  00        
                    7296   @m68kde~2_124:
00004D50  0D0A 5072 7297          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004D54  6573 7320 
00004D58  3C45 5343 
00004D5C  3E20      
00004D5E  746F 2052 7298          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004D62  6573 756D 
00004D66  6520 5573 
00004D6A  6572 2050 7299          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004D6E  726F 6772 
00004D72  616D 2E2E 
00004D76  2E        
00004D77  2E2E 00   7300          dc.b      46,46,0
                    7301   @m68kde~2_125:
00004D7A  0D0A 5369 7302          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D7E  6E67 6C65 
00004D82  2053 7465 
00004D86  70        
00004D87  2020 3A5B 7303          dc.b      32,32,58,91,79,70,70,93,0
00004D8B  4F46 465D 
00004D8F  00        
                    7304   @m68kde~2_126:
00004D90  0D0A 0D0A 7305          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004D94  5072 6F67 
00004D98  7261 6D20 
00004D9C  41        
00004D9D  424F 5254 7306          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004DA1  2021 2121 
00004DA5  2121 210D 
00004DA9  0A00      
                    7307   @m68kde~2_127:
00004DAC  2573 0D0A 7308          dc.b      37,115,13,10,0
00004DB0  00        
                    7309   @m68kde~2_128:
00004DB2  0D0A 0D0A 7310          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004DB6  5072 6F67 
00004DBA  7261 6D20 
00004DBE  41        
00004DBF  424F 5254 7311          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004DC3  2021 2121 
00004DC7  2121 00   
                    7312   @m68kde~2_129:
00004DCA  0D0A 556E 7313          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004DCE  6861 6E64 
00004DD2  6C65 6420 
00004DD6  49        
00004DD7  6E74 6572 7314          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004DDB  7275 7074 
00004DDF  3A20 4952 
00004DE3  5125 6420 7315          dc.b      81,37,100,32,33,33,33,33,33,0
00004DE7  2121 2121 
00004DEB  2100      
                    7316   @m68kde~2_130:
00004DEE  4144 4452 7317          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004DF2  4553 5320 
00004DF6  4552 524F 
00004DFA  523A 20   
00004DFD  3136 206F 7318          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004E01  7220 3332 
00004E05  2042 6974 
00004E09  2054      
00004E0B  7261 6E73 7319          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004E0F  6665 7220 
00004E13  746F 2F66 
00004E17  726F 6D20 7320          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004E1B  616E 204F 
00004E1F  4444 2041 
00004E23  64        
00004E24  6472 6573 7321          dc.b      100,114,101,115,115,46,46,46,46,0
00004E28  732E 2E2E 
00004E2C  2E00      
                    7322   @m68kde~2_131:
00004E2E  556E 6861 7323          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004E32  6E64 6C65 
00004E36  6420 5472 
00004E3A  6170 2021 7324          dc.b      97,112,32,33,33,33,33,33,0
00004E3E  2121 2121 
00004E42  00        
                    7325   @m68kde~2_132:
00004E44  4255 5320 7326          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004E48  4572 726F 
00004E4C  7221 00   
                    7327   @m68kde~2_133:
00004E50  4144 4452 7328          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004E54  4553 5320 
00004E58  4572 726F 
00004E5C  7221      
00004E5E  00        7329          dc.b      0
                    7330   @m68kde~2_134:
00004E60  494C 4C45 7331          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004E64  4741 4C20 
00004E68  494E 5354 
00004E6C  5255 43   
00004E6F  5449 4F4E 7332          dc.b      84,73,79,78,0
00004E73  00        
                    7333   @m68kde~2_135:
00004E74  4449 5649 7334          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004E78  4445 2042 
00004E7C  5920 5A45 
00004E80  524F 00   
                    7335   @m68kde~2_136:
00004E84  2743 484B 7336          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004E88  2720 494E 
00004E8C  5354 5255 
00004E90  4354 49   
00004E93  4F4E 00   7337          dc.b      79,78,0
                    7338   @m68kde~2_137:
00004E96  5452 4150 7339          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004E9A  5620 494E 
00004E9E  5354 5255 
00004EA2  4354 49   
00004EA5  4F4E 00   7340          dc.b      79,78,0
                    7341   @m68kde~2_138:
00004EA8  5052 4956 7342          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004EAC  494C 4547 
00004EB0  4520 5649 
00004EB4  4F4C 41   
00004EB7  5449 4F4E 7343          dc.b      84,73,79,78,0
00004EBB  00        
                    7344   @m68kde~2_139:
00004EBC  554E 494E 7345          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004EC0  4954 4941 
00004EC4  4C49 5345 
00004EC8  4420 49   
00004ECB  5251 00   7346          dc.b      82,81,0
                    7347   @m68kde~2_140:
00004ECE  5350 5552 7348          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004ED2  494F 5553 
00004ED6  2049 5251 
00004EDA  00        
                    7349   @m68kde~2_141:
00004EDC  0D0A 5374 7350          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004EE0  6172 7420 
00004EE4  4164 6472 
00004EE8  65        
00004EE9  7373 2069 7351          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004EED  6E20 4D65 
00004EF1  6D6F 7279 
00004EF5  3A20 00   7352          dc.b      58,32,0
                    7353   @m68kde~2_142:
00004EF8  0D0A 456E 7354          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004EFC  7465 7220 
00004F00  5374 7269 
00004F04  6E        
00004F05  6720 2845 7355          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004F09  5343 2074 
00004F0D  6F20 656E 
00004F11  64        
00004F12  2920 3A00 7356          dc.b      41,32,58,0
                    7357   @m68kde~2_143:
00004F16  0D0A 5768 7358          dc.b      13,10,87,104,105,99,104,32,77,101,109,111,114
00004F1A  6963 6820 
00004F1E  4D65 6D6F 
00004F22  72        
00004F23  7920 646F 7359          dc.b      121,32,100,111,32,121,111,117,32,119,97,110
00004F27  2079 6F75 
00004F2B  2077 616E 
00004F2F  7420 746F 7360          dc.b      116,32,116,111,32,116,101,115,116,63,32,69,110
00004F33  2074 6573 
00004F37  743F 2045 
00004F3B  6E        
00004F3C  7465 7220 7361          dc.b      116,101,114,32,48,32,102,111,114,32,68,82,65
00004F40  3020 666F 
00004F44  7220 4452 
00004F48  41        
00004F49  4D20 6F72 7362          dc.b      77,32,111,114,32,49,32,102,111,114,32,83,82
00004F4D  2031 2066 
00004F51  6F72 2053 
00004F55  52        
00004F56  414D 00   7363          dc.b      65,77,0
                    7364   @m68kde~2_144:
00004F5A  0D0A 5768 7365          dc.b      13,10,87,104,105,99,104,32,116,101,115,116,32
00004F5E  6963 6820 
00004F62  7465 7374 
00004F66  20        
00004F67  646F 2079 7366          dc.b      100,111,32,121,111,117,32,119,97,110,116,32
00004F6B  6F75 2077 
00004F6F  616E 7420 
00004F73  746F 2070 7367          dc.b      116,111,32,112,101,114,102,111,114,109,63,32
00004F77  6572 666F 
00004F7B  726D 3F20 
00004F7F  456E 7465 7368          dc.b      69,110,116,101,114,32,39,48,39,32,102,111,114
00004F83  7220 2730 
00004F87  2720 666F 
00004F8B  72        
00004F8C  2052 6561 7369          dc.b      32,82,101,97,100,32,111,114,32,39,49,39,32,102
00004F90  6420 6F72 
00004F94  2027 3127 
00004F98  2066      
00004F9A  6F72 2057 7370          dc.b      111,114,32,87,114,105,116,101,58,32,0
00004F9E  7269 7465 
00004FA2  3A20 00   
                    7371   @m68kde~2_145:
00004FA6  0D0A 4572 7372          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00004FAA  726F 723A 
00004FAE  2049 6E76 
00004FB2  61        
00004FB3  6C69 6420 7373          dc.b      108,105,100,32,73,110,112,117,116,0
00004FB7  496E 7075 
00004FBB  7400      
                    7374   @m68kde~2_146:
00004FBE  0D0A 5370 7375          dc.b      13,10,83,112,101,99,105,102,121,32,116,104,101
00004FC2  6563 6966 
00004FC6  7920 7468 
00004FCA  65        
00004FCB  206D 656D 7376          dc.b      32,109,101,109,111,114,121,32,116,101,115,116
00004FCF  6F72 7920 
00004FD3  7465 7374 
00004FD7  2074 7970 7377          dc.b      32,116,121,112,101,46,32,73,110,112,117,116
00004FDB  652E 2049 
00004FDF  6E70 7574 
00004FE3  2027 3027 7378          dc.b      32,39,48,39,32,102,111,114,32,66,121,116,101
00004FE7  2066 6F72 
00004FEB  2042 7974 
00004FEF  65        
00004FF0  732C 2027 7379          dc.b      115,44,32,39,49,39,32,102,111,114,32,87,111
00004FF4  3127 2066 
00004FF8  6F72 2057 
00004FFC  6F        
00004FFD  7264 2C20 7380          dc.b      114,100,44,32,97,110,100,32,39,50,39,32,102
00005001  616E 6420 
00005005  2732 2720 
00005009  66        
0000500A  6F72 204C 7381          dc.b      111,114,32,76,111,110,103,32,87,111,114,100
0000500E  6F6E 6720 
00005012  576F 7264 
00005016  3A20 00   7382          dc.b      58,32,0
                    7383   @m68kde~2_147:
0000501A  0D0A 4572 7384          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
0000501E  726F 723A 
00005022  2049 6E76 
00005026  61        
00005027  6C69 6420 7385          dc.b      108,105,100,32,73,110,112,117,116,33,0
0000502B  496E 7075 
0000502F  7421 00   
                    7386   @m68kde~2_148:
00005032  0D0A 5072 7387          dc.b      13,10,80,114,111,118,105,100,101,32,97,32,115
00005036  6F76 6964 
0000503A  6520 6120 
0000503E  73        
0000503F  7461 7274 7388          dc.b      116,97,114,116,32,97,100,100,114,101,115,115
00005043  2061 6464 
00005047  7265 7373 
0000504B  2066 6F72 7389          dc.b      32,102,111,114,32,121,111,117,114,32,100,97
0000504F  2079 6F75 
00005053  7220 6461 
00005057  7461 3A20 7390          dc.b      116,97,58,32,0
0000505B  00        
                    7391   @m68kde~2_149:
0000505C  0D0A 4572 7392          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00005060  726F 723A 
00005064  2049 6E76 
00005068  61        
00005069  6C69 6420 7393          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
0000506D  6164 6472 
00005071  6573 7321 
00005075  2053 7461 7394          dc.b      32,83,116,97,114,116,32,97,100,100,114,101,115
00005079  7274 2061 
0000507D  6464 7265 
00005081  73        
00005082  7320 666F 7395          dc.b      115,32,102,111,114,32,83,82,65,77,32,99,97,110
00005086  7220 5352 
0000508A  414D 2063 
0000508E  616E      
00005090  6E6F 7420 7396          dc.b      110,111,116,32,98,101,32,108,101,115,115,32
00005094  6265 206C 
00005098  6573 7320 
0000509C  7468 616E 7397          dc.b      116,104,97,110,32,70,48,48,48,48,48,48,48,32
000050A0  2046 3030 
000050A4  3030 3030 
000050A8  3020      
000050AA  6F72 2067 7398          dc.b      111,114,32,103,114,101,97,116,101,114,32,116
000050AE  7265 6174 
000050B2  6572 2074 
000050B6  6861 6E20 7399          dc.b      104,97,110,32,48,120,70,48,48,51,70,70,70,70
000050BA  3078 4630 
000050BE  3033 4646 
000050C2  4646      
000050C4  00        7400          dc.b      0
                    7401   @m68kde~2_150:
000050C6  0D0A 4572 7402          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
000050CA  726F 723A 
000050CE  2049 6E76 
000050D2  61        
000050D3  6C69 6420 7403          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
000050D7  6164 6472 
000050DB  6573 7321 
000050DF  2053 7461 7404          dc.b      32,83,116,97,114,116,32,97,100,100,114,101,115
000050E3  7274 2061 
000050E7  6464 7265 
000050EB  73        
000050EC  7320 666F 7405          dc.b      115,32,102,111,114,32,68,82,65,77,32,99,97,110
000050F0  7220 4452 
000050F4  414D 2063 
000050F8  616E      
000050FA  6E6F 7420 7406          dc.b      110,111,116,32,98,101,32,108,101,115,115,32
000050FE  6265 206C 
00005102  6573 7320 
00005106  7468 616E 7407          dc.b      116,104,97,110,32,48,57,48,48,48,48,48,48,32
0000510A  2030 3930 
0000510E  3030 3030 
00005112  3020      
00005114  6F72 2067 7408          dc.b      111,114,32,103,114,101,97,116,101,114,32,116
00005118  7265 6174 
0000511C  6572 2074 
00005120  6861 6E20 7409          dc.b      104,97,110,32,48,57,55,70,70,70,70,70,0
00005124  3039 3746 
00005128  4646 4646 
0000512C  00        
                    7410   @m68kde~2_151:
0000512E  0D0A 4F64 7411          dc.b      13,10,79,100,100,32,97,100,100,114,101,115,115
00005132  6420 6164 
00005136  6472 6573 
0000513A  73        
0000513B  2069 7320 7412          dc.b      32,105,115,32,110,111,116,32,97,108,108,111
0000513F  6E6F 7420 
00005143  616C 6C6F 
00005147  7765 6420 7413          dc.b      119,101,100,32,102,111,114,32,119,111,114,100
0000514B  666F 7220 
0000514F  776F 7264 
00005153  206F 7220 7414          dc.b      32,111,114,32,108,111,110,103,32,119,111,114
00005157  6C6F 6E67 
0000515B  2077 6F72 
0000515F  6421 00   7415          dc.b      100,33,0
                    7416   @m68kde~2_152:
00005162  0D0A 596F 7417          dc.b      13,10,89,111,117,32,104,97,118,101,32,101,110
00005166  7520 6861 
0000516A  7665 2065 
0000516E  6E        
0000516F  7465 7265 7418          dc.b      116,101,114,101,100,32,37,120,32,102,111,114
00005173  6420 2578 
00005177  2066 6F72 
0000517B  2074 6865 7419          dc.b      32,116,104,101,32,115,116,97,114,116,32,97,100
0000517F  2073 7461 
00005183  7274 2061 
00005187  64        
00005188  6472 6573 7420          dc.b      100,114,101,115,115,0
0000518C  7300      
                    7421   @m68kde~2_153:
0000518E  0D0A 5072 7422          dc.b      13,10,80,114,111,118,105,100,101,32,97,110,32
00005192  6F76 6964 
00005196  6520 616E 
0000519A  20        
0000519B  656E 6420 7423          dc.b      101,110,100,32,97,100,100,114,101,115,115,32
0000519F  6164 6472 
000051A3  6573 7320 
000051A7  666F 7220 7424          dc.b      102,111,114,32,121,111,117,114,32,100,97,116
000051AB  796F 7572 
000051AF  2064 6174 
000051B3  613A 2000 7425          dc.b      97,58,32,0
                    7426   @m68kde~2_154:
000051B8  0D0A 4572 7427          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
000051BC  726F 723A 
000051C0  2049 6E76 
000051C4  61        
000051C5  6C69 6420 7428          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
000051C9  6164 6472 
000051CD  6573 7321 
000051D1  2045 6E64 7429          dc.b      32,69,110,100,32,97,100,100,114,101,115,115
000051D5  2061 6464 
000051D9  7265 7373 
000051DD  2066 6F72 7430          dc.b      32,102,111,114,32,83,82,65,77,32,115,104,111
000051E1  2053 5241 
000051E5  4D20 7368 
000051E9  6F        
000051EA  756C 6420 7431          dc.b      117,108,100,32,110,111,116,32,98,101,32,108
000051EE  6E6F 7420 
000051F2  6265 206C 
000051F6  6573 7320 7432          dc.b      101,115,115,32,116,104,97,110,32,111,114,32
000051FA  7468 616E 
000051FE  206F 7220 
00005202  6571 7561 7433          dc.b      101,113,117,97,108,32,116,111,32,115,116,97
00005206  6C20 746F 
0000520A  2073 7461 
0000520E  7274 2061 7434          dc.b      114,116,32,97,100,100,114,101,115,115,32,111
00005212  6464 7265 
00005216  7373 206F 
0000521A  7220 6772 7435          dc.b      114,32,103,114,101,97,116,101,114,32,116,104
0000521E  6561 7465 
00005222  7220 7468 
00005226  616E 2046 7436          dc.b      97,110,32,70,48,48,51,70,70,70,70,0
0000522A  3030 3346 
0000522E  4646 4600 
                    7437   @m68kde~2_155:
00005232  0D0A 4572 7438          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00005236  726F 723A 
0000523A  2049 6E76 
0000523E  61        
0000523F  6C69 6420 7439          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
00005243  6164 6472 
00005247  6573 7321 
0000524B  2045 6E64 7440          dc.b      32,69,110,100,32,97,100,100,114,101,115,115
0000524F  2061 6464 
00005253  7265 7373 
00005257  2066 6F72 7441          dc.b      32,102,111,114,32,68,82,65,77,32,115,104,111
0000525B  2044 5241 
0000525F  4D20 7368 
00005263  6F        
00005264  756C 6420 7442          dc.b      117,108,100,32,110,111,116,32,98,101,32,108
00005268  6E6F 7420 
0000526C  6265 206C 
00005270  6573 7320 7443          dc.b      101,115,115,32,116,104,97,110,32,111,114,32
00005274  7468 616E 
00005278  206F 7220 
0000527C  6571 7561 7444          dc.b      101,113,117,97,108,32,116,111,32,115,116,97
00005280  6C20 746F 
00005284  2073 7461 
00005288  7274 2061 7445          dc.b      114,116,32,97,100,100,114,101,115,115,32,111
0000528C  6464 7265 
00005290  7373 206F 
00005294  7220 6772 7446          dc.b      114,32,103,114,101,97,116,101,114,32,116,104
00005298  6561 7465 
0000529C  7220 7468 
000052A0  616E 2030 7447          dc.b      97,110,32,48,57,55,70,70,70,70,70,0
000052A4  3937 4646 
000052A8  4646 4600 
                    7448   @m68kde~2_156:
000052AC  0D0A 4572 7449          dc.b      13,10,69,114,114,111,114,58,32,68,97,116,97
000052B0  726F 723A 
000052B4  2044 6174 
000052B8  61        
000052B9  2063 616E 7450          dc.b      32,99,97,110,110,111,116,32,98,101,32,102,105
000052BD  6E6F 7420 
000052C1  6265 2066 
000052C5  69        
000052C6  7474 6564 7451          dc.b      116,116,101,100,32,105,110,32,103,105,118,101
000052CA  2069 6E20 
000052CE  6769 7665 
000052D2  6E20 6164 7452          dc.b      110,32,97,100,100,114,101,115,115,32,114,97
000052D6  6472 6573 
000052DA  7320 7261 
000052DE  6E67 6500 7453          dc.b      110,103,101,0
                    7454   @m68kde~2_157:
000052E2  0D0A 4572 7455          dc.b      13,10,69,114,114,111,114,58,32,78,111,116,32
000052E6  726F 723A 
000052EA  204E 6F74 
000052EE  20        
000052EF  656E 6F75 7456          dc.b      101,110,111,117,103,104,32,97,100,100,114,101
000052F3  6768 2061 
000052F7  6464 7265 
000052FB  7373 2072 7457          dc.b      115,115,32,114,97,110,103,101,32,116,111,32
000052FF  616E 6765 
00005303  2074 6F20 
00005307  7265 6164 7458          dc.b      114,101,97,100,32,116,104,101,32,100,97,116
0000530B  2074 6865 
0000530F  2064 6174 
00005313  6100      7459          dc.b      97,0
                    7460   @m68kde~2_158:
00005316  0D0A 5765 7461          dc.b      13,10,87,101,32,97,114,101,32,110,111,116,32
0000531A  2061 7265 
0000531E  206E 6F74 
00005322  20        
00005323  7375 7070 7462          dc.b      115,117,112,112,111,115,101,100,32,116,111,32
00005327  6F73 6564 
0000532B  2074 6F20 
0000532F  6765 7420 7463          dc.b      103,101,116,32,104,101,114,101,33,32,68,101
00005333  6865 7265 
00005337  2120 4465 
0000533B  6661 756C 7464          dc.b      102,97,117,108,116,32,105,115,32,105,110,99
0000533F  7420 6973 
00005343  2069 6E63 
00005347  7265 6D65 7465          dc.b      114,101,109,101,110,116,32,98,121,32,49,32,98
0000534B  6E74 2062 
0000534F  7920 3120 
00005353  62        
00005354  7974 652E 7466          dc.b      121,116,101,46,0
00005358  00        
                    7467   @m68kde~2_159:
0000535A  0D0A 4461 7468          dc.b      13,10,68,97,116,97,32,97,116,32,108,111,99,97
0000535E  7461 2061 
00005362  7420 6C6F 
00005366  6361      
00005368  7469 6F6E 7469          dc.b      116,105,111,110,32,37,120,58,32,37,48,50,120
0000536C  2025 783A 
00005370  2025 3032 
00005374  78        
00005375  00        7470          dc.b      0
                    7471   @m68kde~2_160:
00005376  0D0A 576F 7472          dc.b      13,10,87,111,114,100,32,97,116,32,108,111,99
0000537A  7264 2061 
0000537E  7420 6C6F 
00005382  63        
00005383  6174 696F 7473          dc.b      97,116,105,111,110,32,37,120,58,32,37,48,50
00005387  6E20 2578 
0000538B  3A20 2530 
0000538F  32        
00005390  7825 3032 7474          dc.b      120,37,48,50,120,0
00005394  7800      
                    7475   @m68kde~2_161:
00005396  0D0A 4C6F 7476          dc.b      13,10,76,111,110,103,32,119,111,114,100,32,97
0000539A  6E67 2077 
0000539E  6F72 6420 
000053A2  61        
000053A3  7420 6C6F 7477          dc.b      116,32,108,111,99,97,116,105,111,110,32,37,120
000053A7  6361 7469 
000053AB  6F6E 2025 
000053AF  78        
000053B0  3A20 2530 7478          dc.b      58,32,37,48,50,120,37,48,50,120,37,48,50,120
000053B4  3278 2530 
000053B8  3278 2530 
000053BC  3278      
000053BE  2530 3278 7479          dc.b      37,48,50,120,0
000053C2  00        
                    7480   @m68kde~2_162:
000053C4  0D0A 4669 7481          dc.b      13,10,70,105,110,105,115,104,101,100,32,114
000053C8  6E69 7368 
000053CC  6564 2072 
000053D0  6561 6469 7482          dc.b      101,97,100,105,110,103,0
000053D4  6E67 00   
                    7483   @m68kde~2_163:
000053D8  0D0A 456E 7484          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
000053DC  7465 7220 
000053E0  7468 6520 
000053E4  64        
000053E5  6174 6120 7485          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
000053E9  696E 2066 
000053ED  6F72 6D61 
000053F1  74        
000053F2  2058 583A 7486          dc.b      32,88,88,58,32,0
000053F6  2000      
                    7487   @m68kde~2_164:
000053F8  0D0A 456E 7488          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
000053FC  7465 7220 
00005400  7468 6520 
00005404  64        
00005405  6174 6120 7489          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00005409  696E 2066 
0000540D  6F72 6D61 
00005411  74        
00005412  2058 5858 7490          dc.b      32,88,88,88,88,58,32,0
00005416  583A 2000 
                    7491   @m68kde~2_165:
0000541A  0D0A 456E 7492          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
0000541E  7465 7220 
00005422  7468 6520 
00005426  64        
00005427  6174 6120 7493          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
0000542B  696E 2066 
0000542F  6F72 6D61 
00005433  74        
00005434  2058 5858 7494          dc.b      32,88,88,88,88,88,88,88,88,58,32,0
00005438  5858 5858 
0000543C  583A 2000 
                    7495   @m68kde~2_166:
00005440  0D0A 5772 7496          dc.b      13,10,87,114,105,116,105,110,103,32,37,120,32
00005444  6974 696E 
00005448  6720 2578 
0000544C  20        
0000544D  6174 206C 7497          dc.b      97,116,32,108,111,99,97,116,105,111,110,32,37
00005451  6F63 6174 
00005455  696F 6E20 
00005459  25        
0000545A  7800      7498          dc.b      120,0
                    7499   @m68kde~2_167:
0000545C  0D0A 4572 7500          dc.b      13,10,69,114,114,111,114,32,119,114,105,116
00005460  726F 7220 
00005464  7772 6974 
00005468  696E 6720 7501          dc.b      105,110,103,32,37,120,32,116,111,32,97,100,100
0000546C  2578 2074 
00005470  6F20 6164 
00005474  64        
00005475  7265 7373 7502          dc.b      114,101,115,115,32,37,120,0
00005479  2025 7800 
                    7503   @m68kde~2_168:
0000547E  0D0A 4572 7504          dc.b      13,10,69,114,114,111,114,58,32,69,110,100,32
00005482  726F 723A 
00005486  2045 6E64 
0000548A  20        
0000548B  6164 6472 7505          dc.b      97,100,100,114,101,115,115,32,108,105,109,105
0000548F  6573 7320 
00005493  6C69 6D69 
00005497  7420 7265 7506          dc.b      116,32,114,101,97,99,104,101,100,0
0000549B  6163 6865 
0000549F  6400      
                    7507   @m68kde~2_169:
000054A2  0D0A 4361 7508          dc.b      13,10,67,97,110,110,111,116,32,119,114,105,116
000054A6  6E6E 6F74 
000054AA  2077 7269 
000054AE  74        
000054AF  6520 2578 7509          dc.b      101,32,37,120,32,97,110,100,32,37,120,0
000054B3  2061 6E64 
000054B7  2025 7800 
                    7510   @m68kde~2_170:
000054BC  0D0A 5772 7511          dc.b      13,10,87,114,105,116,105,110,103,32,102,105
000054C0  6974 696E 
000054C4  6720 6669 
000054C8  6E69 7368 7512          dc.b      110,105,115,104,101,100,32,97,116,32,37,48,56
000054CC  6564 2061 
000054D0  7420 2530 
000054D4  38        
000054D5  7800      7513          dc.b      120,0
                    7514   @m68kde~2_171:
000054D8  5374 7564 7515          dc.b      83,116,117,100,101,110,116,39,115,32,78,97,109
000054DC  656E 7427 
000054E0  7320 4E61 
000054E4  6D        
000054E5  6573 3A20 7516          dc.b      101,115,58,32,74,105,110,105,108,32,80,97,116
000054E9  4A69 6E69 
000054ED  6C20 5061 
000054F1  74        
000054F2  656C 2061 7517          dc.b      101,108,32,97,110,100,32,83,97,105,102,32,65
000054F6  6E64 2053 
000054FA  6169 6620 
000054FE  41        
000054FF  6264 656C 7518          dc.b      98,100,101,108,97,122,105,109,0
00005503  617A 696D 
00005507  00        
                    7519   @m68kde~2_172:
00005508  5374 7564 7520          dc.b      83,116,117,100,101,110,116,32,35,58,32,51,56
0000550C  656E 7420 
00005510  233A 2033 
00005514  38        
00005515  3234 3037 7521          dc.b      50,52,48,55,50,55,32,97,110,100,32,32,54,50
00005519  3237 2061 
0000551D  6E64 2020 
00005521  3632      
00005523  3633 3934 7522          dc.b      54,51,57,52,50,50,0
00005527  3232 00   
                    7523   @m68kde~2_173:
0000552A  0D0A 5350 7524          dc.b      13,10,83,80,73,32,104,97,115,32,98,101,101,110
0000552E  4920 6861 
00005532  7320 6265 
00005536  656E      
00005538  2069 6E69 7525          dc.b      32,105,110,105,116,105,97,108,105,122,101,100
0000553C  7469 616C 
00005540  697A 6564 
00005544  2073 7563 7526          dc.b      32,115,117,99,99,101,115,115,102,117,108,108
00005548  6365 7373 
0000554C  6675 6C6C 
00005550  792E 00   7527          dc.b      121,46,0
                    7528   @m68kde~2_174:
00005554  0D0A 5275 7529          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005558  6E6E 696E 
0000555C  672E 2E2E 
00005560  2E        
00005561  2E00      7530          dc.b      46,0
                    7531   @m68kde~2_175:
00005564  5275 6E6E 7532          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005568  696E 672E 
0000556C  2E2E 2E2E 
00005570  00        
                    7533   @m68kde~2_176:
00005572  4279 3A20 7534          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005576  504A 2044 
0000557A  6176 6965 
0000557E  73        
0000557F  00        7535          dc.b      0
                    7536   @m68kde~2_177:
00005580  0D0A 2573 7537          dc.b      13,10,37,115,0
00005584  00        
                    7538   @itoa_1:
00005586  2D32 3134 7539          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000558A  3734 3833 
0000558E  3634 3800 
                    7540   __ctype:
00005592  0040 4040 7541          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005596  4040 4040 
0000559A  4040 5050 
0000559E  5050 50   
000055A1  4040 4040 7542          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000055A5  4040 4040 
000055A9  4040 4040 
000055AD  4040 40   
000055B0  4040 40D0 7543          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000055B4  A0A0 A0A0 
000055B8  A0A0 A0A0 
000055BC  A0A0 A0A0 7544          dc.b      160,160,160,160,160,160,160,140,140,140,140
000055C0  A0A0 A08C 
000055C4  8C8C 8C   
000055C7  8C8C 8C8C 7545          dc.b      140,140,140,140,140,140,160,160,160,160,160
000055CB  8C8C A0A0 
000055CF  A0A0 A0   
000055D2  A0A0 8A8A 7546          dc.b      160,160,138,138,138,138,138,138,130,130,130
000055D6  8A8A 8A8A 
000055DA  8282 82   
000055DD  8282 8282 7547          dc.b      130,130,130,130,130,130,130,130,130,130,130
000055E1  8282 8282 
000055E5  8282 82   
000055E8  8282 8282 7548          dc.b      130,130,130,130,130,130,160,160,160,160,160
000055EC  8282 A0A0 
000055F0  A0A0 A0   
000055F3  A089 8989 7549          dc.b      160,137,137,137,137,137,137,129,129,129,129
000055F7  8989 8981 
000055FB  8181 81   
000055FE  8181 8181 7550          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005602  8181 8181 
00005606  8181 81   
00005609  8181 8181 7551          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0000560D  81A0 A0A0 
00005611  A040 0000 
00005615  00        
00005616  0000 0000 7552          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000561A  0000 0000 
0000561E  0000 0000 
00005622  0000 0000 
00005626  0000 0000 
0000562A  0000      
0000562C  0000 0000 7553          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005630  0000 0000 
00005634  0000 0000 
00005638  0000 0000 
0000563C  0000 0000 
00005640  0000      
00005642  0000 0000 7554          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005646  0000 0000 
0000564A  0000 0000 
0000564E  0000 0000 
00005652  0000 0000 
00005656  0000      
00005658  0000 0000 7555          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000565C  0000 0000 
00005660  0000 0000 
00005664  0000 0000 
00005668  0000 0000 
0000566C  0000      
0000566E  0000 0000 7556          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005672  0000 0000 
00005676  0000 0000 
0000567A  0000 0000 
0000567E  0000 0000 
00005682  0000      
00005684  0000 0000 7557          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005688  0000 0000 
0000568C  0000 0000 
00005690  0000 00   
                    7558          section   data
00005694            7559                   align
          0000 5694 7560   DataStart       equ       *
                    7561   
                    7562   *********************************************************************************************************
                    7563   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7564   * to ram as part of the CStart routine in this file
                    7565   *********************************************************************************************************
                    7566   
                    7567          section   bss
00005694            7568                   align
          0000 5694 7569   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7570   
                    7571   *********************************************************************************************************
                    7572   * Section for Uninitialised Data held in ROM as constants
                    7573   *********************************************************************************************************
                    7574   
0B000000            7575                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 7576   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7577   
                    7578   
0B000000            7579   bss             org       bss
                    7580   
                    7581   *********************************************************************************************************
                    7582   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7583   * install the exception handler using the C function InstallExceptionHandler()
                    7584   *********************************************************************************************************
                    7585   
                    7586   
                    7587   
0B000000            7588   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7589   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7590   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7591   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7592   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7593   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7594   VCheck           ds.l    1      ditto
0B00001C            7595   VTrapV           ds.l    1      ditto
0B000020            7596   VPrivilege       ds.l    1      ditto
0B000024            7597   VTrace           ds.l    1
0B000028            7598   VLine1010emul    ds.l    1
0B00002C            7599   VLine1111emul    ds.l    1
0B000030            7600   VUnassigned1     ds.l    1
0B000034            7601   VUnassigned2     ds.l    1
0B000038            7602   VUnassigned3     ds.l    1
0B00003C            7603   VUninit_IRQ      ds.l    1
0B000040            7604   VUnassigned4     ds.l    1
0B000044            7605   VUnassigned5     ds.l    1
0B000048            7606   VUnassigned6     ds.l    1
0B00004C            7607   VUnassigned7     ds.l    1
0B000050            7608   VUnassigned8     ds.l    1
0B000054            7609   VUnassigned9     ds.l    1
0B000058            7610   VUnassigned10    ds.l    1
0B00005C            7611   VUnassigned11    ds.l    1
0B000060            7612   VSpuriousIRQ     ds.l    1
                    7613   
                    7614   * Interrupt handlers Vector 25-31
0B000064            7615   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7616   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7617   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7618   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7619   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7620   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7621   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7622   
                    7623   * Trap Handler vectors 32-47
0B000080            7624   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7625   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7626   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7627   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7628   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7629   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7630   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7631   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7632   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7633   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7634   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7635   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7636   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7637   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7638   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7639   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7640   
                    7641   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7642   
                    7643   ***********************************************************************************************************
                    7644   * Other Variables
                    7645   ***********************************************************************************************************
                    7646   *__DebugA5       ds.l    1
                    7647   *__UserA5        ds.l    1
                    7648   
                    7649   ***********************************************************************************************************
0B0000C0            7650   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7651   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7652   __heap:         ds.l    0       ; pointers for malloc functions
                    7653   
                    7654   *__himem:       ds.l    himem            ; highest memory location + 1
                    7655   *__stklen:      ds.l    stklen           ; default stack size
                    7656   
                    7657   *********************************************************************************************************
                    7658   * Section for Heap
                    7659   *********************************************************************************************************
                    7660   
                    7661   _i:
0B0000C4            7662          ds.b      4
                    7663   _x:
0B0000C8            7664          ds.b      4
                    7665   _y:
0B0000CC            7666          ds.b      4
                    7667   _z:
0B0000D0            7668          ds.b      4
                    7669   _PortA_Count:
0B0000D4            7670          ds.b      4
                    7671   _Trace:
0B0000D8            7672          ds.b      4
                    7673   _GoFlag:
0B0000DC            7674          ds.b      4
                    7675   _Echo:
0B0000E0            7676          ds.b      4
                    7677   _d0:
0B0000E4            7678          ds.b      4
                    7679   _d1:
0B0000E8            7680          ds.b      4
                    7681   _d2:
0B0000EC            7682          ds.b      4
                    7683   _d3:
0B0000F0            7684          ds.b      4
                    7685   _d4:
0B0000F4            7686          ds.b      4
                    7687   _d5:
0B0000F8            7688          ds.b      4
                    7689   _d6:
0B0000FC            7690          ds.b      4
                    7691   _d7:
0B000100            7692          ds.b      4
                    7693   _a0:
0B000104            7694          ds.b      4
                    7695   _a1:
0B000108            7696          ds.b      4
                    7697   _a2:
0B00010C            7698          ds.b      4
                    7699   _a3:
0B000110            7700          ds.b      4
                    7701   _a4:
0B000114            7702          ds.b      4
                    7703   _a5:
0B000118            7704          ds.b      4
                    7705   _a6:
0B00011C            7706          ds.b      4
                    7707   _PC:
0B000120            7708          ds.b      4
                    7709   _SSP:
0B000124            7710          ds.b      4
                    7711   _USP:
0B000128            7712          ds.b      4
                    7713   _SR:
0B00012C            7714          ds.b      2
                    7715   _BreakPointAddress:
0B00012E            7716          ds.b      32
                    7717   _BreakPointInstruction:
0B00014E            7718          ds.b      16
                    7719   _BreakPointSetOrCleared:
0B00015E            7720          ds.b      32
                    7721   _InstructionSize:
0B00017E            7722          ds.b      4
                    7723   _WatchPointAddress:
0B000182            7724          ds.b      32
                    7725   _WatchPointSetOrCleared:
0B0001A2            7726          ds.b      32
                    7727   _WatchPointString:
0B0001C2            7728          ds.b      800
                    7729   _TempString:
0B0004E2            7730          ds.b      100
                    7731          section   heap
0B000546            7732                   align
          0B00 0546 7733   bssEnd          equ *                   end of storage space for unitialised variables
                    7734   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7735   heap   equ       *
0B000546            7736                    align
          0000 0000

Assembly errors: 0
